<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.2.1" created="2012-01-01 01:47" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>Jason Dentler</title>
	<link>http://jasondentler.com/blog</link>
	<description>I&#039;m just here for the code</description>
	<pubDate>Sun, 01 Jan 2012 01:47:18 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://jasondentler.com/blog</wp:base_site_url>
	<wp:base_blog_url>http://jasondentler.com/blog</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>Jason</wp:author_login><wp:author_email>jasondentler@gmail.com</wp:author_email><wp:author_display_name><![CDATA[Jason]]></wp:author_display_name><wp:author_first_name><![CDATA[Jason]]></wp:author_first_name><wp:author_last_name><![CDATA[Dentler]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.2.1</generator>

	<item>
		<title>Hello World!</title>
		<link>http://jasondentler.com/blog/2009/07/hello-world-2/</link>
		<pubDate>Fri, 31 Jul 2009 14:33:16 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=5</guid>
		<description></description>
		<content:encoded><![CDATA[Hi boys and girls. Today, we're going to talk about computer programming, technology, and <del style="color: red; text-decoration: line-through;">surviving</del> thriving in an IT department.

As you might have guessed by the blog title, I'm a fan of BASIC programming languages. I've been programming on PCs since about 4th grade when I first started tinkering with BASIC on my family's 286 IBM PC clone running DOS 3.3. The language has come a long way since line numbers and GOSUBs.

Just to be clear, I'm not one of those VB weenies who makes a living by hammering out form after form with drag-and-drop designers. I write code. I create. I use the whole language, not just the clicky-widgets and IDE dohickeys.

So, stay tuned for some great info on advanced Visual Basic.NET, and programming and technology in general.

- Jason
Pro coder, amateur blogger

P.S. The blog title is intentionally misspelled. ]]></content:encoded>
		<excerpt:encoded><![CDATA[Hi boys and girls. Today, we're going to talk about computer programming, technology, andsurviving thriving in an IT department.]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2009-07-31 07:33:16</wp:post_date>
		<wp:post_date_gmt>2009-07-31 14:33:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-world-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="basic"><![CDATA[BASIC]]></category>
		<category domain="post_tag" nicename="history"><![CDATA[History]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="vb-weenies"><![CDATA[VB weenies]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LINQ to NHibernate 1.0 released</title>
		<link>http://jasondentler.com/blog/2009/07/linq-to-nhibernate-1-0-released/</link>
		<pubDate>Fri, 31 Jul 2009 23:53:22 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=36</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://devlicio.us/blogs/tuna_toksoz/archive/2009/07/26/nhibernate-linq-released.aspx">Tuna Toksoz</a>, <a href="http://chadly.net/post/2009/07/27/NHibernateLinq-10-is-out-and-about.aspx">Chad Lee</a>, and <a href="http://ayende.com/Blog/archive/2009/07/26/nhibernate-linq-1.0-released.aspx">Oren Eini a.k.a Ayende</a> have released LINQ to NHibernate 1.0. This version is still based on and limited by the criteria API of NHibernate, and still part of the NHContrib project.

Which one would you rather use?

<pre class="brush:vbnet">
Function Authenticate(userName As String, hashedPassword As String) As Identity
    Dim Query = From Identity In Accounts _
            Where Identity.UserName = userName _
            AndAlso Identity.PasswordHash = hashedPassword
    Return Query.FirstOrDefault
End Function
</pre>

<pre class="brush:vbnet">
Function Authenticate(userName As String, hashedPassword As String) As Identity
    Dim Query = m_Session.CreateCriteria(GetType(Identity)) _
                .Add(Expression.And( _
                   Expression.Eq("UserName", userName), _
                   Expression.Eq("PasswordHash", hashedPassword)) _
                .List().Cast(Of Identity)
    Return Query.FirstOrDefault
End Function
</pre>

Aren't you tired of using magic strings in the criteria API?


<a href="http://blogs.imeta.co.uk/sstrong/archive/2009/06/11/708.aspx">Steve Strong</a> has done a TON of work on the <a href="http://ayende.com/Blog/archive/2009/02/22/nhibernate-hql-ast-parser.aspx">HQL abstract syntax tree parser</a>, which is a prerequisite for the more powerful HQL version LINQ to NHibernate that will be part of the main NHibernate project, not NHContrib. His work was sponsored by <a href="http://imeta.co.uk/">iMeta</a>. The HQL AST has made it in to recently-released NHibernate 2.1, so the HQL version of LINQ to NHibernate can't be too far behind.

- Jason
LINQing like mad!]]></content:encoded>
		<excerpt:encoded><![CDATA[Tuna Toksoz, Chad Lee, and Oren Eini a.k.a Ayende have released LINQ to NHibernate 1.0.]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2009-07-31 17:53:22</wp:post_date>
		<wp:post_date_gmt>2009-07-31 23:53:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linq-to-nhibernate-1-0-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>code_editor</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>code_type</wp:meta_key>
			<wp:meta_value><![CDATA[Vb]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NHibernate 2.1 released</title>
		<link>http://jasondentler.com/blog/2009/08/nhibernate-2-1-released/</link>
		<pubDate>Sat, 01 Aug 2009 11:30:30 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ayende.com/Blog/archive/2009/07/20/nhibernate-2.1-is-out.aspx">NHibernate 2.1 is out</a>, and it has all kinds of good stuff™.
<ul>
	<li>You don't need parameterless constructors on your entities anymore! No more of this mess:
<pre class="brush:vbnet">        ''' &lt;summary&gt;
        ''' NHibernate-only. Do not use.
        ''' &lt;/summary&gt;
        ''' &lt;remarks&gt;&lt;/remarks&gt;
        Public Sub New()
        End Sub

        ''' &lt;summary&gt;
        ''' Real constructor
        ''' &lt;/summary&gt;
        ''' &lt;remarks&gt;&lt;/remarks&gt;
        Public Sub New(param1 As String, param2 As Date)
        End Sub</pre>
</li>
	<li>Dependency injection for entities.
Now, just inject your services right in to the constructor of the entity, instead of having to go get them every time you call your entity's methods.<br /> This:
<pre class="brush:vbnet">
Public Sub New()
End Sub

Public Function ChangePassword(oldPassword As String, newPassword As String, passwordHasher As IPasswordHashService) As String
     ' Do stuff
End Function
</pre>
becomes:
<pre class="brush:vbnet">
Public Sub New(passwordHasher As IPasswordHashService)
     m_PasswordHasher = passwordHasher
End Sub

Public Function ChangePassword(oldPassword As String, newPassword As String) As String
     'Do Stuff
End Function
</pre>

The benefit is that you don't have to inject your IPasswordHashService in to everything that calls ChangePassword.
</li>
<li>Finally, support for HashSet(Of T) instead of that weird little IESI implementation. Since .NET doesn't come with an ISet(Of T) interface, use ICollection(Of T).</li>
<li>Works with new SQL 2008 data types: Date, Time, and DateTimeOffset.</li>
</ul>

- Jason
Hibernating]]></content:encoded>
		<excerpt:encoded><![CDATA[<a href="http://ayende.com/Blog/archive/2009/07/20/nhibernate-2.1-is-out.aspx">NHibernate 2.1 is out</a>, and it has all kinds of good stuff™.
]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2009-08-01 05:30:30</wp:post_date>
		<wp:post_date_gmt>2009-08-01 11:30:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nhibernate-2-1-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Hibernating Ninjas and Entity Ninjection AddIn &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/08/hibernating-ninjas-and-entity-ninjection-addin/</wp:comment_author_url>
			<wp:comment_author_IP>72.167.131.46</wp:comment_author_IP>
			<wp:comment_date>2009-08-07 18:27:50</wp:comment_date>
			<wp:comment_date_gmt>2009-08-08 00:27:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] About                   &laquo; NHibernate 2.1 released [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Hibernating Ninjas and Entity Ninjection AddIn</title>
		<link>http://jasondentler.com/blog/2009/08/hibernating-ninjas-and-entity-ninjection-addin/</link>
		<pubDate>Sat, 08 Aug 2009 00:27:46 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=90</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="alignright size-medium wp-image-99" title="injection" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/injection-299x198.jpg" alt="injection" width="299" height="198" />As I posted before, NHibernate 2.1 allows you to <a href="http://jasondentler.com/blog/2009/08/nhibernate-2-1-released/">inject dependencies in to your entities</a> through the constructor. The idea is that when NHibernate rehydrates your object graph, it uses your favorite IoC container to inject whatever strategies and services your entities may require.

The <a href="http://code.google.com/p/unhaddins/">Unofficial AddIns for NHibernate</a> project has implementations of NHibernate's IBytecodeProvider interface to do Entity DI with Castle and Spring. Using these as a template, I've written an add-in for Entity DI using Ninject v2.

The code for this add-in basically falls in to two categories:
<ol>
	<li>Make NHibernate stop whining about parameters on the constructors.</li>
	<li>Creating instances of entities as they are being rehydrated from the database.</li>
</ol>
<h3>Constructor Parameters - Oh, the humanity!</h3>
We all know NHibernate makes a big freakin' deal out of certain things - virtual / overridable methods and properties, and parameterless constructors. When you do constructor DI, the constructor will have parameters. It's a fact.  Yes, you can inject your dependencies through properties, but don't do it. You'll spend months chasing NullReferenceExceptions.

So, how do we stop NHibernate from puking on entities that don't have a parameterless constructor? Simple - We override the methods that do those checks. Thanks to some serious refactoring in NHibernate 2.1, it's all in two places.
<ol>
	<li>DynProxyTypeValidator's CheckHasVisibleDefaultConstructor method</li>
	<li>ReflectionOptimizer's ThrowExceptionForNoDefaultCtor method</li>
</ol>
So, we sub-class those objects and override those methods to do nothing. There's some other minor plumbing. Check out ProxyFactoryFactory in the attached source.
<h3>What's this BytecodeProvider thing anyway?</h3>
From <a href="http://nhforge.org/blogs/nhibernate/archive/2008/12/12/entities-behavior-injection.aspx">Fabio Maulo's blog</a>:
<blockquote>The BytecodeProvider has two responsibility: provide the ProxyFactoryFactory and provide the ReflectionOptimizer.</blockquote>
That's exactly what we're doing.

Besides providing our new ProxyTypeValidator, the ProxyFactoryFactory also returns an implementation of IProxyFactory. Since Ninject doesn't do proxies, we have to wire in a proxy generator. Well, what's a DI framework good for, if not to wire in services. IProxyFactory is fetched from the kernel. This means you can use Ninject for DI and still have your choice of proxy factories: Castle, Spring, or Linfu, so far.

The reflection optimizer is responsible for creating instances of our entities as they're being rehydrated from the database. This is where we get in to the second part of code.
<h3>Let's make some entities</h3>
Because Ninject has automatic self-binding baked in, this part is also insanely easy. Here's the ReflectionOptimizer function where all of the magic happens:
<pre class="brush:csharp">        public override object CreateInstance()
        {
                return kernel.Get(mappedType);
        }</pre>
That's it. Yes. Really. It's that easy.

Well, not quite <strong>that</strong> easy. This changes the requirements for your entites in one very subtle and non-obvious way. In previous versions, and by default in this version, NHibernate always uses the parameterless constructor.

When using the NinjectBytecodeProvider, unless you decorate your entities with the Inject attribute, the constructor with the <strong>most</strong> parameters will be used. Remember - Unless you explicitly tell it otherwise, Ninject will choose the most complicated constructor it can find, even if it can't resolve all of the dependencies.
<h3>Great! What now?</h3>
I've submited this code to the <a href="http://code.google.com/p/unhaddins/issues/detail?id=10">uNHAddIns project</a> and <a href="http://groups.google.com/group/ninject/browse_thread/thread/cc0b7739929217c7?hl=en">posted about it</a> in the Ninject group. Until it's posted there, you can <a href="/downloads/uNhAddIns.NinjectAdapters.zip">download it here</a>.

That's all the time we have today. Tune in to my next post, where I'll show you how to build your own ASP.NET MVC project, and use this bytecode provider.

Jason
- Ninjecting entities since 2009]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date>2009-08-07 18:27:46</wp:post_date>
		<wp:post_date_gmt>2009-08-08 00:27:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hibernating-ninjas-and-entity-ninjection-addin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="di"><![CDATA[DI]]></category>
		<category domain="post_tag" nicename="ioc"><![CDATA[IoC]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="post_tag" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="category" nicename="ninject"><![CDATA[Ninject]]></category>
		<category domain="post_tag" nicename="ninject"><![CDATA[Ninject]]></category>
		<category domain="post_tag" nicename="orm"><![CDATA[ORM]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[ASP.NET MVC Archived Buzz, Page 1]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://aspdotnetmvc.com/buzz/default.aspx</wp:comment_author_url>
			<wp:comment_author_IP>64.55.113.203</wp:comment_author_IP>
			<wp:comment_date>2009-08-11 15:22:28</wp:comment_date>
			<wp:comment_date_gmt>2009-08-11 21:22:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] to Vote[Del.icio.us] Hibernating Ninjas and Entity Ninjection AddIn « BASICly everything (8/11/2009)Tuesday, August 11, 2009 from [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>How-To: Using the N* stack, part 1</title>
		<link>http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/</link>
		<pubDate>Sat, 08 Aug 2009 13:00:00 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=114</guid>
		<description></description>
		<content:encoded><![CDATA[This is the first post in a series where I show you step-by-step how to get your first ASP.NET MVC website up off the ground. By the end of this series, we’ll have a working web application for registering community college students. More importantly, you'll have a template you can easily follow for your own projects.

In this first post, I’ll show you how to set up your visual studio solution.

In this series, we’ll use these tools:
<ul>
	<li><strong><a href="http://www.asp.net/mvc/" target="_blank">ASP.NET MVC</a></strong> is a free, fully Microsoft-supported product that, unlike ASP.NET WebForms, gives you complete control over your application. You can use the Web Platform Installer or download the MSI installer package directly.</li>
	<li><strong><a href="http://www.codeplex.com/MVCContrib" target="_blank">MVCContrib</a></strong> – This is the contrib project for ASP.NET MVC. It adds additional functionality to and makes ASP.NET MVC easier to use.</li>
	<li><strong><a href="http://jquery.com/" target="_blank">jQuery</a></strong> – This is an open-source javascript library that does just about everything, and supports every major modern browser out there. Yes, you hate javascript. You’re going to love jQuery. I promise. This is included in the ASP.NET MVC download.</li>
	<li><strong><a href="http://sourceforge.net/projects/nhibernate/" target="_blank">NHibernate 2,1</a></strong> is a well-known, mature, open source object relational mapper (ORM). It helps you get on with writing you application, instead of spending days, weeks, or even months writing a data access layer.</li>
	<li><strong><a href="http://fluentnhibernate.org/downloads" target="_blank">Fluent NHibernate</a></strong> – This is a library for configuring NHibernate using an english-like syntax. It saves you from hacking through dozens of XML configuration files. Scroll to the bottom of the downloads page and get the latest compiled binaries.</li>
	<li><strong><a href="http://ninject.org/" target="_blank">Ninject</a></strong> is my personal favorite dependency injection (DI) / inversion of control (IoC) framework. It allows you to automatically wire up services to your objects. If you’ve never done DI or IoC before, you’re going to have a great “ah-ha!” moment. We’ll be using version 1.</li>
</ul>
You will also need:
<ul>
	<li>.NET Framework 3.5 SP1</li>
	<li>Visual Studio 2008 SP1. The Web Dev Express version may also work. I haven’t tried it.</li>
	<li>The latest version of NUnit</li>
	<li>Any major database supported by NHibenate. This can range from Oracle to SQL Server to MySQL to SQLite. I’ll be using SQL server in my examples, but if you have a favorite, you can easily use that instead.</li>
</ul>
I also suggest you get some kind of source control. You’ll want to play around and experiment as we go along.

OK. You’ve downloaded all of that? Good. Let’s talk terminology for a minute.
<ul>
	<li><strong>MVC</strong> stands for <strong>Model-View-Controller</strong>. This separation of responsibilities allows you greater flexibility to adapt and change your application.</li>
	<li><strong>Model</strong> – This term refers to all of your entities – your business objects. In terms of a billing application, this would be your invoices, invoice items, customers, products, etc. – all of the “real-world things” your application represents.</li>
	<li><strong>View</strong> – Each view presents a specific business object in a specific way. For example, you may have a view for editing customer data and another for displaying an invoice. You can also think of views as the pages that make up your application.</li>
	<li><strong>Controller</strong> – Controllers are the glue that bind a view to a specific entity in your model. They are also responsible for all of the flow of your application from page to page.</li>
	<li><strong>Inversion of Control</strong> (<strong>IoC</strong>) is the concept that your objects do not explicitly create the services that they need. Instead, they get them from some container of services. Hence, the inversion. Your classes don’t specify a specific implementation of the service, only the type of service they need – an interface. This loose coupling allows you to easily swap out implementations of those services without having to touch every class that uses them. I’ve seen two major flavors of IoC: Service Locator and Dependency Injection.</li>
	<li>A <strong>Service Locator</strong> is a central container where you specify which implementations of each service your application will use. Your objects request service implementations from the service locator. A service locator is typically a singleton, which is why I don’t like it.</li>
	<li><strong>Dependency Injection</strong> (<strong>DI</strong>) is a method of wiring your objects to the services they depend on as the object is built. These services are typically passed in as parameters on the object’s constructor. The object itself is built by the DI framework, in this case, Ninject. The process of building dependencies can be many layers deep. The <a href="http://dojo.ninject.org/Dependency%20Injection%20By%20Hand.ashx" target="_blank">Ninject Dojo</a> has a great tutorial on dependency injection. If you’re new to IoC, it’s a great place to start learning. Once you have the “ah ha!” moment, the migraine will stop and you’ll never look at code the same again. I promise.</li>
</ul>
<h3>Setting up the solution</h3>
<em>Disclaimer: This is how I have learned to set up my projects. I’m sure others have differing opinions. I’d love to hear them. I don’t claim to be an expert, just a curious professional looking to improve. </em>

Setting up the project is fairly straight-forward. We’ll do almost everything through Visual Studio. Just follow these steps.
<ol>
	<li>
<h4>Create the solution and web project</h4>
In Visual Studio, start a new ASP.NET MVC Web Application. This template is added to Visual Studio when you install ASP.NET MVC. I’ll be calling my solution NStackExample.<a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/image.png">
<img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/image_thumb.png" border="0" alt="image" width="534" height="293" /></a>

There’s a few things to note here. First, we’re creating a solution directory. Second, notice how we’ve appended .Web to the name of our web project, but not the solution.

This web project will contain all of the views. Despite the implied direction from Microsoft through the ASP.NET MVC template, it won’t contain the model or the controllers.</li>
	<li>
<h4>Create a library directory</h4>
Inside your solution directory, create a directory for all 3rd party libraries used in your project. I call mine Solution Items. The name you give it isn’t as important as the fact that you have one. So, in the example shown above, I would create the directory C:UsersJasonDocumentsVisual Studio 2008ProjectsNStackExampleSolution items. Copy these 15 assemblies to the library directory:
<ul>
	<li>From MVCContrib:
<ul>
	<li>MVCContrib.dll</li>
	<li>Microsoft.Web.Mvc.dll</li>
	<li>System.Web.Abstractions.dll</li>
	<li>System.Web.Mvc.dll</li>
	<li>System.Web.Routing.dll</li>
</ul>
</li>
	<li>From NHibernate:
<ul>
	<li>Antlr3.Runtime.dll</li>
	<li>Iesi.Collections.dll</li>
	<li>log4net.dll</li>
	<li>NHibernate.dll</li>
	<li>Castle.Core.dll</li>
	<li>Castle.DynamicProxy2.dll</li>
	<li>NHibernate.Bytecode.Castle.dll</li>
</ul>
</li>
	<li>FluentNHibernate.dll from Fluent NHibernate</li>
	<li>From Ninject:
<ul>
	<li>Ninject.Core.Dll</li>
	<li>Ninject.Framework.Mvc.Dll</li>
</ul>
</li>
</ul>
</li>
	<li>
<h4>Create the core project</h4>
This is your main project. It will contain your model, as well as interfaces for any services and strategies your application will use. It will not contain the implementation of any of those services. Those go in separate, easily replaceable assemblies.

Add a new “Class Library” project to your solution. We’ll call this project NStackExample.Core.

Now, right click on the project and select properties, then click on the Application tab on the side. In the root namespace field, remove .Core.

<a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/image2.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/image_thumb2.png" border="0" alt="image" width="554" height="57" /></a>
We’re doing this so our entities will be named NStackExample.Entity1, NStackExample.Entity2, etc. but the assembly will be NStackExample.Core.dll, which better describes it’s purpose.</li>
	<li>
<h4>Create the controller project</h4>
Next, create another project specifically for the controllers of your MVC project. We’re going to call it NStackExample.Controllers. Yes, the Microsoft ASP.NET MVC project template already has a folder for them. We’re not going to use that folder because I think they should be better separated from the content of your website.</li>
	<li>
<h4>Clean up your projects</h4>
Delete all of these:
<ul>
	<li>The Class.vb or Class.cs files in the Core and Controllers projects.</li>
	<li>In the NStackExample.Web project, delete:
<ul>
	<li>The Controllers folder and all of it's contents.</li>
	<li>The Models folder</li>
	<li>The Microsoft AJAX script libraries in the Scripts folder</li>
	<li>The Home and Account folders inside the Views folder</li>
	<li>The LogOnUserControl in the Views folder</li>
</ul>
</li>
</ul>
<a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/image4.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/image_thumb4.png" border="0" alt="image" width="410" height="771" /></a></li>
	<li>
<h4>Set up your references</h4>
This is pretty straight forward.
<ol>
	<li>First, in your web project, remove the references to System.Web.Abstractions, System.Web.Mvc, and System.Web.Routing.</li>
	<li>Next, in your web project, from the library directory we created in step 2, add references to these 10 assemblies:
<ul>
	<li>log4net.dll</li>
	<li>Microsoft.Web.Mvc.dll</li>
	<li>MvcContrib.dll</li>
	<li>NHibernat.Bytecode.Castle.dll</li>
	<li>NHibernate.dll</li>
	<li>Ninject.Core.dll</li>
	<li>Ninject.Framework.Mvc.dll</li>
	<li>System.Web.Abstractions.dll</li>
	<li>System.Web.Mvc.dll</li>
	<li>System.Web.Routing.dll</li>
</ul>
</li>
	<li>In the web project, add references to the controllers project and the core project.</li>
	<li>In the controllers project, add references to these 3 assemblies:
<ul>
	<li>log4net.dll</li>
	<li>MvcContrib.dll</li>
	<li>System.Web.Mvc.dll</li>
</ul>
</li>
	<li>In the controllers project, add a reference to the core project.</li>
</ol>
</li>
</ol>
Did you notice how we didn’t add any references in our core project? That’s intentional. When a project needs to reference your model or service interfaces, you don’t want to have required dependencies on other libraries and frameworks.

That’s it. Your solution is set up and you’re ready to start coding. In the next post, we’ll start building the model, configure NHibernate, and set up the database.

Jason

- Blogged-out for the night]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date>2009-08-08 07:00:00</wp:post_date>
		<wp:post_date_gmt>2009-08-08 13:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-using-the-n-stack-part-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net-mvc"><![CDATA[ASP.NET MVC]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[ASP.NET MVC]]></category>
		<category domain="post_tag" nicename="di"><![CDATA[DI]]></category>
		<category domain="post_tag" nicename="ioc"><![CDATA[IoC]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="post_tag" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="category" nicename="ninject"><![CDATA[Ninject]]></category>
		<category domain="post_tag" nicename="ninject"><![CDATA[Ninject]]></category>
		<category domain="post_tag" nicename="orm"><![CDATA[ORM]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[progg.ru]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://progg.ru/How-To-Using-the-N-stack-part-1-BASICly-everything</wp:comment_author_url>
			<wp:comment_author_IP>74.55.210.98</wp:comment_author_IP>
			<wp:comment_date>2009-08-08 23:10:54</wp:comment_date>
			<wp:comment_date_gmt>2009-08-09 05:10:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>How-To: Using the N* stack, part 1 « BASICly everything...</strong>

Thank you for submitting this cool story - Trackback from progg.ru...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[ANaimi]]></wp:comment_author>
			<wp:comment_author_email>dr_a2002@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.anaimi.com</wp:comment_author_url>
			<wp:comment_author_IP>198.36.32.133</wp:comment_author_IP>
			<wp:comment_date>2009-08-08 23:14:03</wp:comment_date>
			<wp:comment_date_gmt>2009-08-09 05:14:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Jason. Looking forward for the rest of the series. Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[Buzzy]]></wp:comment_author>
			<wp:comment_author_email>merry@cia.gov</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.3.126.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-09 02:05:44</wp:comment_date>
			<wp:comment_date_gmt>2009-08-09 08:05:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi there Jason. Looking forward for the rest of the series. You could have skipped this part:p :=)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-08-09 05:10:03</wp:comment_date>
			<wp:comment_date_gmt>2009-08-09 11:10:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Buzzy - In most cases, you're probably right, but those monolithic single-project solutions come from somewhere - mostly my early 20s. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Tim]]></wp:comment_author>
			<wp:comment_author_email>furybongo@hush.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.93.135.158</wp:comment_author_IP>
			<wp:comment_date>2009-08-09 06:02:38</wp:comment_date>
			<wp:comment_date_gmt>2009-08-09 12:02:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for doing this! - subscribed]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[yassir]]></wp:comment_author>
			<wp:comment_author_email>yassir@windowslive.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.248.122.218</wp:comment_author_IP>
			<wp:comment_date>2009-08-09 08:16:23</wp:comment_date>
			<wp:comment_date_gmt>2009-08-09 14:16:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looking forward to the next article , Too bad you won't be using C#]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[How-To: Using the N* stack, part 1 « BASICly everything | OddStall.Com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://oddstall.com/blog/2009/08/how-to-using-the-n-stack-part-1-%c2%ab-basicly-everything/</wp:comment_author_url>
			<wp:comment_author_IP>209.62.118.210</wp:comment_author_IP>
			<wp:comment_date>2009-08-09 08:22:20</wp:comment_date>
			<wp:comment_date_gmt>2009-08-09 14:22:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] See the original post: How-To: Using the N* stack, part 1 « BASICly everything [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-08-09 08:31:23</wp:comment_date>
			<wp:comment_date_gmt>2009-08-09 14:31:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'll use both, because I know not everyone thinks in VB...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>10</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[Mike C.]]></wp:comment_author>
			<wp:comment_author_email>mchambaud@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.helios.ca</wp:comment_author_url>
			<wp:comment_author_IP>206.248.157.171</wp:comment_author_IP>
			<wp:comment_date>2009-08-09 09:54:46</wp:comment_date>
			<wp:comment_date_gmt>2009-08-09 15:54:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is it just me or Ninject.Framework.Mvc.Dll is not in the latest of Ninject release?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[franklingm]]></wp:comment_author>
			<wp:comment_author_email>franklingm@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>200.88.192.177</wp:comment_author_IP>
			<wp:comment_date>2009-08-09 10:18:16</wp:comment_date>
			<wp:comment_date_gmt>2009-08-09 16:18:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank god you'll be using C# too ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[fgmmgf]]></wp:comment_author>
			<wp:comment_author_email>franklingm@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>200.88.192.177</wp:comment_author_IP>
			<wp:comment_date>2009-08-09 11:17:00</wp:comment_date>
			<wp:comment_date_gmt>2009-08-09 17:17:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have the same problem, it's not there..]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>13</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[NoelR]]></wp:comment_author>
			<wp:comment_author_email>noel666@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.98.19.167</wp:comment_author_IP>
			<wp:comment_date>2009-08-09 13:03:37</wp:comment_date>
			<wp:comment_date_gmt>2009-08-09 19:03:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looking foward to your next release ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-08-09 20:34:20</wp:comment_date>
			<wp:comment_date_gmt>2009-08-10 02:34:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Mike C, @fgmmgf: Sorry. Ninject.Framework.Mvc is part of Ninject 1.5, meaning you'd have to download it with SVN, update the references, and build it yourself. It's a process you should probably get familiar with, but when I post the source code, it'll be included. You can grab it from there.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>13</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[Zohaib Uddin Khan]]></wp:comment_author>
			<wp:comment_author_email>zohaib.u.khan@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>213.132.48.3</wp:comment_author_IP>
			<wp:comment_date>2009-08-10 01:57:47</wp:comment_date>
			<wp:comment_date_gmt>2009-08-10 07:57:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Could you please tell me, why in Step # 6, point # 3, you are references the core project in the web project? Since, Web project only need to be depend upon Controller.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-10 06:49:01</wp:comment_date>
			<wp:comment_date_gmt>2009-08-10 12:49:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The core project contains our model - the entities. The web project contains our views. Our views will be projecting (displaying) data from the model, so the views must know about the model. In fact, in most cases, our view pages will actually be strongly-typed: System.Web.Mvc.ViewPage(Of SomeEntityType)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>18</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[How-To: Using the N* Stack, part 2 &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/</wp:comment_author_url>
			<wp:comment_author_IP>72.167.131.46</wp:comment_author_IP>
			<wp:comment_date>2009-08-10 19:18:30</wp:comment_date>
			<wp:comment_date_gmt>2009-08-11 01:18:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Saturday, I posted the first in a series of posts about building an ASP.NET MVC application from the ground up using NHibernate and Ninject. It dealt [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>21</wp:comment_id>
			<wp:comment_author><![CDATA[How-To: Using the N* Stack, part 2 - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/08/11/how-to-using-the-n-stack-part-2.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-08-11 14:24:10</wp:comment_date>
			<wp:comment_date_gmt>2009-08-11 20:24:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Saturday, I posted the&nbsp;first part in a series&nbsp;about building an&nbsp;ASP.NET MVC&nbsp;application from the ground up [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[NHibernate Talk 8/11/09 - Travis.Net.Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://weblogs.asp.net/thigley/archive/2009/08/11/nhibernate-talk-8-11-09.aspx</wp:comment_author_url>
			<wp:comment_author_IP>66.129.67.215</wp:comment_author_IP>
			<wp:comment_date>2009-08-11 16:35:27</wp:comment_date>
			<wp:comment_date_gmt>2009-08-11 22:35:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] How-To: Using the N* Stack, Part 1, first in a series of articles on setting your first NHibernate ASP.NET MVC application.NerdDinner with Fluent NHibernate Part 1, first in a series on converting the NerdDinner project to use NHibernate/FluentNhibernate.Part 3 on using NHibernate and WPF, utilizing the &quot;Conversation-per-BussinesTransaction&quot; concept.New NHibernate CodeSmith templates v1.1.   Published Tuesday, August 11, 2009 4:24 PM by mxmissile Filed under: ASP.NET, NHibernate, mvc, fluentnhibernate [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>23</wp:comment_id>
			<wp:comment_author><![CDATA[NHibernate Talk 8/11/09 | I love .NET!]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.ilovenet.com.ar/2009-08-11/nhibernate-talk-81109/</wp:comment_author_url>
			<wp:comment_author_IP>209.190.85.205</wp:comment_author_IP>
			<wp:comment_date>2009-08-11 19:45:31</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 01:45:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] How-To: Using the N* Stack, Part 1, first in a series of articles on setting your first NHibernate ASP.NET MVC application. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[Reflective Perspective - Chris Alcock &raquo; The Morning Brew #410]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.cwa.me.uk/2009/08/12/the-morning-brew-410/</wp:comment_author_url>
			<wp:comment_author_IP>212.227.118.27</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 01:30:21</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 07:30:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] How-To: Using the N* stack, part 1 - Jason Dentler starts a series of posts looking at getting started with the N* alternative .NET frameworks as a part of an ASP.NET MVC Project. This first part looks at setting up the solution with the correct references, and How-To: Using the N* Stack, part 2 starts looking at a sample application model and how you can make it NHibernate friendly [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[NHibernate Talk 8/11/09 | rapid-DEV.net]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://rapid-dev.net/2009/08/nhibernate-talk-81109/</wp:comment_author_url>
			<wp:comment_author_IP>72.47.228.21</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 05:46:13</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 11:46:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] How-To: Using the N* Stack, Part 1, first in a series of articles on setting your first NHibernate ASP.NET MVC application. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>26</wp:comment_id>
			<wp:comment_author><![CDATA[DotNetShoutout]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dotnetshoutout.com/How-To-Using-the-N-stack-part-1-Jason-Dentler</wp:comment_author_url>
			<wp:comment_author_IP>206.72.113.4</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 09:44:54</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 15:44:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>How-To: Using the N* stack, part 1 - Jason Dentler...</strong>

Thank you for submitting this cool story - Trackback from DotNetShoutout...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>27</wp:comment_id>
			<wp:comment_author><![CDATA[How-To: Using the N* Stack, part 3 &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/</wp:comment_author_url>
			<wp:comment_author_IP>72.167.131.46</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 17:32:57</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 23:32:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is the third installment in my series. In part 1, we downloaded our libraries and set up our solution. In part 2, we built our model. In this part, [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>28</wp:comment_id>
			<wp:comment_author><![CDATA[How-To: Using the N* Stack, part 3 - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/08/13/how-to-using-the-n-stack-part-3.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 17:50:03</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 23:50:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is the third installment in my series. In part 1, we downloaded our libraries and set up our solution. In part 2, we built our model. In this part, [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>29</wp:comment_id>
			<wp:comment_author><![CDATA[How-To: Using the N* Stack, part 4 &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/</wp:comment_author_url>
			<wp:comment_author_IP>72.167.131.46</wp:comment_author_IP>
			<wp:comment_date>2009-08-16 03:02:30</wp:comment_date>
			<wp:comment_date_gmt>2009-08-16 09:02:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Part 1 – Setting up the Visual Studio solution [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[kurt schroeder]]></wp:comment_author>
			<wp:comment_author_email>kurt@kurtschroeder.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.YankeeImperialistDog.com</wp:comment_author_url>
			<wp:comment_author_IP>67.176.129.21</wp:comment_author_IP>
			<wp:comment_date>2009-08-21 07:03:41</wp:comment_date>
			<wp:comment_date_gmt>2009-08-21 13:03:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jason, I'm enjoying this series. Thanks. A quick note on fluent NHibernate: there have been some changes as i'm sure you know and this is just a reminder to all to download or branch the source as often as possible. WithLengthOf is now Length and there are other language changes. The changes are self explanatory meaning its a minor issue to adjust your tutorial.

Thanks Again
KES]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[Part 5: Fixing the Broken Stuff &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/08/part-5-fixing-the-broken-stuff/</wp:comment_author_url>
			<wp:comment_author_IP>72.167.131.46</wp:comment_author_IP>
			<wp:comment_date>2009-08-21 20:56:53</wp:comment_date>
			<wp:comment_date_gmt>2009-08-22 02:56:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Part 1 – Solution setup [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[Part 5: Fixing the Broken Stuff - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/08/22/part-5-fixing-the-broken-stuff.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-08-22 08:13:52</wp:comment_date>
			<wp:comment_date_gmt>2009-08-22 14:13:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Part 1 – Solution setup [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>33</wp:comment_id>
			<wp:comment_author><![CDATA[Part 6: Ninject and MVC or How to be a Web Ninja &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/08/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja/</wp:comment_author_url>
			<wp:comment_author_IP>72.167.131.46</wp:comment_author_IP>
			<wp:comment_date>2009-08-28 23:30:47</wp:comment_date>
			<wp:comment_date_gmt>2009-08-29 05:30:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] you’re new here, you can check out Part 1, Part 2, Part 3, Part 4, and Part 5 to catch up. Grab the latest source from the end of Part [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>34</wp:comment_id>
			<wp:comment_author><![CDATA[Part 6: Ninject and MVC or How to be a Web Ninja - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/08/28/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-08-28 23:35:06</wp:comment_date>
			<wp:comment_date_gmt>2009-08-29 05:35:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] you’re new here, you can check out Part 1, Part 2, Part 3, Part 4, and Part 5 to catch up. Grab the latest source from the end of Part [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-09-01 15:39:13</wp:comment_date>
			<wp:comment_date_gmt>2009-09-01 21:39:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jason,

I know I'm getting ahead of you here, but when you create the Controllers as a separate project, rather than leaving them in the Controllers folder underneath the .Web project, what's the magic incantation to get the MVC framework to look for your controllers in the Controllers project space?  I'm sure there is one, because the MVC documentation says it looks for them in the Controllers folder BY DEFAULT, but I can't find anywhere that it says how to change the defaults (plus I know you wouldn't have put them in a separate project if there WASN'T a way to reach them!)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-09-01 16:27:14</wp:comment_date>
			<wp:comment_date_gmt>2009-09-01 22:27:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jason,

Disregard the above question. Stupid mistake - I hadn't included the Controllers project in the References  for the Web project.  When you do that, it happens automatically.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-09-02 04:46:32</wp:comment_date>
			<wp:comment_date_gmt>2009-09-02 10:46:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Dave - In part 6, we use Ninject's AutoControllerModule to register all of our controllers with the Ninject Kernel. You specify the assembly in the constructor. 
Then, to get ASP.NET MVC to ask Ninject for the controllers, you have two options. First, you can use ControllerBuilder.Current.SetControllerFactory to point it at a Ninject controller factory. The second option, which I prefer, is to change your app (in Global.asax) to inherit from Ninject.Framework.Mvc.NinjectHttpApplication instead System.Web.HttpApplication.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>I was tweeted by the mother ship in my sleep</title>
		<link>http://jasondentler.com/blog/2009/08/i-was-tweeted-by-the-mother-ship-in-my-sleep/</link>
		<pubDate>Sun, 09 Aug 2009 12:29:14 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2009/08/i-was-tweeted-by-the-mother-ship-in-my-sleep/</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/image5.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/image_thumb5.png" width="244" height="177" /></a> </p>  <p>Actually, I was awake, but offline. When I posted last night, I had exactly zero RSS subscribers and one twitter follower – a family member. I woke up this morning to find I had blog comments, RSS subscribers, and twitter followers. People – not just people, programmers - actually read that mess I posted. The pressure is on now.</p>  <p>So, thank you ScottGu for the great press! The second post in the series will be coming shortly.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date>2009-08-09 06:29:14</wp:post_date>
		<wp:post_date_gmt>2009-08-09 12:29:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>i-was-tweeted-by-the-mother-ship-in-my-sleep</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>38</wp:comment_id>
			<wp:comment_author><![CDATA[Bashar Kokash]]></wp:comment_author>
			<wp:comment_author_email>bashar_ge@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://tr.im/bkokash</wp:comment_author_url>
			<wp:comment_author_IP>66.198.41.2</wp:comment_author_IP>
			<wp:comment_date>2009-08-10 00:34:58</wp:comment_date>
			<wp:comment_date_gmt>2009-08-10 06:34:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, thanks to Scott Guthrie, but also thanks to you for your MVC step by step series.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39</wp:comment_id>
			<wp:comment_author><![CDATA[mikekidder]]></wp:comment_author>
			<wp:comment_author_email>mikekidder@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>65.102.79.228</wp:comment_author_IP>
			<wp:comment_date>2009-08-11 12:57:51</wp:comment_date>
			<wp:comment_date_gmt>2009-08-11 18:57:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice...  be careful what you wish for... :)    Found your site in a TweetDeck search for "asp.net mvc"  and saw a couple RT tweets.  Looking forward to your posts.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>How-To: Using the N* Stack, part 2</title>
		<link>http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/</link>
		<pubDate>Mon, 10 Aug 2009 03:18:40 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=161</guid>
		<description></description>
		<content:encoded><![CDATA[Last Saturday, I posted the <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">first part in a series</a> about building an <a href="http://www.asp.net/mvc/" target="_blank">ASP.NET MVC</a> application from the ground up using <a href="http://sourceforge.net/projects/nhibernate/" target="_blank">NHibernate</a> and <a href="http://ninject.org/" target="_blank">Ninject</a>. It dealt with setting up the structure of your solution and referencing some 3rd party assemblies.

In part 2, we’re going to set up the persistence object model. The persistence object model is a set of objects that we use to persist (save) data to the database.

<strong>Warning:</strong> This is a sample application. There are widely varying opinions on the correct structure for these types of applications. As with most advanced subjects in the ALT.NET space, <a href="http://ayende.com/Blog/Default.aspx" target="_blank">Ayende</a> has <a href="http://ayende.com/Blog/archive/2009/08/02/your-domain-model-isnrsquot-in-the-entity-relationship-diagram.aspx" target="_blank">some great information</a> on the difference between a persistence object model and a domain model. For the purposes of this series, they’re the same thing.

First, we build the structure of our persistence model as plain old CLR objects (POCO). I like to do this in the Visual Studio class designer. It helps keep me focused on the high-level entities and relationships instead of wandering off to do detailed implementation code.

Here’s the model we’ll start with:

<a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/image6.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/image_thumb6.png" border="0" alt="image" width="528" height="610" /></a>

Let’s look at the relationships between courses and sections. We have a one to many relationship from a Course to it’s Sections represented by an ICollection(Of Section) property in Course. We also have a many-to-one relationship from each section back to it’s Course represented by the Course property on Section.
<pre class="brush:vbnet">Public Class Course

    Public Property Sections() As ICollection(Of Section)
        Get

        End Get
        Set(ByVal value As ICollection(Of Section))

        End Set
    End Property

End Class

Public Class Section

    Public Property Course() As Course
        Get

        End Get
        Set(ByVal value As Course)

        End Set
    End Property

    'Other properties here...

End Class</pre>
<pre class="brush:csharp">public class Course
{

    public ICollection&lt;Section&gt; Sections {
        get { }

        set { }

    }

}

public class Section
{

    public Course Course {
        get { }

        set { }

    }

    //Other properties here...

}</pre>
Now that we have all of that built, there’s a couple of small requirements to use these classes with NHibernate.
<ol>
	<li>All properties and methods must be overridable. That’s virtual for your C# folks.</li>
	<li>Unless you’re using a dependency injection bytecode provider, you need a parameter-less constructor. If you don’t know what a bytecode provider is, don’t worry about it. We’ll get in to it later on in the series. If you don’t have any constructors, you’re fine. There’s an implied parameterless constructor. As soon as you add a constructor with parameters, you’ll need to create one without parameters, just for NHibernate.</li>
	<li><span style="text-decoration: line-through;">You need some sort of identity property for your database primary key. This can be inherited from a base class, which is exactly what we’re going to do.</span> Edit: Not true. Thanks for the correction Ayende!</li>
	<li>In the case of readonly properties, you have some options. You can tell NHibernate your naming convention for backing fields. I don’t like this. I prefer to make my properties read/write and make the setter protected. If you’re new to NHibernate, you’ve probably never seen this before.
<pre class="brush:vbnet">Public Class Course
    Inherits Entity

    Private m_Sections As ICollection(Of Section) = New HashSet(Of Section)

    Public Overridable Property Sections() As ICollection(Of Section)
        Get
            Return m_Sections
        End Get
        Protected Set(ByVal value As ICollection(Of Section))
            m_Sections = value
        End Set
    End Property

End Class</pre>
<pre class="brush:csharp">public class Course : Entity
{

    private ICollection&lt;Section&gt; m_Sections = new HashSet&lt;Section&gt;();

    public virtual ICollection&lt;Section&gt; Sections {
        get { return m_Sections; }
        protected set { m_Sections = value; }
    }

}</pre>
This is how I set up all of my collection properties. You can manipulate the contents of the collection, but you can't replace it with another instance without inheriting this class and overriding the property. If you were to make this property readonly, you'd have to configure NHibernate to write to m_Sections using reflection. It's sort of a pain, and completely unnecessary. This is easier and accomplishes the same end result.

Also, notice that we're inheriting from a class called Entity. More on that later.</li>
</ol>
Let's talk about the database for a minute. Each of these entity classes will eventually become a database table. What will you use for your primary keys? <a href="http://fabiomaulo.blogspot.com/2009/02/nh210-generators-behavior-explained.html" target="_blank">Fabio Maulo</a> has a great post on the different NHibernate primary key generators. He also has <a href="http://fabiomaulo.blogspot.com/2008/12/identity-never-ending-story.html" target="_blank">this post</a> about why identity columns probably are not the best choice.

So what’s a good choice? Well, that’s a matter of opinion. Thanks to NHibernate, I don’t go spelunking through the database much anymore, so I like guids. You really can use what you like, or rather, what your DBA likes.

Now, where are you going to put these primary keys in your objects? In my opinion, this is really a persistence detail – meaning your objects shouldn’t really be dealing with it. That’s why we’re going to keep it hidden away in the base class. Remember, we’re inheriting from Entity.
<pre class="brush:vbnet">Public MustInherit Class Entity

    Private m_ID As Guid

    Public Overridable Property ID() As Guid
        Get
            Return m_ID
        End Get
        Protected Set(ByVal value As Guid)
            m_ID = value
        End Set
    End Property

End Class</pre>
<pre class="brush:csharp">public abstract class Entity
{

    private Guid m_ID;

    public virtual Guid ID {
        get { return m_ID; }
        protected set { m_ID = value; }
    }

}</pre>
That’s it for today’s post. In part 3, we’ll configure NHibernate and set up our database. For homework, we’re going to flesh out the other properties in our persistence model. Check out the source code in <a href="/downloads/NStackExample.Part2.VBNET.zip" target="_blank">Visual Basic.NET</a> or <a href="/downloads/NStackExample.Part2.CSHARP.zip" target="_blank">C#.</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date>2009-08-09 21:18:40</wp:post_date>
		<wp:post_date_gmt>2009-08-10 03:18:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-using-the-n-stack-part-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net-mvc"><![CDATA[ASP.NET MVC]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[ASP.NET MVC]]></category>
		<category domain="post_tag" nicename="model"><![CDATA[Model]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="post_tag" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="post_tag" nicename="ninject"><![CDATA[Ninject]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>40</wp:comment_id>
			<wp:comment_author><![CDATA[Niclas Pehrsson]]></wp:comment_author>
			<wp:comment_author_email>pehrsson@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>87.241.106.115</wp:comment_author_IP>
			<wp:comment_date>2009-08-11 17:26:35</wp:comment_date>
			<wp:comment_date_gmt>2009-08-11 23:26:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It's a free choice but please skip m_ prefixes.
Good post unless that :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41</wp:comment_id>
			<wp:comment_author><![CDATA[Noam Gal]]></wp:comment_author>
			<wp:comment_author_email>ATGardner+jason@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.google.com/profiles/atgardner</wp:comment_author_url>
			<wp:comment_author_IP>138.134.102.16</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 00:08:19</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 06:08:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I always used to expose my collection as an unmodifiable collection to the outside, and added Add and Remove methods to the class, so I can make sure both sides of a bi-directional collection are set together at runtime.
If you expose the "real" collection, a user can get a course having two sections in its collection, while a 3rd sections still points to the course, for example.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42</wp:comment_id>
			<wp:comment_author><![CDATA[Reflective Perspective - Chris Alcock &raquo; The Morning Brew #410]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.cwa.me.uk/2009/08/12/the-morning-brew-410/</wp:comment_author_url>
			<wp:comment_author_IP>212.227.118.27</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 01:30:43</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 07:30:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] MVC Project. This first part looks at setting up the solution with the correct references, and How-To: Using the N* Stack, part 2 starts looking at a sample application model and how you can make it NHibernate [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>43</wp:comment_id>
			<wp:comment_author><![CDATA[Nhibernate Talk 8/12/09 - Travis.Net.Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://weblogs.asp.net/thigley/archive/2009/08/12/nhibernate-talk-8-12-09.aspx</wp:comment_author_url>
			<wp:comment_author_IP>66.129.67.215</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 15:19:04</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 21:19:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Talk 8/12/09    Using the N* Stack, part 2, second series in Jason&#39;s NHibernate stack series, great read.Testing with NHibernate and SQLite, [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>44</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 15:50:00</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 21:50:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've been thinking about how this could be handled in a less intrusive manner, but I'm coming up with a lot of dead ends. I think I'll simply defer to someone a lot smarter than me. Off to twitter I go.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>45</wp:comment_id>
			<wp:comment_author><![CDATA[DotNetShoutout]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dotnetshoutout.com/How-To-Using-the-N-Stack-part-2-Jason-Dentler</wp:comment_author_url>
			<wp:comment_author_IP>206.72.113.4</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 09:46:58</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 15:46:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>How-To: Using the N* Stack, part 2 - Jason Dentler...</strong>

Thank you for submitting this cool story - Trackback from DotNetShoutout...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>46</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 10:50:50</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 16:50:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Can you provide details or a link to a tutorial on using Class Diagrams in VS?  I have not yet succeeded in reproducing anything approaching your class diagram, and have not been successful in finding any reasonable tutorial.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>47</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 13:50:01</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 19:50:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This may help get you started... It's fairly intuitive, despite being a GUI developer tool.

http://msdn.microsoft.com/en-us/library/aa288743(VS.71).aspx

I believe the class diagram tool is only included in the higher-end versions of visual studio.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>46</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>48</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 15:58:33</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 21:58:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, Jason.

Eagerly awaiting the next installment!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>49</wp:comment_id>
			<wp:comment_author><![CDATA[How-To: Using the N* Stack, part 3 &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/</wp:comment_author_url>
			<wp:comment_author_IP>72.167.131.46</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 17:43:42</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 23:43:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] third installment in my series. In part 1, we downloaded our libraries and set up our solution. In part 2, we built our model. In this part, we’ll configure NHibernate and set up our database mappings. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>50</wp:comment_id>
			<wp:comment_author><![CDATA[How-To: Using the N* Stack, part 3 - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/08/13/how-to-using-the-n-stack-part-3.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 17:52:25</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 23:52:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] third installment in my series. In part 1, we downloaded our libraries and set up our solution. In part 2, we built our model. In this part, we’ll configure NHibernate and set up our database mappings. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>51</wp:comment_id>
			<wp:comment_author><![CDATA[How-To: Using the N* Stack, part 4 &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/</wp:comment_author_url>
			<wp:comment_author_IP>72.167.131.46</wp:comment_author_IP>
			<wp:comment_date>2009-08-16 03:02:49</wp:comment_date>
			<wp:comment_date_gmt>2009-08-16 09:02:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Part 2 – Building the model [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>52</wp:comment_id>
			<wp:comment_author><![CDATA[ASP.NET MVC Archived Buzz, Page 1]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://aspdotnetmvc.com/buzz/default.aspx</wp:comment_author_url>
			<wp:comment_author_IP>64.55.113.203</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 01:00:07</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 07:00:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] to Vote[Del.icio.us] How-To: Using the N* Stack, part 2 - NHibernate blog - NHibernate Forge (8/16/2009)Sunday, August 16, 2009 from [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>53</wp:comment_id>
			<wp:comment_author><![CDATA[Nick Clarke]]></wp:comment_author>
			<wp:comment_author_email>nick.g.clarke@googlemail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>86.169.41.48</wp:comment_author_IP>
			<wp:comment_date>2009-08-18 11:57:03</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 17:57:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Have you been able to get the dependency injection working? as I'm having trouble with casting issues.

"Unable to cast object of type 'INHibernateProxyProxy9fe900867c074225b4a86e884ded38d9' to type 'App.Models.Company'"

I'm using Castle IoC and when I debug the NH code it seems to error when trying to cast from a proxy object to my object.

I did read somewhere that you can't cast when the objects are created in different generator, but this should not be my problem as I pass the container into the EnhancedBytecode (uNhAddIns).

Thanks in advance]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>54</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-18 12:11:09</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 18:11:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes. DI is working fine for me, although I've only used it a handful of places in the last two weeks. 

I don't use Castle Windsor or the Castle EBC provider, but I do use Castle DynamicProxy with my NinjectBytecodeProvider. Still, it's almost certainly not a problem with Windsor or the EBC.

When you get the exception, drop in to the debugger and map out the inheritance of that proxy object. I'm guessing you'll find your answer there.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>53</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>55</wp:comment_id>
			<wp:comment_author><![CDATA[Part 5: Fixing the Broken Stuff &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/08/part-5-fixing-the-broken-stuff/</wp:comment_author_url>
			<wp:comment_author_IP>72.167.131.46</wp:comment_author_IP>
			<wp:comment_date>2009-08-22 07:45:49</wp:comment_date>
			<wp:comment_date_gmt>2009-08-22 13:45:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Part 2 – Model design [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>56</wp:comment_id>
			<wp:comment_author><![CDATA[Part 5: Fixing the Broken Stuff - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/08/23/part-5-fixing-the-broken-stuff.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-08-23 16:20:35</wp:comment_date>
			<wp:comment_date_gmt>2009-08-23 22:20:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Part 2 – Model design [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>57</wp:comment_id>
			<wp:comment_author><![CDATA[Part 7: NHibernate and Ninject for ASP.NET MVC - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/08/29/part-7-nhibernate-and-ninject-for-asp-net-mvc.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-08-29 14:48:22</wp:comment_date>
			<wp:comment_date_gmt>2009-08-29 20:48:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] course, for the sake of history, read up on part 1, part 2, part 3, part 4, part 5, and part [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Windows 7 x64 upgrade</title>
		<link>http://jasondentler.com/blog/2009/08/windows-7-x64-upgrade/</link>
		<pubDate>Wed, 12 Aug 2009 15:24:20 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[Today, I'm upgrading my PC to Windows 7 64-bit. So far, the process has been quick and painless - which is pretty much the best possible outcome for system upgrades (and medical tests).

Evidently I forgot to copy my music collection up to the file server before blowing away my partition. I guess I'll be re-ripping this afternoon. Now I remember why I always spend the extra $2 to buy a physical CD from Amazon instead of just the bits.

Anywho. I'll be looking in to cloud backup solutions before I attempt anything like this at home. If anyone has suggestions, I'm open to ideas.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2009-08-12 09:24:20</wp:post_date>
		<wp:post_date_gmt>2009-08-12 15:24:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows-7-x64-upgrade</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="windows-7"><![CDATA[Windows 7]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>58</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew]]></wp:comment_author>
			<wp:comment_author_email>ajmaonline@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.105</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 12:57:21</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 18:57:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Live Mesh! www.mesh.com

(depends on how much music you have although you can just sync across machines instead of syncing to the cloud if you have too much)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>59</wp:comment_id>
			<wp:comment_author><![CDATA[Jeff]]></wp:comment_author>
			<wp:comment_author_email>jeavis@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.98bottles.net</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-18 08:33:30</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 14:33:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I suggest checking out LaLa.com for syncing your music to the cloud.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>How-To: Using the N* Stack, part 3</title>
		<link>http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/</link>
		<pubDate>Thu, 13 Aug 2009 23:32:54 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/</guid>
		<description></description>
		<content:encoded><![CDATA[This is the third installment in my series. In <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">part 1</a>, we downloaded our libraries and set up our solution. In <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/" target="_blank">part 2</a>, we built our model. In this part, we’ll configure <a href="http://sourceforge.net/projects/nhibernate/" target="_blank">NHibernate</a> and set up our database mappings. We’ll also set up our database schema.
<h3>Java – A language of XML files loosely coupled by code.</h3>
Before we can talk about Fluent NHibernate, you need to know a little bit about setting up mappings in plain old NHibernate. In a typical NHibernate setup, you’ll have a bunch of mapping files like this:
<pre class="brush:xml">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;hibernate-mapping xmlns="urn:nhibernate-mapping-2.2"&gt;
    &lt;class name="NStackExample.Address, NStackExample.Core" table="Address"&gt;
        &lt;composite-id&gt;
            &lt;key-many-to-one name="Person" class="NStackExample.Person, NStackExample.Core" column="ID" /&gt;
            &lt;key-property name="Type" type="Int32" /&gt;
        &lt;/composite-id&gt;
        &lt;property name="City" type="String" length="255" /&gt;
        &lt;property name="Lines" type="String" length="255" /&gt;
        &lt;property name="State" type="String" length="2" /&gt;
        &lt;property name="Zip" type="String" length="10" /&gt;
    &lt;/class&gt;
&lt;/hibernate-mapping&gt;</pre>
You’ll have one of those for each of your entities. It’s left over from Java’s Hibernate project, and in my opinion, It’s a royal pain, complete with ruby scepter. Lucky for you, there’s a better way™.
<h3>A Better Way™: Fluent Mappings</h3>
With Fluent NHibernate, the mapping file above can be expressed using this class instead:
<pre class="brush:vbnet">Imports FluentNHibernate.Mapping

Public Class AddressMapping
    Inherits ClassMap(Of Address)

    Public Sub New()
        UseCompositeId _
            .WithKeyReference(Function(x As Address) x.Person) _
            .WithKeyProperty(Function(x As Address) x.Type)
        Map(Function(x As Address) x.Lines).WithLengthOf(255)
        Map(Function(x As Address) x.City).WithLengthOf(255)
        Map(Function(x As Address) x.State).WithLengthOf(2)
        Map(Function(x As Address) x.Zip).WithLengthOf(5)

    End Sub

End Class</pre>
<pre class="brush:csharp">using FluentNHibernate.Mapping;

namespace NStackExample.Data
{

    public class AddressMapping : ClassMap&lt;Address&gt;
    {

        public AddressMapping()
        {
            UseCompositeId()
                .WithKeyReference(x =&gt; x.Person)
                .WithKeyProperty(x =&gt; x.Type);
            Map(x =&gt; x.Lines).WithLengthOf(255);
            Map(x =&gt; x.City).WithLengthOf(255);
            Map(x =&gt; x.State).WithLengthOf(2);
            Map(x =&gt; x.Zip).WithLengthOf(5);
        }

    }
}</pre>
It may look even more complicated than the XML mapping, but with Intellisense, it’s a breeze. Plus, there are no magic strings to worry about. When you change a property name using a refactor tool, your mapping won’t be left out of sync.

Now that you have the basic idea, let’s get back on track.
<h3>Where?</h3>
Since the database connection, NHibernate configuration, entity mappings, and DAO implementations are really just implementation details of our chosen ORM, they should go in a separate assembly.
<ol>
	<li>Make a new Class Library project called NStackExample.Data</li>
	<li>In the new Data project, add references to your core project, NHibernate.dll and FluentNHibernate.dll</li>
	<li>Add a reference to System.Configuration.dll so we can easily retrieve some application settings later.</li>
	<li>Also, the web project needs a reference to the data project.</li>
</ol>
Now, let’s make our mappings.
<pre class="brush:vbnet">Imports FluentNHibernate.Mapping

Public Class CourseMapping
    Inherits ClassMap(Of Course)

    Public Sub New()
        Id(Function(x As Course) x.ID).GeneratedBy.GuidComb()
        Map(Function(x As Course) x.Subject).Not.Nullable.WithLengthOf(4).UniqueKey("CourseNaturalKey")
        Map(Function(x As Course) x.CourseNumber).Not.Nullable.WithLengthOf(4).UniqueKey("CourseNaturalKey")
        Map(Function(x As Course) x.Title).Not.Nullable.WithLengthOf(255)
        Map(Function(x As Course) x.Description).Not.Nullable.WithLengthOf(1024)
        Map(Function(x As Course) x.Hours).Not.Nullable()

        HasMany(Function(x As Course) x.Sections) _
            .AsSet() _
            .WithForeignKeyConstraintName("CourseSections")

    End Sub

End Class</pre>
<pre class="brush:csharp">using NStackExample;
using FluentNHibernate.Mapping;

namespace NStackExample.Data
{
    public class CourseMapping : ClassMap&lt;Course&gt;
    {
        public CourseMapping()
        {
            Id(x =&gt; x.ID).GeneratedBy.GuidComb();
            Map(x =&gt; x.CourseNumber)
                .Not.Nullable()
                .WithLengthOf(4)
                .UniqueKey("CourseNaturalKey");

            Map(x =&gt; x.Subject)
                .Not.Nullable()
                .WithLengthOf(4)
                .UniqueKey("CourseNaturalKey");

            Map(x =&gt; x.Title)
                .Not.Nullable()
                .WithLengthOf(255);

            Map(x =&gt; x.Description)
                .Not.Nullable()
                .WithLengthOf(1024);

            Map(x =&gt; x.Hours)
                .Not.Nullable();

            HasMany(x =&gt; x.Sections)
                .AsSet()
                .WithForeignKeyConstraintName("CourseSections");

        }

    }
}</pre>
Most of this is self-explanatory and works exactly like you would expect.

Our mapping class inherits from ClassMap(Of Course). ClassMap is the specific type that Fluent NHibernate searches for when looking for mappings. In this case, it signifies that this class provides the mapping for our Course entity. In the constructor, we define our specific mapping for each property.
<ul>
	<li>Id sets up the persistent object identifier (POID). This is basically the primary key for the table. If you have more than one property in the primary key, as in the case of natural keys, go with UseCompositeId like in the address example above. Using multi-part keys isn’t really suggested and to my knowledge, isn’t fully supported by Fluent NHibernate.</li>
	<li>GeneratedBy specifies the POID generator. How will you assign your keys? In my case, I use GuidComb. I get all of the benefits of guid identifiers, but I don’t fragment my database index nearly as much. You can read up on it more in <a href="http://nhforge.org/blogs/nhibernate/archive/2009/05/21/using-the-guid-comb-identifier-strategy.aspx" target="_blank">Davy Brion‘s post on the NHForge blog</a>.</li>
	<li>Map simply maps a property to a database column. You can specify Not.Nullable and WithLengthOf as necessary.</li>
	<li>UniqueKey specifies a unique index on the column. If you specify the same name on several columns, all of those columns will be part of the same unique index. In this example, we are forcing our natural key to be unique. Each combination of subject and course number must be unique. There can only be one ENGL 1301 course. Thank goodness.</li>
	<li>HasMany defines a one-to-many relationship. You can specify the exact behavior of the collection. You have several options here, but the two types I use almost exclusively are Set and Bag.
<ul>
	<li>AsSet doesn’t allow duplicate items.</li>
	<li>With AsBag, duplicates are allowed.</li>
</ul>
</li>
</ul>
By default, all relationships are lazy-loaded. This means that when you fetch a course from the database, the associated sections aren’t fetched right away. It works just like you would expect: They aren’t fetched until you access the Sections property. If you never access the Sections property, those sections are never fetched from the database, which can greatly improve performance. This is all made possible with proxies, but that’s another series of posts.

Now let’s map the sections:
<pre class="brush:vbnet">Imports FluentNHibernate.Mapping

Public Class SectionMapping
    Inherits ClassMap(Of Section)

    Public Sub New()
        Id(Function(x As Section) x.ID).GeneratedBy.GuidComb()

        Map(Function(x As Section) x.FacultyName).WithLengthOf(255)
        Map(Function(x As Section) x.RoomNumber).WithLengthOf(10)
        Map(Function(x As Section) x.SectionNumber) _
            .WithLengthOf(4) _
            .Not.Nullable() _
            .UniqueKey("SectionNaturalKey")

        References(Function(x As Section) x.Course) _
            .Not.Nullable() _
            .UniqueKey("SectionNaturalKey")

        References(Function(x As Section) x.Term) _
            .Not.Nullable() _
            .UniqueKey("SectionNaturalKey")

        HasMany(Function(x As Section) x.StudentSections) _
            .AsSet() _
            .WithForeignKeyConstraintName("SectionStudentSections")

    End Sub
End Class</pre>
The References function maps the Many-to-one relationship. Think of it as the other side of our one-to-many relationship. It is the reference from the child – section - back to it’s parent - course.

For homework, finish mapping all of the entities.

I bet you’re thinking this post is getting long considering we haven’t even started building the database. Well don’t worry. NHibernate will do that for us.
<h3>8 hours or 8 minutes?</h3>
Before I discovered NHibernate, I would spend at least a day setting up my database. It was insane. It drove me insane. I bet it drives you insane. It ends today.

<strong>Disclaimer</strong>: If you are trying to use an existing shared legacy database, the chances of your existing DB schema working without some tweaking are slim. <a href="http://nhforge.org/blogs/nhibernate/archive/2009/06/26/database-the-eliot-ness-of-it.aspx" target="_blank">This post by Fabio Maulo</a> explains your options.

First, let’s configure NHibernate. The Fluent NHibernate Wiki has <a href="http://wiki.fluentnhibernate.org/show/DatabaseConfiguration" target="_blank">a great page</a> explaining the fluent configuration of NHibernate.
<pre class="brush:vbnet">Imports NHibernate
Imports NHibernate.Tool.hbm2ddl
Imports FluentNHibernate.Cfg
Imports System.Configuration
Imports System.IO

Public Class Configuration

    Private m_SchemaPath As String
    Private m_Factory As ISessionFactory

    Public Function Configure() As Configuration
        m_SchemaPath = ConfigurationManager.AppSettings("NStackExample.Data.Configuration.SchemaPath")
        m_Factory = Fluently.Configure _
            .Database(Db.MsSqlConfiguration.MsSql2005 _
                      .ConnectionString(Function(x As Db.MsSqlConnectionStringBuilder) _
                                            x.FromConnectionStringWithKey("NStackExample.Data.Configuration.DB"))) _
            .Mappings(Function(x As MappingConfiguration) _
                          x.FluentMappings.AddFromAssemblyOf(Of CourseMapping)() _
                          .ExportTo(m_SchemaPath)) _
            .ExposeConfiguration(AddressOf BuildSchema) _
            .BuildSessionFactory()
        Return Me
    End Function

    Private Sub BuildSchema(ByVal Cfg As NHibernate.Cfg.Configuration)
        Dim SchemaExporter As New NHibernate.Tool.hbm2ddl.SchemaExport(Cfg)
        SchemaExporter.SetOutputFile(Path.Combine(m_SchemaPath, "schema.sql"))
        SchemaExporter.Create(False, True)
    End Sub

    Public Function OpenSession() As ISession
        If m_Factory Is Nothing Then Configure()
        Return m_Factory.OpenSession
    End Function

End Class</pre>
<pre class="brush:csharp">using FluentNHibernate.Cfg;
using FluentNHibernate.Cfg.Db;
using NHibernate;
using NHibernate.Cfg;
using NHibernate.Tool.hbm2ddl;
using System.IO;
using System.Configuration;

namespace NStackExample.Data
{
    public class Configuration
    {

        private ISessionFactory m_Factory;
        private string m_SchemaPath;

        public Configuration Configure()
        {

            m_SchemaPath = ConfigurationManager.AppSettings["NStackExample.Data.Configuration.SchemaPath"];

            m_Factory = Fluently.Configure()
                .Database(MsSqlConfiguration.MsSql2005
                        .ConnectionString(
                         x =&gt; x.FromConnectionStringWithKey("NStackExample.Data.Configuration.Db")))
                .Mappings(x =&gt; x.FluentMappings.AddFromAssemblyOf&lt;CourseMapping&gt;()
                                .ExportTo(m_SchemaPath))
                .ExposeConfiguration(BuildSchema)
                .BuildSessionFactory();

            return this;
        }

        private void BuildSchema(NHibernate.Cfg.Configuration cfg)
        {
            SchemaExport SchemaExporter = new SchemaExport(cfg);
            SchemaExporter.SetOutputFile(Path.Combine(m_SchemaPath, "schema.sql"));
            SchemaExporter.Create(true, false);
        }

        public ISession OpenSession()
        {
            if (m_Factory == null) Configure();
            return m_Factory.OpenSession();
        }

    }
}</pre>
The configuration falls in to two sections: Database and Mappings. In our case, the database is SQL 2005 and the connection string is read from a connection string element in the web.config. All of the mappings are fluent, not auto-mapped. Notice that we are exporting our mappings to a directory specified in the appsettings section of the web.config. This will convert our fluent mappings to individual hbm.xml files. This is great for debugging the mappings, especially when asking for NHibernate help online.

We have one additional item. We’re using the ExposeConfiguration method to call our BuildSchema function, passing in our complete NHibernate configuration.

In BuildSchema, we use a great hidden tool in NHibernate: the schema export. This amazing class will build your database for you. The create function takes two boolean parameters. The first specifies if the schema should be written out to a ddl file – a database script to build all of the tables, keys, indexes, and relationships in your database. The second boolean parameter specifies if the script should be executed against the specified database.

It’s that easy.

<strong>Two warnings:</strong>
<ol>
	<li>Executing this script will drop and recreate every table associated with your model. That can be devastating in a production environment.</li>
	<li>The script doesn’t start with a a “use [databasename]” statement, so if you’re not careful, when you execute it, you’ll build everything in the master database.</li>
</ol>
One last note: As with any project, you will have to adapt as you build. These mappings are not exactly what we use in the final build. I can guarantee our model will change significantly. I will take you through those changes as they happen, and explain the reasons behind them.

I’ve decided not to post the complete source code at this stage. Instead, I leave the remaining mappings as an exercise for you, the reader. They will be included in the next source release.

In the next post, I’ll show you how to test your mappings – including querying, reading from and writing to the database.

Jason

- Mapped out. Good night.

P.S. – Special thanks to Tuna, Fabio, and Oren for the feedback, answers to stupid questions, and great advice!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date>2009-08-13 17:32:54</wp:post_date>
		<wp:post_date_gmt>2009-08-13 23:32:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-using-the-n-stack-part-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fluent-nhibernate"><![CDATA[Fluent NHibernate]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>60</wp:comment_id>
			<wp:comment_author><![CDATA[marek]]></wp:comment_author>
			<wp:comment_author_email>marek@dedico.pl</wp:comment_author_email>
			<wp:comment_author_url>http://www.dedico.pl</wp:comment_author_url>
			<wp:comment_author_IP>212.244.112.51</wp:comment_author_IP>
			<wp:comment_date>2009-08-14 01:07:37</wp:comment_date>
			<wp:comment_date_gmt>2009-08-14 07:07:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Jason,

thanks for this series of posts. Great choice of tools and technology. Looking forward for next articles.

Thanks!
Marek]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>61</wp:comment_id>
			<wp:comment_author><![CDATA[Reflective Perspective - Chris Alcock &raquo; The Morning Brew #412]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.cwa.me.uk/2009/08/14/the-morning-brew-412/</wp:comment_author_url>
			<wp:comment_author_IP>212.227.118.27</wp:comment_author_IP>
			<wp:comment_date>2009-08-14 01:32:29</wp:comment_date>
			<wp:comment_date_gmt>2009-08-14 07:32:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] How-To: Using the N* Stack, part 3 - Jason Dentler continues his series looking at the N* alternative .NET technology stack. In this part he looks at the configuration of NHibernate, and the mapping of the classes from class to database. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>62</wp:comment_id>
			<wp:comment_author><![CDATA[Scott Hanselman]]></wp:comment_author>
			<wp:comment_author_email>scott@hanselman.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.hanselman.com</wp:comment_author_url>
			<wp:comment_author_IP>98.108.138.122</wp:comment_author_IP>
			<wp:comment_date>2009-08-14 03:32:45</wp:comment_date>
			<wp:comment_date_gmt>2009-08-14 09:32:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great series! Keep it up!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>63</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-08-14 04:45:07</wp:comment_date>
			<wp:comment_date_gmt>2009-08-14 10:45:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow. Thanks for the compliment! Coming from the guy on the covers of my favorite Wrox books, that's a real honor. The Windows 7 Boot to VHD thing is pure awesome. It's worth the upgrade price for that feature alone.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>62</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>64</wp:comment_id>
			<wp:comment_author><![CDATA[Yassir]]></wp:comment_author>
			<wp:comment_author_email>yassir@windowslive.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.140.79.107</wp:comment_author_IP>
			<wp:comment_date>2009-08-14 15:01:43</wp:comment_date>
			<wp:comment_date_gmt>2009-08-14 21:01:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is it ok to make mapping classes sealed ?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>65</wp:comment_id>
			<wp:comment_author><![CDATA[NHibernate Talk 8/14/09 - Travis.Net.Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://weblogs.asp.net/thigley/archive/2009/08/14/nhibernate-talk-8-14-09.aspx</wp:comment_author_url>
			<wp:comment_author_IP>66.129.67.214</wp:comment_author_IP>
			<wp:comment_date>2009-08-14 15:04:36</wp:comment_date>
			<wp:comment_date_gmt>2009-08-14 21:04:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] of Work &amp; multiple reuqests Set Status / Close Ayende discusses UOW spanning mulitiple requests.How-To: Using the N* Stack, part 3 Jason continues is great series on NHibernate.  Published Friday, August 14, 2009 3:02 PM by [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>66</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-08-14 17:48:34</wp:comment_date>
			<wp:comment_date_gmt>2009-08-14 23:48:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I did a quick test. It seems to work, but I can't think of a good reason why it would be necessary to do that.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>64</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>67</wp:comment_id>
			<wp:comment_author><![CDATA[Page not found &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/</wp:comment_author_url>
			<wp:comment_author_IP>72.167.131.46</wp:comment_author_IP>
			<wp:comment_date>2009-08-16 03:05:08</wp:comment_date>
			<wp:comment_date_gmt>2009-08-16 09:05:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] How-To: Using the N* Stack, part 3  [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>68</wp:comment_id>
			<wp:comment_author><![CDATA[Yassir]]></wp:comment_author>
			<wp:comment_author_email>yassir@windowslive.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.140.26.220</wp:comment_author_IP>
			<wp:comment_date>2009-08-16 08:08:56</wp:comment_date>
			<wp:comment_date_gmt>2009-08-16 14:08:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Type your comment here<blockquote cite="#comment-body-53">
<strong><a href="#comment-53" rel="nofollow">Jason</a> :</strong>
                  
         
         
         I did a quick test. It seems to work, but I can’t think of a good reason why it would be necessary to do that.
         <a></a>
       </blockquote>

because you have a virtual member call in .ctor for now it is ok but if someone Inherites from one of the mapping class you might run to problems :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>69</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-08-16 09:42:10</wp:comment_date>
			<wp:comment_date_gmt>2009-08-16 15:42:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Remember, you are only loading up the mappings declared in the Data assembly, so it would have to be an inside job. It can't be done from outside the assembly without some major System.Reflection hacking. 

No framework will protect you from yourself or your coworkers.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>68</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>70</wp:comment_id>
			<wp:comment_author><![CDATA[José F. Romaniello]]></wp:comment_author>
			<wp:comment_author_email>jfromaniello@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://jfromaniello.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>190.30.198.178</wp:comment_author_IP>
			<wp:comment_date>2009-08-16 19:29:35</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 01:29:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I will strongly recommend three things:
1-If you are developing a app from scratch (I mean no legazy-db) avoid composite primary keys.

2- Your xml-mapping is too much verbose:
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;hibernate-mapping xmlns=&quot;urn:nhibernate-mapping-2.2&quot;
    assembly=&quot;NStackExample&quot;
    namespace=&quot;NStackExample&quot;&gt;
    &lt;class name=&quot;Address&quot;&gt;
        &lt;composite-id&gt;
            &lt;key-many-to-one name=&quot;Person&quot; class=&quot;Person&quot; column=&quot;ID&quot; /&gt;
            &lt;key-property name=&quot;Type&quot; type=&quot;Int32&quot; /&gt;
        &lt;/composite-id&gt;
        &lt;property name=&quot;City&quot; length=&quot;255&quot; /&gt;
        &lt;property name=&quot;Lines&quot; length=&quot;255&quot; /&gt;
        &lt;property name=&quot;State&quot; length=&quot;2&quot; /&gt;
        &lt;property name=&quot;Zip&quot; length=&quot;10&quot; /&gt;
    &lt;/class&gt;
&lt;/hibernate-mapping&gt;

3-Address in this case seems to be a Component.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>71</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-08-16 20:05:02</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 02:05:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That was just an example I pulled from another project - a brownfield project. The mapping was generated by fluent nhibernate and designed to fit an existing DB schema. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>70</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>72</wp:comment_id>
			<wp:comment_author><![CDATA[ASP.NET MVC Archived Buzz, Page 1]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://aspdotnetmvc.com/buzz/default.aspx</wp:comment_author_url>
			<wp:comment_author_IP>64.55.113.203</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 01:00:07</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 07:00:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] to Vote[Del.icio.us] How-To: Using the N* Stack, part 3 - NHibernate blog - NHibernate Forge (8/16/2009)Sunday, August 16, 2009 from [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>73</wp:comment_id>
			<wp:comment_author><![CDATA[José F. Romaniello]]></wp:comment_author>
			<wp:comment_author_email>jfromaniello@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://jfromaniello.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>190.18.242.205</wp:comment_author_IP>
			<wp:comment_date>2009-08-18 06:42:09</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 12:42:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ok, But the problem is that when you say "a better way.." you are contrasting  "fluent nhibernate generated mappings" with "fluent nhibernate". Let me say that fluent nhibernate mappings aren't human readable.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>74</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-18 08:05:57</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 14:05:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes. I did compare an FNH generated xml mapping to FNH code. You've stripped out some property types and assembly-qualified type names, and it is cleaner. If I had one handy, I probably would have used a hand-written mapping from a greenfield project. Looking back, it does come across as a dishonest comparison.

I do agree that hand-written XML mappings are usually more readable than those generated by FNH, but as I understand it, that's not the goal of the FNH project.

I really just have two points: 
#1 - Even in their simplest form, XML mappings are still more difficult to read, and more importantly, more difficult to maintain than an FNH mapping written in C#. Of course, to a degree, readability and even maintainability are subjective.

I don't agree with the "enterprise Java" point of view that XML is the perfect solution for everything. I think you pay a VERY heavy "magic strings" tax with XML in general, and especially when a lot of XML has to stay in sync with a lot of code, as in the case of mappings. In one of the most critical locations in the applications, that's just unacceptable - again, just my opinion. 

XML has it's place. It's great for standard communications protocols and configuration settings that are likely to change as the hardware and network change. In the case of mappings, it's being used more as a replacement for code. It feels wrong to me.

#2 - XML mappings will slow the adoption of NHibernate. FNH is a success partly because it abuses the hell out of Intellisense to flatten out the NH learning curve.

I'm not bashing NHibernate. It's an amazing ORM, and the XML mappings are part of its history. They also make a great integration point for codegen tools. I think as NHibernate is adopted outside of the ALT.NET community, you'll see a lot less hand-written mappings and a lot more codegen, DB reverse-engineer, and FNH mappings. 

In case it wasn't obvious already, I'm pretty new to NHibernate. I'm still making rookie mistakes. The learning curve for NHibernate for a newbie in a "hurry up and get it done" drag-n-drop programming shop is pretty steep. Add in these weird little XML mappings that refuse to stay in sync with the model and the newbie might just choose EF and its GUI designers over NHibernate.

Now that FNH is officially v1 RC, NH could serve itself well to push FNH to beginners as an easy one-size-fits-most mapping solution while still supporting the XML mappings for advanced fine-tuning. But that's for Fabio to decide, not me.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>73</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>75</wp:comment_id>
			<wp:comment_author><![CDATA[José F. Romaniello]]></wp:comment_author>
			<wp:comment_author_email>jfromaniello@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://jfromaniello.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>190.30.198.178</wp:comment_author_IP>
			<wp:comment_date>2009-08-18 14:13:24</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 20:13:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree with you.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>76</wp:comment_id>
			<wp:comment_author><![CDATA[Norbert Beckers]]></wp:comment_author>
			<wp:comment_author_email>norbert.beckers@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://norbertbeckers.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>131.155.151.118</wp:comment_author_IP>
			<wp:comment_date>2009-08-19 01:36:36</wp:comment_date>
			<wp:comment_date_gmt>2009-08-19 07:36:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This series isn't up to date.  I'm using 1.0RC, the latest release version of FluentNHibernate. The "WithLengthOf(Int32)" method is replaced by "Length(Int32)"]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>77</wp:comment_id>
			<wp:comment_author><![CDATA[Norbert Beckers]]></wp:comment_author>
			<wp:comment_author_email>norbert.beckers@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://norbertbeckers.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>131.155.151.118</wp:comment_author_IP>
			<wp:comment_date>2009-08-19 01:49:47</wp:comment_date>
			<wp:comment_date_gmt>2009-08-19 07:49:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Update: "WithForeignKeyConstraintName(String)" now is "ForeignKeyConstraintName(String)"]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>78</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-19 09:06:06</wp:comment_date>
			<wp:comment_date_gmt>2009-08-19 15:06:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Norbert - v1 RC was released less than 48 hours ago. I'll include those updates in my next post. Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>79</wp:comment_id>
			<wp:comment_author><![CDATA[Rob Bihun]]></wp:comment_author>
			<wp:comment_author_email>rob@robbihun.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.robbihun.com</wp:comment_author_url>
			<wp:comment_author_IP>66.182.135.189</wp:comment_author_IP>
			<wp:comment_date>2009-08-19 09:12:54</wp:comment_date>
			<wp:comment_date_gmt>2009-08-19 15:12:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In your configuration.cs (line # 26 in this post) you have:

.Mappings(x =&gt; x.FluentMappings.AddFromAssemblyOf()
.ExportTo(m_SchemaPath))

Is this better than:

.Mappings(x =&gt;
x.FluentMappings.AddFromAssembly(Assembly.GetAssembly(this.GetType())).ExportTo(m_SchemaPath))

Forgive me if this is an ignorant question, I am just now starting to play with NHibernate. To me your post (before looking closely) looks like you are doing something specifically with the CourseMapping class and not all the classes that inherit ClassMap... which in this case are all contained in NStackExample.Data along with the configuration class.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>80</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-19 12:47:41</wp:comment_date>
			<wp:comment_date_gmt>2009-08-19 18:47:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Rob - Functionally, they are identical. Either will work.

Personally, I prefer the shorter AddFromAssemblyOf method. The method name indicates that you are dealing with the assembly containing the type, not the type specifically.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>79</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>81</wp:comment_id>
			<wp:comment_author><![CDATA[Norbert Beckers]]></wp:comment_author>
			<wp:comment_author_email>norbert.beckers@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://norbertbeckers.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>131.155.151.118</wp:comment_author_IP>
			<wp:comment_date>2009-08-20 00:59:14</wp:comment_date>
			<wp:comment_date_gmt>2009-08-20 06:59:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[No Thanks. Changes go fast I reckon...;-}~]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>78</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>82</wp:comment_id>
			<wp:comment_author><![CDATA[Part 5: Fixing the Broken Stuff &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/08/part-5-fixing-the-broken-stuff/</wp:comment_author_url>
			<wp:comment_author_IP>72.167.131.46</wp:comment_author_IP>
			<wp:comment_date>2009-08-22 07:47:01</wp:comment_date>
			<wp:comment_date_gmt>2009-08-22 13:47:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Part 3 – Persistence mapping [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>83</wp:comment_id>
			<wp:comment_author><![CDATA[Part 5: Fixing the Broken Stuff - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/08/22/part-5-fixing-the-broken-stuff.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-08-22 08:14:07</wp:comment_date>
			<wp:comment_date_gmt>2009-08-22 14:14:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Part 3 – Persistence mapping [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>How-To: Using the N* Stack, part 4</title>
		<link>http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/</link>
		<pubDate>Sat, 15 Aug 2009 18:00:15 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=209</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is part 4 of my series on <a href="http://www.asp.net/mvc/" target="_blank">ASP.NET MVC</a> and NHibernate. If you’re not up to date, you can go check out:</p>  <ul>   <li><a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">Part 1</a> – Setting up the Visual Studio solution </li>    <li><a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/" target="_blank">Part 2</a> – Building the model </li>    <li><a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/" target="_blank">Part 3</a> – Mapping the model to the database </li> </ul>  <p>As promised, today, we’re going to test our mappings and get a little familiar with using <a href="http://nhforge.org" target="_blank">NHibernate</a>.</p>  <p>We’ll be using NUnit 2.5.2, but any recent version should work.</p>  <p><strong>Disclaimer</strong>: I’m still learning some of this myself, so use at your own risk. This may not be considered best practice. Also, there’s almost certainly better ways to write these tests using one of the dozens of popular testing frameworks out there, but we’re using plain vanilla NUnit.</p>  <p>Let’s create a new Class Library project for our tests. We’ll call it NStackExample.Data.Tests. Now, in the data test project, add references to your core project, data project, NHibernate.dll, FluentNHibernate.dll, and NUnit.Framework.dll. If you’ve installed NUnit, NUnit.Framework.dll will be on the .NET tab. If you have multiple versions of NUnit installed, be sure to pick the right version.</p>  <h3>SQL: Now in a convenient travel size</h3>  <p>If you haven’t heard of SQLite before, you’re going to love this. It’s a tiny, self-contained, open-source SQL database engine in a DLL. Even better, it can run entirely in-memory and it’s blazing fast. Here’s how you get set up to use it:</p>  <ol>   <li>Download the SQLite ADO.NET Provider from here. Get the full version – the one named something like SQLLit-1.0.65.0-setup.exe. Install it, then grab a copy of System.Data.Sqlite.dll and put it in your Solution Items folder with all the other 3rd party libraries. If you’re running on a 64-bit operating system, grab the one from the binx64 directory. If not, use the one in bin. </li>    <li>Download the SQLite library itself. Scroll down to Precompiled Binaries for Windows. It should be named something like sqlitedll-3_6_17.zip. Extract the SQLite3.dll to your Solution Items folder. </li>    <li>In your data test project, add a reference to System.Data.SQLite.dll. </li>    <li>Because SQLite3.dll was written in C and is completely unmanaged, we can’t add a direct reference to it. To ensure it gets put in the right place, we’re going to set it up as a content file. Right click on your data test project, choose Add Existing Item, then browse for SQLite3.dll. Add it. In Solution Explorer, it’ll be mixed in with the code for your project. Right click on it and choose properties. Set it to Copy Always. This will copy it to the binDebug or binRelease folder every time your project is built, so it never gets forgotten. </li>    <li>If you haven’t already, grab the code for the SQLiteDatabaseScope class from <a href="http://jasondentler.com/blog/2009/08/nhibernate-unit-testing-with-sqlite-in-memory-db/" target="_blank">my previous post</a>. Add it to your data test project. </li> </ol>  <h3>A simple mapping test</h3>  <pre class="brush:vbnet">Imports NUnit.Framework

&lt;TestFixture()&gt; _
Public Class CourseMappingTests

    &lt;Test()&gt; _
    Public Sub CanLoadAndSaveCourse()
        Using Scope As New SQLiteDatabaseScope(Of CourseMapping)
            Using Session = Scope.OpenSession
                Dim ID As Guid
                Dim Course As Course

                Using Tran = Session.BeginTransaction
                    ID = Session.Save(New Course With { _
                        .Subject = &quot;SUBJ&quot;, _
                        .CourseNumber = &quot;1234&quot;, _
                        .Title = &quot;Title&quot;, _
                        .Description = &quot;Description&quot;, _
                        .Hours = 3})
                    Tran.Commit()
                End Using
                Session.Clear()

                Using Tran = Session.BeginTransaction
                    Course = Session.Get(Of Course)(ID)

                    Assert.AreEqual(&quot;SUBJ&quot;, Course.Subject)
                    Assert.AreEqual(&quot;1234&quot;, Course.CourseNumber)
                    Assert.AreEqual(&quot;Title&quot;, Course.Title)
                    Assert.AreEqual(&quot;Description&quot;, Course.Description)
                    Assert.AreEqual(3, Course.Hours)

                    Tran.Commit()

                End Using

            End Using
        End Using
    End Sub

End Class</pre>

<pre class="brush:csharp">using System;
using NUnit.Framework;
using NHibernate;

namespace NStackExample.Data.Tests
{
    [TestFixture]
    public class CourseMappingTests
    {

        [Test]
        public void CanSaveAndLoadCourse()
        {
            using (SQLiteDatabaseScope&lt;CourseMapping&gt; Scope = new SQLiteDatabaseScope&lt;CourseMapping&gt;())
            {
                using (ISession Session = Scope.OpenSession())
                {
                    Guid ID;
                    Course Course;

                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        ID = (Guid)Session.Save(new Course
                        {
                            Subject = &quot;SUBJ&quot;,
                            CourseNumber = &quot;1234&quot;,
                            Title = &quot;Title&quot;,
                            Description = &quot;Description&quot;,
                            Hours = 3
                        });
                        Tran.Commit();
                    }
                    Session.Clear();

                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        Course = Session.Get&lt;Course&gt;(ID);

                        Assert.AreEqual(&quot;SUBJ&quot;, Course.Subject);
                        Assert.AreEqual(&quot;1234&quot;, Course.CourseNumber);
                        Assert.AreEqual(&quot;Title&quot;, Course.Title);
                        Assert.AreEqual(&quot;Description&quot;, Course.Description);
                        Assert.AreEqual(3, Course.Hours);

                        Tran.Commit();
                    }
                }
            }
        }
    }
}</pre>

<p>Here’s how it works:</p>

<ul>
  <li>First, we get a fresh in-memory SQLite database with our schema built. </li>

  <li>Put a new course in the database </li>

  <li>Clear the session </li>

  <li>Get the course back out of the database </li>

  <li>Check to make sure each of our properties survived the trip. If they didn’t, fail the test. </li>
</ul>

<p>There’s a few things that may be new to you.</p>

<ul>
  <li>Our class has the TestFixture attribute. This tells NUnit that this class contains tests. </li>

  <li>Each subroutine has the Test attribute. This tells NUnit that this method is a test. </li>

  <li>The SQLiteDatabaseScope is almost certainly new, considering I wrote it Friday. You can read my previous post for more information. </li>
</ul>

<h3>Use of implicit transaction is discouraged</h3>

<p>You’re probably wondering why I would wrap such simple one-statement database logic in a transaction, especially a Session.Get, which is essentially a single select statement. Prior to writing this series, I wouldn’t have done it that way. Rookie mistake.</p>

<p>While doing research for this entry, I ran across <a href="http://ayende.com/Blog/archive/2009/04/28/nhibernate-unit-testing.aspx" target="_blank">an example test</a> from Ayende. He was using transactions on everything,&#160; even his calls to Session.Get. I asked him why and he sent me a link to this <a href="http://nhprof.com/Learn/Alert?name=DoNotUseImplicitTransactionsHibernate" target="_blank">NHProfiler Alert</a>. It’s important and not obvious – at least not to me - so with permission, I’ve quoted the entire page.</p>

<blockquote>
  <p>A common mistake when using a database is to use transactions only when orchestrating several write statements. In reality, every operation that the database is doing is done inside a transaction, including queries and writes (update, insert, delete).</p>

  <p>When we don't define our own transactions, it falls back into implicit transaction mode, where every statement to the database runs in its own transaction, resulting in a large performance cost (database time to build and tear down transactions), and reduced consistency.</p>

  <p>Even if we are only reading data, we should use a transaction, because using transactions ensures that we get consistent results from the database. Hibernate assumes that all access to the database is done under a transaction, and strongly discourages any use of the session without a transaction.</p>

  <pre class="brush:csharp">Session session = sessionFactory.openSession();
try {
  Transaction tx = session.beginTransaction();
  try {
    //execute code that uses the session
  } finally {
    tx.commit();
  }
} finally {
  session.close();
}</pre>

  <p>Leaving aside the safety issue of working with transactions, the assumption that transactions are costly and that we need to optimize them is false. As previously mentioned, databases are always running in a transaction. Also, they have been heavily optimized to work with transactions.</p>

  <p>The real question here is: Is the transaction per-statement or per-batch? There is a non-trivial amount of work that needs to be done to create and dispose of a transaction; having to do it per-statement is more costly than doing it per-batch.</p>

  <p>It is possible to control the number and type of locks that a transaction takes by changing the transaction isolation level (and, indeed, a common optimization is to reduce the isolation level).</p>

  <p>Hibernate treats the call to commit() as the time to flush all changed items from the unit of work to the database, and without an explicit call to Commit(), it has no way of knowing when it should do that. A call to Flush() is possible, but it is frowned upon because this is usually a sign of improper transaction usage.</p>

  <p>I strongly suggest that you use code similar to that shown above (or use another approach to transactions, such as TransactionScope, or Castle's Automatic Transaction Management) in order to handle transactions correctly.</p>

  <h5>Transaction and the second level cache</h5>

  <p>Another implication of not using explicit transactions with Hibernate is related to the use of the second level cache.</p>

  <p>Hibernate goes to great length in order to ensure that the 2nd level cache maintains a consistent view of the database. This is accomplished by deferring all 2nd level cache updates to the transaction commit. In this way, we can assert that the data in the 2nd level cache is the one committed to the database.</p>

  <p>Forgoing the use of explicit transactions has the effect of nulling the 2nd level cache. Here is an example that would make this clear:</p>

  <pre class="brush:csharp">try {
  Post post = session.get(Post.class, 1);
  // do something with post
} finally {
  session.close();
}</pre>

  <p>Even if the 2nd level cache is enabled for Post, it is still not going to be cached in the 2nd level cache. The reason is that until we commit a transaction, Hibernate will not update the cache with the values for the loaded entities.</p>

  <p>This code, however, does make use of the 2nd level cache:</p>

  <pre class="brush:csharp">Session session = sessionFactory.openSession();
try {
  Transaction tx = sessionFactory.beginTransaction();
  try {
    Post post = session.get(Post.class, 1);
    // do something with post
  } finally {
    tx.commit();
  }
} finally {
  session.close();
}</pre>
</blockquote>

<p>&#160;</p>

<h3>A slightly more complicated mapping test</h3>

<p>When an entity has a required parent, as in the case of our section, you must create and insert the parent before actually testing the child. We’re not testing the cascade here. That’s a separate test. In this case, section has two required parents: a course, and a term. Here’s the test:</p>

<pre class="brush:vbnet">    &lt;Test()&gt; _
    Public Sub CanLoadAndSaveCourse()
        Using Scope As New SQLiteDatabaseScope(Of CourseMapping)
            Using Session = Scope.OpenSession

                Dim ID As Guid
                Dim Section As Section
                Dim Course As New Course With { _
                        .Subject = &quot;SUBJ&quot;, _
                        .CourseNumber = &quot;1234&quot;, _
                        .Title = &quot;Title&quot;, _
                        .Description = &quot;Description&quot;, _
                        .Hours = 3}

                Dim Term As New Term With { _
                        .Name = &quot;Fall 2009&quot;, _
                        .StartDate = New Date(2009, 9, 1), _
                        .EndDate = New Date(2009, 12, 1)}

                'We're not testing the cascade, so save the parents first...
                Using Tran = Session.BeginTransaction
                    Session.Save(Course)
                    Session.Save(Term)
                    Tran.Commit()
                End Using
                Session.Clear()

                Using Tran = Session.BeginTransaction
                    ID = Session.Save(New Section With { _
                                      .Course = Course, _
                                      .FacultyName = &quot;FacultyName&quot;, _
                                      .RoomNumber = &quot;R1&quot;, _
                                      .SectionNumber = &quot;1W&quot;, _
                                      .Term = Term})
                    Tran.Commit()
                End Using

                Session.Clear()

                Using Tran = Session.BeginTransaction
                    Section = Session.Get(Of Section)(ID)

                    Assert.AreEqual(Course, Section.Course)
                    Assert.AreEqual(&quot;FacultyName&quot;, Section.FacultyName)
                    Assert.AreEqual(&quot;R1&quot;, Section.RoomNumber)
                    Assert.AreEqual(&quot;1W&quot;, Section.SectionNumber)
                    Assert.AreEqual(Term, Section.Term)

                    Tran.Commit()

                End Using

            End Using
        End Using
    End Sub</pre>

<pre class="brush:csharp">        [Test]
        public void CanSaveAndLoadSection()
        {
            using (SQLiteDatabaseScope&lt;CourseMapping&gt; Scope = new SQLiteDatabaseScope&lt;CourseMapping&gt;) {
                using (ISession Session = Scope.OpenSession()) {

                    Guid ID;
                    Section Section;
                    Course Course = new Course { 
                        Subject = &quot;SUBJ&quot;, 
                        CourseNumber = &quot;1234&quot;, 
                        Title = &quot;Title&quot;, 
                        Description = &quot;Description&quot;, 
                        Hours = 3};
                    Term Term = new Term {
                        Name = &quot;Fall 2009&quot;,
                        StartDate = new DateTime(2009,8,1),
                        EndDate = new DateTime(2009,12,1)};
                    
                    // We're not testing the cascade here, so explicitly save these parent objects.
                    using (ITransaction Tran = Session.BeginTransaction()) {
                        Session.Save(Course);
                        Session.Save(Term);
                        Tran.Commit();
                    }

                    Session.Clear();

                    using (ITransaction Tran = Session.BeginTransaction()) {
                        ID = (Guid) Session.Save(new Section {
                                 Course = Course,
                                 FacultyName = &quot;FacultyName&quot;, 
                                 RoomNumber = &quot;R1&quot;, 
                                 SectionNumber = &quot;W1&quot;,
                                 Term = Term});
                        Tran.Commit();
                    }

                    Session.Clear();

                    using (ITransaction Tran = Session.BeginTransaction()) {
                        Section = Session.Get&lt;Section&gt;(ID);

                        Assert.AreEqual(Course, Section.Course);
                        Assert.AreEqual(&quot;FacultyName&quot;, Section.FacultyName);
                        Assert.AreEqual(&quot;R1&quot;,Section.RoomNumber);
                        Assert.AreEqual(&quot;W1&quot;, Section.SectionNumber);
                        Assert.AreEqual(Term, Section.Term);

                        Tran.Commit();
                    }

                }
            }

        }</pre>

<h3>Testing the cascade</h3>

<p>“Cascade what? “</p>

<p>In your application, when you’ve just registered a student for a whole bunch of classes, usually with several changes along the way, you don’t want to have to remember what entities were added, removed or changed. That’s just crazy. Thanks to the Cascade functionality in NHibernate, you don’t have to do that. Just save the student entity. If your mappings are correct, it just works™.</p>

<p>For some people, especially me, that’s a big if. That’s why we test our mappings.</p>

<pre class="brush:vbnet">    &lt;Test()&gt; _
    Public Sub CanCascadeSaveFromCourseToSections()
        Using Scope As New SQLiteDatabaseScope(Of CourseMapping)
            Using Session = Scope.OpenSession
                Dim ID As Guid

                Dim Term As New Term With { _
                        .Name = &quot;Fall 2009&quot;, _
                        .StartDate = New Date(2009, 9, 1), _
                        .EndDate = New Date(2009, 12, 1)}

                'We're not testing the cascade of section -&gt; term here
                Using Tran = Session.BeginTransaction
                    Session.Save(Term)
                    Tran.Commit()
                End Using
                Session.Clear()

                Dim Course As New Course With { _
                        .Subject = &quot;SUBJ&quot;, _
                        .CourseNumber = &quot;1234&quot;, _
                        .Title = &quot;Title&quot;, _
                        .Description = &quot;Description&quot;, _
                        .Hours = 3}

                Dim Section1 As New Section With { _
                        .FacultyName = &quot;FacultyName&quot;, _
                        .RoomNumber = &quot;R1&quot;, _
                        .SectionNumber = &quot;1&quot;, _
                        .Term = Term}

                Dim Section2 As New Section With { _
                        .FacultyName = &quot;FacultyName&quot;, _
                        .RoomNumber = &quot;R1&quot;, _
                        .SectionNumber = &quot;2&quot;, _
                        .Term = Term}

                Course.AddSection(Section1)
                Course.AddSection(Section2)

                'Test saving
                Using Tran = Session.BeginTransaction
                    ID = Session.Save(Course)
                    Tran.Commit()
                End Using
                Session.Clear()

                'Check the results
                Using Tran = Session.BeginTransaction
                    Course = Session.Get(Of Course)(ID)

                    Assert.AreEqual(2, Course.Sections.Count)
                    Assert.AreEqual(1, Course.Sections _
                                    .Where(Function(S As Section) _
                                               S.Equals(Section1)) _
                                    .Count(), &quot;Course.Sections does not contain section 1.&quot;)

                    Assert.AreEqual(1, Course.Sections _
                                    .Where(Function(S As Section) _
                                               S.Equals(Section2)) _
                                    .Count(), &quot;Course.Sections does not contain section 2.&quot;)


                    Tran.Commit()
                End Using
            End Using
        End Using
    End Sub</pre>

<pre class="brush:csharp">        [Test()]
        public void CanCascadeSaveFromCourseToSections()
        {
            using (SQLiteDatabaseScope<coursemapping> Scope = new SQLiteDatabaseScope<coursemapping>())
            {
                using (ISession Session = Scope.OpenSession())
                {
                    Guid ID;

                    Term Term = new Term { 
                                Name = &quot;Fall 2009&quot;, 
                                StartDate = new System.DateTime(2009, 9, 1), 
                                EndDate = new System.DateTime(2009, 12, 1) };

                    //We're not testing the cascade of section -&gt; term here
                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        Session.Save(Term);
                        Tran.Commit();
                    }
                    Session.Clear();

                    Course Course = new Course { 
                        Subject = &quot;SUBJ&quot;, 
                        CourseNumber = &quot;1234&quot;, 
                        Title = &quot;Title&quot;, 
                        Description = &quot;Description&quot;, 
                        Hours = 3 };

                    Section Section1 = new Section { 
                        FacultyName = &quot;FacultyName&quot;, 
                        RoomNumber = &quot;R1&quot;, 
                        SectionNumber = &quot;1&quot;, 
                        Term = Term };

                    Section Section2 = new Section { 
                        FacultyName = &quot;FacultyName&quot;, 
                        RoomNumber = &quot;R1&quot;, 
                        SectionNumber = &quot;2&quot;, 
                        Term = Term };

                    Course.AddSection(Section1);
                    Course.AddSection(Section2);

                    //Test saving
                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        ID = (Guid) Session.Save(Course);
                        Tran.Commit();
                    }
                    Session.Clear();

                    //Check the results
                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        Course = Session.Get<course>(ID);

                        Assert.AreEqual(2, Course.Sections.Count);
                        Assert.AreEqual(1, Course.Sections
                                .Where(S =&gt; S.Equals(Section1)).Count(), 
                                &quot;Course.Sections does not contain section 1.&quot;);

                        Assert.AreEqual(1, Course.Sections
                                .Where(S =&gt; S.Equals(Section2)).Count(), 
                                &quot;Course.Sections does not contain section 2.&quot;);


                        Tran.Commit();
                    }
                }
            }
        }</pre>

<p>The test above will make sure new and/or updated sections are saved when you save the course. Here’s how it works:</p>

<ul>
  <li>Get a fresh SQLite DB </li>

  <li>Since we’re not testing terms, but we need one for our sections, build a term and stick it in the database. </li>

  <li>Build a course and two sections. </li>

  <li>Save the course </li>

  <li>Clear the session </li>

  <li>Get the course </li>

  <li>Make sure it has our two sections </li>
</ul>

<p>What should happen when you remove a section from a course? A parent course is required for each section. Remember, we specified not nullable in the mapping. More importantly, an orphaned section isn’t allowed in the real world. So, if a section is orphaned, it should be deleted. We need to write a test for that.</p>

<pre class="brush:vbnet">    &lt;Test()&gt; _
    Public Sub CanCascadeOrphanDeleteFromCourseToSections()
        Using Scope As New SQLiteDatabaseScope(Of CourseMapping)
            Using Session = Scope.OpenSession
                Dim ID As Guid

                Dim Term As New Term With { _
                        .Name = &quot;Fall 2009&quot;, _
                        .StartDate = New Date(2009, 9, 1), _
                        .EndDate = New Date(2009, 12, 1)}

                Using Tran = Session.BeginTransaction
                    'We're not testing the cascade of section -&gt; term here
                    Session.Save(Term)
                    Tran.Commit()
                End Using
                Session.Clear()

                Dim Course As New Course With { _
                        .Subject = &quot;SUBJ&quot;, _
                        .CourseNumber = &quot;1234&quot;, _
                        .Title = &quot;Title&quot;, _
                        .Description = &quot;Description&quot;, _
                        .Hours = 3}

                Dim Section1 As New Section With { _
                        .FacultyName = &quot;FacultyName&quot;, _
                        .RoomNumber = &quot;R1&quot;, _
                        .SectionNumber = &quot;1&quot;, _
                        .Term = Term}

                Dim Section2 As New Section With { _
                        .FacultyName = &quot;FacultyName&quot;, _
                        .RoomNumber = &quot;R1&quot;, _
                        .SectionNumber = &quot;2&quot;, _
                        .Term = Term}

                Course.AddSection(Section1)
                Course.AddSection(Section2)

                Using Tran = Session.BeginTransaction
                    Session.Save(Course)
                    Tran.Commit()
                End Using
                Session.Clear()

                'Test removing
                Course.RemoveSection(Section1)
                Using Tran = Session.BeginTransaction
                    ID = Session.Save(Course)
                    Tran.Commit()
                End Using
                Session.Clear()

                'Check the results
                Using Tran = Session.BeginTransaction
                    Course = Session.Get(Of Course)(ID)

                    Assert.AreEqual(1, Course.Sections.Count())

                    Assert.AreEqual(0, Course.Sections _
                                    .Where(Function(S As Section) _
                                               S.Equals(Section1)) _
                                    .Count(), &quot;Course.Sections still contains section 1&quot;)

                    Tran.Commit()
                End Using

            End Using
        End Using
    End Sub</pre>

<pre class="brush:csharp">        [Test()]
        public void CanCascadeOrphanDeleteFromCourseToSections()
        {
            using (SQLiteDatabaseScope&lt;CourseMapping&gt; Scope = new SQLiteDatabaseScope&lt;CourseMapping&gt;())
            {
                using (ISession Session = Scope.OpenSession())
                {
                    Guid ID;

                    Term Term = new Term { 
                        Name = &quot;Fall 2009&quot;, 
                        StartDate = new System.DateTime(2009, 9, 1), 
                        EndDate = new System.DateTime(2009, 12, 1) };

                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        //We're not testing the cascade of section -&gt; term here
                        Session.Save(Term);
                        Tran.Commit();
                    }
                    Session.Clear();


                    Course Course = new Course { 
                        Subject = &quot;SUBJ&quot;, 
                        CourseNumber = &quot;1234&quot;, 
                        Title = &quot;Title&quot;, 
                        Description = &quot;Description&quot;, 
                        Hours = 3 };

                    Section Section1 = new Section { 
                        FacultyName = &quot;FacultyName&quot;, 
                        RoomNumber = &quot;R1&quot;, 
                        SectionNumber = &quot;1&quot;, 
                        Term = Term };

                    Section Section2 = new Section { 
                        FacultyName = &quot;FacultyName&quot;, 
                        RoomNumber = &quot;R1&quot;, 
                        SectionNumber = &quot;2&quot;, 
                        Term = Term };

                    Course.AddSection(Section1);
                    Course.AddSection(Section2);

                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        Session.Save(Course);
                        Tran.Commit();
                    }
                    Session.Clear();

                    //Test removing
                    Course.RemoveSection(Section1);
                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        ID = (Guid) Session.Save(Course);
                        Tran.Commit();
                    }
                    Session.Clear();

                    //Check the results
                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        Course = Session.Get&lt;Course&gt;(ID);

                        Assert.AreEqual(1, Course.Sections.Count());

                        Assert.AreEqual(0, Course.Sections
                            .Where(S =&gt; S.Equals(Section1)).Count(), 
                            &quot;Course.Sections still contains section 1&quot;);

                        Tran.Commit();

                    }
                }
            }
        }</pre>

<p>I hope you see where I’m going with this one. Except for query tests, which we’ll do when we write our DAOs, that’s it for NHibernate testing. We do the same types of tests for our other entity classes.</p>

<h3>But…</h3>

<p>So, I bet you’re thinking “This mess won’t compile and even if it did, almost all of your tests would fail!” Yep. If the tests always pass, why write them?</p>

<p>Normally, I’d at least declare those missing functions so the solution would compile, but in this case, the discussion of those issues fits better with our next topic: How do we fix the broken stuff?</p>

<p><strike>Download links for the complete solution in both languages are coming soon.</strike></p>

<p>Edit: Download VB.NET <a href="http://jasondentler.com/downloads/NStackExample.Part4.VBNET.zip" target="_blank">here</a> or C# <a href="http://jasondentler.com/downloads/NStackExample.Part4.CSharp.zip" target="_blank">here</a>. To simplify things, I’ve removed the StudentTerm entity from the model.</p>

<p>Jason 
  <br />

  <br />- Testy and in need of sleep.</p>

<p>References: <a href="http://ayende.com/Blog/archive/2009/04/28/nhibernate-unit-testing.aspx" target="_blank">Ayende’s blog post</a>, <a href="http://devlicio.us/blogs/krzysztof_kozmic/archive/2009/08/14/testing-with-nhibernate-and-sqlite.aspx" target="_blank">Krzysztof Kozmic’s recent post on Devlio.us</a>, <a href="http://www.tigraine.at/2009/05/29/fluent-nhibernate-gotchas-when-testing-with-an-in-memory-database/" target="_blank">Daniel Hoebling’s blog post</a>, <a href="http://nhprof.com/Learn/UserGuide" target="_blank">Ayende’s NHProfiler Alerts</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date>2009-08-15 12:00:15</wp:post_date>
		<wp:post_date_gmt>2009-08-15 18:00:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-using-the-n-stack-part-4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="category" nicename="nunit"><![CDATA[NUnit]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>84</wp:comment_id>
			<wp:comment_author><![CDATA[Yassir]]></wp:comment_author>
			<wp:comment_author_email>yassir@windowslive.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.140.26.220</wp:comment_author_IP>
			<wp:comment_date>2009-08-16 07:59:56</wp:comment_date>
			<wp:comment_date_gmt>2009-08-16 13:59:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Please source code hurry :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>85</wp:comment_id>
			<wp:comment_author><![CDATA[ASP.NET MVC Archived Blog Posts, Page 1]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://aspdotnetmvc.com/blogs/default.aspx</wp:comment_author_url>
			<wp:comment_author_IP>64.55.113.203</wp:comment_author_IP>
			<wp:comment_date>2009-08-16 23:45:12</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 05:45:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] to VoteHow-To: Using the N* Stack, part 4 (8/15/2009)Saturday, August 15, 2009 from JasonThis is part 4 of my series on ASP.NET MVC and NHibernate. If [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>86</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 11:43:12</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 17:43:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Make sure the namespace names are consistent between the test classes and the SQLiteDatabaseScope class. One had NStackExamplesTest (plural examples), and another had NStackExampleTests (plural tests).  Drove me crazy trying to figure out why SQLiteDatabaseScope was an unrecognized name.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>87</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 12:04:19</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 18:04:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've worked through several errors, but I'm stuck on this one:

" Could not create the driver from NHibernate.Driver.SQLite20Driver, NHibernate, Version=2.1.0.4000, Culture=neutral, PublicKeyToken=aa95f207798dfdb4. ---&gt;"

Do I have the wrong version of NHibernate?  It looks like it's asking for SQLite 2.0, and I've downloaded and included 3.0.  Is that the source of my problem?  I think I have everything as directed.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>88</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 12:08:46</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 18:08:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[For a newbie, please explain the advantage of the third party NUnit testing framework over the the Micrsoft UnitTesting framework included in VS?  Does it do something that Microsoft's doesn't?

I was able to get the able to get the tests to compile (at least the CourseMappingTests - haven't tried the rest yet) simply by 3 mechanical renamings - changing using NUnitFramework to using Microsoft.VisualStudio.TestTools.UnitTesting, change [TestFramework] to [TestClass()], and changing [Test] to [TestMethod()].

I'm suspecting there's probably something that I don't know that explains the advantage of NUnit, but I don't know enough to know what I don't know!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>89</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 12:52:42</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 18:52:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry about that. I also noticed I zipped up the wrong stuff in the VB download. I'll fix it when I get home tonight.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>86</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>90</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 13:02:49</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 19:02:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[To be perfectly honest, I use NUnit because it's what I've always used - since before MS had anything for testing. I've seen some posts that give reasons why NUnit, or basically anything else, is better than MSTest. As with a lot of things (see also Entity Framework), it's hard to separate the truth from the Microsoft-bashing. 

NUnit does everything I need it to do and nothing more. Until I see a lot of buzz around something else, I'm not shopping for a new test runner / framework. I would suggest you google for the NUnitEx project. It has great fluent extensions for testing, so your tests are a million times more readable.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>88</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>91</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 13:06:31</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 19:06:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[My first guess is that you're using the System.Data.SQLite.dll file from the download on a 32-bit operating system. That seems to cause all sorts of random errors. The one I've included is the 64-bit version. You'll need to swap them out, reload the project, and recompile.  

Please let me know if that doesn't solve your issue.

Second guess would be a slight difference between your NHibernate.dll and mine, which would cause the public key tokens to not match. This assumes that you've replaced the NHibernate.dll in the download with your own, which is probably not the case.

]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>87</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>92</wp:comment_id>
			<wp:comment_author><![CDATA[DotNetShoutout]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dotnetshoutout.com/How-To-Using-the-N-Stack-part-4-Jason-Dentler</wp:comment_author_url>
			<wp:comment_author_IP>206.72.113.4</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 16:06:55</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 22:06:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>How-To: Using the N* Stack, part 4 - Jason Dentler...</strong>

Thank you for submitting this cool story - Trackback from DotNetShoutout...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>93</wp:comment_id>
			<wp:comment_author><![CDATA[yassir]]></wp:comment_author>
			<wp:comment_author_email>yassir@windowslive.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.140.86.84</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 18:08:53</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 00:08:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@jason : Well i prefer MsTest (NUnit , xUnit , MbUnit are all great) ,but  with MsTest i don't need to get extra dlls and worry about a test runner everything is part of visual studio (i think standard , Pro , and team system has it) and if you have team system you can get code covrege]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>94</wp:comment_id>
			<wp:comment_author><![CDATA[Reflective Perspective - Chris Alcock &raquo; The Morning Brew #414]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.cwa.me.uk/2009/08/18/the-morning-brew-414/</wp:comment_author_url>
			<wp:comment_author_IP>212.227.118.27</wp:comment_author_IP>
			<wp:comment_date>2009-08-18 01:16:41</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 07:16:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] How-To: Using the N* Stack, part 4 - Jason Dentler continues his series of posts on the alternative .NET development stack, with a look into the operation of NHibernate, and writing some tests for the NH mappings backed onto SQLite. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>95</wp:comment_id>
			<wp:comment_author><![CDATA[Scott Blasingame]]></wp:comment_author>
			<wp:comment_author_email>scottblasingame321@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>12.105.86.248</wp:comment_author_IP>
			<wp:comment_date>2009-08-18 09:00:05</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 15:00:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Got the test suite running, but had to add a reference to NHibernate.ByteCode.Castle.dll in Tests project. Also System.Data.SQLite reference was not set to Copy Local. After fixing those 2 things, test for CanSaveAndLoadCourse passed.

Keep up the great postings!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>96</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-18 11:56:59</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 17:56:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I should have held on to that post a little longer, but not seeing any free time in the next few days, I felt it would be better to get something out the door than to let the series die on the vine.

The code downloads are not clean. Some of the mistakes were intentional to use as examples for part 5. Others were unintentional.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>95</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>97</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-08-21 10:01:43</wp:comment_date>
			<wp:comment_date_gmt>2009-08-21 16:01:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[My problem with the SQLite reference was the one Scott found - the reference to Sqlite in the test project had Copy Local set to False (default). Changing that to true made the test build and run.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>98</wp:comment_id>
			<wp:comment_author><![CDATA[Chuck]]></wp:comment_author>
			<wp:comment_author_email>swampyfox@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.50.92.135</wp:comment_author_IP>
			<wp:comment_date>2009-08-22 11:43:27</wp:comment_date>
			<wp:comment_date_gmt>2009-08-22 17:43:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[J - 

Check out PersistenceSpecification in Fluent NHibernate.

e.g. 
[Test]
public void CanCorrectlyMapAddressType()
{
    using (ISession session = this.sessionFactory.OpenSession())
    {
        using (ITransaction tx = session.BeginTransaction())
        {
            new PersistenceSpecification(session)
                .CheckProperty(x =&gt; x.Name, "Home Address")
                .VerifyTheMappings();

            tx.Rollback();
        }
    }
}]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>99</wp:comment_id>
			<wp:comment_author><![CDATA[Chuck]]></wp:comment_author>
			<wp:comment_author_email>swampyfox@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.50.92.135</wp:comment_author_IP>
			<wp:comment_date>2009-08-22 11:44:22</wp:comment_date>
			<wp:comment_date_gmt>2009-08-22 17:44:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Of course, Type Pad changes the angle brackets, but look up PersistenceSpecification on the FNH Wiki

C]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>100</wp:comment_id>
			<wp:comment_author><![CDATA[Part 5: Fixing the Broken Stuff &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/08/part-5-fixing-the-broken-stuff-2/</wp:comment_author_url>
			<wp:comment_author_IP>72.167.131.46</wp:comment_author_IP>
			<wp:comment_date>2009-08-23 16:17:22</wp:comment_date>
			<wp:comment_date_gmt>2009-08-23 22:17:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Part 4 – Persistence tests [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>101</wp:comment_id>
			<wp:comment_author><![CDATA[Part 5: Fixing the Broken Stuff - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/08/23/part-5-fixing-the-broken-stuff.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-08-23 16:20:50</wp:comment_date>
			<wp:comment_date_gmt>2009-08-23 22:20:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Part 4 – Persistence tests [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>102</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-08-23 16:27:57</wp:comment_date>
			<wp:comment_date_gmt>2009-08-23 22:27:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Chuck - That's really cool. This is another example of "My practices, not necessarily best practices." I'm learning a lot from this series. I hope others are as well.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>103</wp:comment_id>
			<wp:comment_author><![CDATA[Part 6: Ninject and MVC or How to be a Web Ninja - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/08/28/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-08-28 23:35:25</wp:comment_date>
			<wp:comment_date_gmt>2009-08-29 05:35:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] you’re new here, you can check out Part 1, Part 2, Part 3, Part 4, and Part 5 to catch up. Grab the latest source from the end of Part [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>104</wp:comment_id>
			<wp:comment_author><![CDATA[Part 7: NHibernate and Ninject for ASP.NET MVC - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/08/29/part-7-nhibernate-and-ninject-for-asp-net-mvc.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-08-29 14:48:37</wp:comment_date>
			<wp:comment_date_gmt>2009-08-29 20:48:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] course, for the sake of history, read up on part 1, part 2, part 3, part 4, part 5, and part [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Poor man’s NUnit + Visual Studio integration</title>
		<link>http://jasondentler.com/blog/2009/08/poor-mans-nunit-visual-studio-integration/</link>
		<pubDate>Fri, 14 Aug 2009 15:53:51 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=212</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In part 4 of the series on <a href="http://www.asp.net/mvc/" target="_blank">ASP.NET MVC</a> and <a href="http://nhforge.org" target="_blank">NHibernate</a>, we’ll be using NUnit. If you don’t already have some snazzy Visual Studio add-in with full NUnit integration, here’s a not-so-glitzy alternative. It’s not my idea and I’d love to give credit to the right person, but I’ve slept a lot since I first discovered this.</p>  <p>&#160;</p>  <ol>   <li>In Visual Studio, on the Tools, choose External Tools.</li>    <li>Click Add</li>    <li>Title it NUnit or something similar.</li>    <li>For the command, browse for the NUnit executable. In my case, it’s in C:Program Files (x86)NUnit 2.5.2binnet-2.0</li>    <li>For the arguments, enter this: $(ProjectDir)binDebug$(TargetName)$(TargetExt) /run</li>    <li>For the initial directory, enter this:$(ProjectDir)binDebug</li> </ol>  <p>It should look something like this:</p>  <p><a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/image7.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/image_thumb7.png" width="475" height="462" /></a></p>  <p>&#160;</p>  <p>Now, when you want to fire up NUnit, just choose it from the Tools menu. It’ll launch, load up the latest debug build of the current project, and start running the tests.</p>  <p>Of course, if you’re doing any kind of significant real-world project, especially with a team, you should really look in to snagging one of the awesome continuous integration (CI) setups out there. Every time you commit, it’ll build and test your app, send you the results, and with a little tweaking, even start a fresh pot of coffee. Oh. You are using some kind of source control, right? And it’s not Visual Source Safe, right?</p>  <p>Jason   <br />- On a blogging high</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date>2009-08-14 09:53:51</wp:post_date>
		<wp:post_date_gmt>2009-08-14 15:53:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>poor-mans-nunit-visual-studio-integration</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NHibernate unit testing with SQLite in-memory DB</title>
		<link>http://jasondentler.com/blog/2009/08/nhibernate-unit-testing-with-sqlite-in-memory-db/</link>
		<pubDate>Fri, 14 Aug 2009 21:49:46 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=219</guid>
		<description></description>
		<content:encoded><![CDATA[<p>While doing research for my next post, I ran across a recurring problem. Everyone wanted to use an in-memory SQLite database for their <a href="http://nhforge.org" target="_blank">NHibernate</a> unit tests.</p>  <p>Evidently, there’s no way to get back to the in-memory database in it’s current state after all of the connections to that database have been closed. When you open another connection, you get a fresh blank database.</p>  <p>Here’s the solutions I found while searching around.</p>  <ul>   <li><a href="http://ayende.com/Blog/archive/2009/04/28/nhibernate-unit-testing.aspx" target="_blank">Ayende just uses a single NHibernate session</a>, which usually only uses a single SQLite DB connection. In fact, he just uses one session per test fixture. I’m not that smart and I don’t know enough about the internals of NHibernate to be confident that I’m really testing what I think I’m testing. Using a fresh session and database for each test would make me a lot more confident. </li>    <li>Krzysztof Kozmic has resorted to <a href="http://devlicio.us/blogs/krzysztof_kozmic/archive/2009/08/14/testing-with-nhibernate-and-sqlite.aspx" target="_blank">using a SQLite database stored on disk</a>. While it may be faster than blowing away and recreating a SQL Express database dozens of times, it’s still slower than using an in-memory database. Variations of this idea include storing the database on a MS-DOS 5.0-style RAM disk drive to recover some of the speed lost by using file I/O. Genius! Except, I’m not going to reconfigure my PC for a unit test. Sorry, it’s just not portable enough. That’s why the idea was rated down on Stack Overflow. </li>    <li>Someone (gotta love the anonymous bloggers!) suggested <a href="http://notepad2.wordpress.com/2008/05/19/unit-testing-castle-active-record-using-sqlite-in-memory-database/" target="_blank">building a custom NHibernate DriverConnectionProvider</a> and overriding the GetConnection and CloseConnection functions so that once opened, the connection would never be closed. This seems a bit extreme to me, and doesn’t provide a mechanism to get a fresh database when we need one. </li> </ul>  <p>Using the DriverConnectionProvider idea of maintaining a single connection, but with a controlled scope, I came up with this:</p>  <pre class="brush:vbnet">Imports FluentNHibernate.Cfg
Imports FluentNHibernate.Cfg.Db
Imports FluentNHibernate.Mapping
Imports NHibernate
Imports NHibernate.Tool.hbm2ddl
Imports System.Data.SQLite

Public Class SQLiteDatabaseScope(Of TClassFromMappingAssembly)
    Implements IDisposable

    Private Const CONNECTION_STRING As String = &quot;Data Source=:memory:;Version=3;New=True;&quot;

    Public Sub New()
        BuildConfiguration()
    End Sub

    Private m_Connection As SQLiteConnection
    Private m_SessionFactory As ISessionFactory

    Private Sub BuildConfiguration()
        m_SessionFactory = Fluently.Configure() _
                            .Database(GetDBConfig()) _
                            .Mappings(AddressOf GetMappings) _
                            .ExposeConfiguration(AddressOf BuildSchema) _
                            .BuildSessionFactory()
    End Sub

    Private Function GetDBConfig() As FluentNHibernate.Cfg.Db.IPersistenceConfigurer
        Return SQLiteConfiguration.Standard _
                    .ConnectionString(Function(cs As ConnectionStringBuilder) cs.Is(CONNECTION_STRING))
    End Function

    Private Sub GetMappings(ByVal x As MappingConfiguration)
        x.FluentMappings _
            .AddFromAssemblyOf(Of TClassFromMappingAssembly)() _
            .ExportTo(&quot;.&quot;)
    End Sub

    Private Sub BuildSchema(ByVal Cfg As NHibernate.Cfg.Configuration)
        Dim SE As New SchemaExport(Cfg)
        SE.Execute(False, True, False, GetConnection, Console.Out)
    End Sub

    Private Function GetConnection() As System.Data.SQLite.SQLiteConnection
        If m_Connection Is Nothing Then
            m_Connection = New SQLiteConnection(CONNECTION_STRING)
            m_Connection.Open()
        End If
        Return m_Connection
    End Function

    Public Function OpenSession() As ISession
        Return m_SessionFactory.OpenSession(GetConnection)
    End Function

    Private disposedValue As Boolean = False        ' To detect redundant calls

    ' IDisposable
    Protected Overridable Sub Dispose(ByVal disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                ' TODO: free other state (managed objects).
                If m_Connection IsNot Nothing Then m_Connection.Close()
                m_Connection = Nothing
            End If

            ' TODO: free your own state (unmanaged objects).
            ' TODO: set large fields to null.
        End If
        Me.disposedValue = True
    End Sub

#Region &quot; IDisposable Support &quot;
    ' This code added by Visual Basic to correctly implement the disposable pattern.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

End Class</pre>

<p>It’s the same idea as the DriverConnectionProvider, but with a different scope. We create and open a connection and maintain it for the lifespan of the SQLiteDatabaseScope object. So far, I haven't found an instance where NHibernate closes the connection.</p>

<p>Each instance of SQLiteDatabaseScope uses a different in-memory database, thanks to the New=True property in the connection string. You should be able to run your tests in parallel. You can’t do that with any of the other solutions.</p>

<p>The generic type parameter should be set to one of your fluent mapping classes. It’s used to tell Fluent NHibernate which assembly to scan for fluent mappings.</p>

<p>It’s extremely easy to use.</p>

<pre class="brush:vbnet">Imports NUnit.Framework

&lt;TestFixture&gt; _
Public Class SomeNHibernateTestFixture

    &lt;Test&gt;
    Public Sub SomeNHibernateTest()
        Using Scope As New SQLiteDatabaseScope(Of CourseMapping)
            Using SessionOne = Scope.OpenSession
                ' Do some stuff here...
            End Using

            Using SessionTwo = Scope.OpenSession
                ' Do some more stuff using the same in-memory SQLite DB
            End Using
        End Using
    End Sub

    &lt;Test&gt;
    Public Sub AnotherNHibernateTest()
        Using Scope As New SQLiteDatabaseScope(Of CourseMapping)
            Using SessionThree = Scope.OpenSession
                ' Do some stuff here to a new, freshly-built database...
	    End Using
        End Using
    End Sub

End Class</pre>

<p>Jason 
  <br />- Concerned the problem is not really that simple.</p>

<p>&#160;</p>

<p>Download the SQLiteDatabaseScope code in <a href="http://jasondentler.com/downloads/SQLiteDatabaseScope.vb.txt" target="_blank">Visual Basic</a> or <a href="http://jasondentler.com/downloads/SQLiteDatabaseScope.cs.txt" target="_blank">C#</a>. GoDaddy doesn’t like you to download .vb or .cs files, so don’t forget to take off the .txt extension before you add it to your project. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date>2009-08-14 15:49:46</wp:post_date>
		<wp:post_date_gmt>2009-08-14 21:49:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nhibernate-unit-testing-with-sqlite-in-memory-db</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fluent-nhibernate"><![CDATA[Fluent NHibernate]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="post_tag" nicename="sqlite"><![CDATA[SQLite]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>105</wp:comment_id>
			<wp:comment_author><![CDATA[How-To: Using the N* Stack, part 4 &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/</wp:comment_author_url>
			<wp:comment_author_IP>72.167.131.46</wp:comment_author_IP>
			<wp:comment_date>2009-08-16 03:06:08</wp:comment_date>
			<wp:comment_date_gmt>2009-08-16 09:06:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] About                   &laquo; NHibernate unit testing with SQLite in-memory DB [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>106</wp:comment_id>
			<wp:comment_author><![CDATA[Tobin Harris]]></wp:comment_author>
			<wp:comment_author_email>tobin@tobinharris.com</wp:comment_author_email>
			<wp:comment_author_url>http://tobinharris.com</wp:comment_author_url>
			<wp:comment_author_IP>91.107.191.198</wp:comment_author_IP>
			<wp:comment_date>2009-08-16 10:22:05</wp:comment_date>
			<wp:comment_date_gmt>2009-08-16 16:22:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice post.

I'm pretty sure you can enable *connection pooling* so that your in-memory database doesn't go away once you close the connection. I've mentioned this on my blog post about NHibernate + SQLite testing

http://tobinharris.com/past/2009/8/1/in-memory-sqlite-testing-with-nhibernate/

I don't bother with the connection pooling,  I haven't seen the need for it yet (NHibernate is closing connections during the run of single test in my solutions).  Like you, I am keen on having a fresh DB for each test too, I've even played with using a file-based sqlite db and doing a file-system copy of the blank db for each test - but it didn't perform (as you'll see on the blog post).

Like the idea of being able to run tests in parallel, that's very neat. 

I don't quite see how the Scope adds additional value though? Maybe it's a kind of test-specific Unit of Work? I guess you want to control when connections are closed (so as not to lose your db!), but I've not seen any problems using the "create session/do work/commit work/dispose session" approach during SQLite in-memory testing. 

Anyway, I'm always interested in new ideas for this,]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>107</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-08-16 12:58:40</wp:comment_date>
			<wp:comment_date_gmt>2009-08-16 18:58:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Tobin - I played around with the connection pooling options myself, but with that approach, I couldn't find a way to destroy the current database and build a fresh one. I even tried to use a system-generated password to trick connection pooling in to making a fresh DB. No dice.

The primary purpose of the SQLiteDatabaseScope is to maintain a DB connection for the lifetime of the object, no matter what you do with your session(s). 

Now that I have a better understanding of Session.Clear, I'm not convinced it's necessary, but it's still nice to know exactly when I have a fresh DB and when I don't.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>106</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>108</wp:comment_id>
			<wp:comment_author><![CDATA[How-To: Using the N* Stack, part 4 - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/08/16/how-to-using-the-n-stack-part-4.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-08-16 17:44:47</wp:comment_date>
			<wp:comment_date_gmt>2009-08-16 23:44:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] you haven’t already, grab the code for the SQLiteDatabaseScope class from my previous post. Add it to your data test [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>109</wp:comment_id>
			<wp:comment_author><![CDATA[Bill Bartmann]]></wp:comment_author>
			<wp:comment_author_email>claricekxj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://Yourwebsite</wp:comment_author_url>
			<wp:comment_author_IP>174.36.252.44</wp:comment_author_IP>
			<wp:comment_date>2009-09-01 21:38:30</wp:comment_date>
			<wp:comment_date_gmt>2009-09-02 03:38:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excellent site, keep up the good work]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Polka is the new rock…</title>
		<link>http://jasondentler.com/blog/2009/08/polka-is-the-new-rock/</link>
		<pubDate>Mon, 17 Aug 2009 19:31:01 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2009/08/polka-is-the-new-rock/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Or so says Windows Media Player. This made me laugh.</p>  <p><a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/image8.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/image_thumb8.png" width="243" height="132" /></a> </p>  <p>Polkastra’s new album, Apolkalypse Now, with special guest William Barton on Didgeridoo.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date>2009-08-17 13:31:01</wp:post_date>
		<wp:post_date_gmt>2009-08-17 19:31:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>polka-is-the-new-rock</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="music"><![CDATA[Music]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>LivingRoom.NET</title>
		<link>http://jasondentler.com/blog/2009/08/livingroom-net/</link>
		<pubDate>Tue, 18 Aug 2009 00:10:36 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=275</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Today, a coworker asked me about my living room setup. I figured it would be a nice change from the <a href="http://www.asp.net/mvc/" target="_blank">ASP.NET MVC</a> / <a href="http://nhforge.org" target="_blank">NHibernate</a> series. It’s a little unorganized and rushed. I apologize.</p>  <p>I hate remotes. There is absolutely no reason to have more than one remote control. I also hate looking at wires and equipment with blinking lights in my living room.</p>  <p>Here’s what I did to fix the problem.</p>  <h3>Layout</h3>  <p>Just on the other side of the wall from my LCD TV is a large walk-in closet.</p>  <p>In the living room, in addition to my Sharp Aquos LCD TV, I also have Energy brand 5.1 surround speakers and a <a href="http://www.logitechsqueezebox.com/" target="_blank">Logitech Squeezebox</a> (now referred to as Squeezebox Classic) network music device.&#160; In the closet, I have my laptop, external SATA hard drive, Onkyo TX-SR706 receiver, and AT&amp;T U-Verse set top box.</p>  <h3>Electrical</h3>  <p>If you don’t know what you’re doing, you could burn down your house, die or worse. Hire a professional. Also, if you live inside city limits, there’s probably some law or ordinance about having the work done or inspected by a licensed electrician.</p>  <p>Problem #1 – The walk in closet didn’t have any electrical outlets. Luckily, there’s one in the living room on the same wall. I ran a few feet of spare 12 gauge home electrical wire from the outlet in the living room to a new outlet in the closet. Be sure you know which side of the wall stud the outlet is on. You can’t easily run wire through a wall stud without destroying your drywall.</p>  <p>So, I added an outlet in the closet. Problem solved.</p>  <p>Problem #2 - Your standard home electronics power cord is not rated for in-wall use, or at least that’s what I read on the internet. I didn’t want a power cord hanging from my TV running down to an outlet. I needed to add an electrical outlet behind my LCD TV, which was mounted on the wall. I also wanted some sort of surge protection.</p>  <p>I went shopping online for something that would solve this problem and ran across <a href="http://www.monoprice.com/products/product.asp?c_id=105&amp;cp_id=10425&amp;cs_id=1042505&amp;p_id=4006&amp;seq=1&amp;format=1#largeimage" target="_blank">this recessed low voltage wall plate with recessed power</a> at Monoprice.com.</p>  <p><img style="display: inline; margin-left: 0px; margin-right: 0px" alt="Large Product Image for Recessed Low Voltage Cable Wall Plate WITH Recessed Power - White" align="right" src="http://images.monoprice.com/productlargeimages/40061.jpg" width="240" height="181" /></p>  <p>It’s actually a kit designed specifically for this problem. There are two wall plates included in the package. The one shown in the picture goes behind the LCD. It has a single electrical outlet plus a channel for low-voltage cables, such as speaker and HDMI cables. The other wall plate goes in the closet and is identical except the channel feeds down and the outlet is male. You provide two single electrical junction boxes – one for each of the electrical outlets. Between the two, use standard in-wall rated 12 gauge electrical wire.</p>  <p>This is not directly wired in to the home’s electrical. The two wall boxes are wired to each other only. You connect the male outlet to a surge protector, which is plugged in to a standard electrical outlet. Then, just plug your LCD in to the female side. You have powered your LCD, protected it from surges and lightning strikes, hidden the power cable behind the TV, and made a path through the wall for your low-voltage cables.</p>  <h3>Pulling cable<a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0309.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="DSCF0309" border="0" alt="DSCF0309" align="right" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0309_thumb.jpg" width="184" height="244" /></a></h3>  <p>I had help with this part. My little brother ran the speaker wires through the attic and down the walls while I pulled from below and connected everything.</p>  <p>We ran 14 gauge speaker wire to the surround speakers and the subwoofer. Since the subwoofer is powered, it uses an RCA cable. I soldered a male RCA connector to each end of the subwoofer speaker cable. For the speakers, I used standard banana plug speaker wall plates.</p>  <p>We also pulled some coax cable in to the closet and connected it in the attic to the rest of the cable TV lines with a splitter. .</p>  <p>The left, right, and center speaker cables run through the low-voltage side of the wall plate behind the TV.</p>  <h3>Wall-mounting</h3>  <p>I found some cheap plastic speaker mounts on sale at Best Buy. You get what you pay for. The package said they were rated for up to 25 pounds. I seriously doubt these things could support that kind of weight, but they worked for my surround and left/right speakers. The center speaker is a little heavier, so it just sits on a shelf below the TV.</p>  <p>For the TV, I bought a generic LCD TV wall mount at Fry’s electronics. It doesn’t tilt or pivot or any of that mess. It just holds the TV on to the wall, which is just fine with me.</p>  <h3>Hardware</h3>  <p>The laptop and the U-Verse set top box are connected to the receiver with HDMI cables. The Squeezebox is audio only and is connected with a single digital RCA cable. The receiver is also connected to the TV with an HDMI cable.</p>  <p>Both the TV and the receiver have RS232 9-pin serial management ports you can use to control the devices. The receiver also allows you to query its state – is it turned on, what’s the volume set at, what input is active, etc.</p>  <p><strong>Just a note</strong>: You will need a null modem cable when connecting to a Sharp Aquos TV and a standard straight through serial cable when connecting to Onkyo brand equipment. Also, there is at least one person in the hardware department at the Webster, TX Fry’s Electronics who still knows what a null modem cable is. That is not the case with any of the area Best Buy or Radio Shack stores. <a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF03061.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="DSCF0306" border="0" alt="DSCF0306" align="right" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0306_thumb.jpg" width="244" height="184" /></a></p>  <p>Since like most modern PCs, my laptop didn’t have any serial ports, I bought some USB serial ports from Amazon. Be sure to read the fine print and the comments. Most of these don’t come with drivers for Vista at all. I only found one that would work with Vista x64, and the install was a little hackish.</p>  <p>The only way to control the U-Verse box is with an infrared remote. It doesn’t have a serial port, the USB port is disabled, and even though it’s running WinCE, I couldn’t find a way in through the network.</p>  <p>I bought a <a href="http://www.usbuirt.com/" target="_blank">USB UIRT</a> and some stick-on infrared blasters off the internet to control it. There are all sorts of internet posts explaining where the IR receiver is located inside the U-Verse box. This is what worked for me.</p>  <p>That’s almost all of the hardware. I also have an RF keyboard, RF optical mouse, and an iPod touch that I use as my one and only remote control.</p>  <h3>Software</h3>  <p>All of the software is written in Visual Basic.NET with ASP.NET MVC and iUI, a javascript library for making web applications look and behave like native iPhone apps.</p>  <p>All of the device control is done with macros and commands stored in an XML file. For example, each button on the U-Verse remote is mapped to an array of 32-bit integers stored as hex strings. These hex strings represent the actual IR commands that are sent to the USB UIRT to control the U-Verse box.</p>  <p>TV guide information is downloaded once a week from the internet using XMLTV and stored in a SQL Server database on the laptop.</p>  <p>Here are some pictures of the front-end on the iPod touch and the setup in general.</p>  <p>&#160;</p>  <p><a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0315.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="DSCF0315" border="0" alt="DSCF0315" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0315_thumb.jpg" width="184" height="244" /></a><a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0316.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="DSCF0316" border="0" alt="DSCF0316" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0316_thumb.jpg" width="184" height="244" /></a><a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0317.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="DSCF0317" border="0" alt="DSCF0317" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0317_thumb.jpg" width="184" height="244" /></a> <a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0319.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="DSCF0319" border="0" alt="DSCF0319" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0319_thumb.jpg" width="184" height="244" /></a> <a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0318.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="DSCF0318" border="0" alt="DSCF0318" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0318_thumb.jpg" width="184" height="244" /></a> <a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0312.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="DSCF0312" border="0" alt="DSCF0312" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/DSCF0312_thumb.jpg" width="244" height="184" /></a></p>  Send me an email if you would like a copy of the xml file with the UVerse remote codes.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2009-08-17 18:10:36</wp:post_date>
		<wp:post_date_gmt>2009-08-18 00:10:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>livingroom-net</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>110</wp:comment_id>
			<wp:comment_author><![CDATA[Steven Burman]]></wp:comment_author>
			<wp:comment_author_email>steve@mostlyclean.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.mostlyclean.com</wp:comment_author_url>
			<wp:comment_author_IP>165.86.81.20</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 20:37:26</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 02:37:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ummm..... AWESOME!

You are truly a .Net living room ninja.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>111</wp:comment_id>
			<wp:comment_author><![CDATA[ANaimi]]></wp:comment_author>
			<wp:comment_author_email>dr_a2002@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.anaimi.com</wp:comment_author_url>
			<wp:comment_author_IP>198.36.32.133</wp:comment_author_IP>
			<wp:comment_date>2009-08-18 00:09:02</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 06:09:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["If you don’t know what you’re doing, you could burn down your house, die or worse." what's worse than death?

Very cool though.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>112</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-08-18 04:05:19</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 10:05:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I could make you a list, or I could assert my geek cred by quoting the movie Hackers. In the end, it's more fun when left to the imagination.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>111</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>113</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-08-18 04:13:54</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 10:13:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks! It was a lot of fun, but as hobbies go, blogging is much cheaper.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>110</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>114</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Wright]]></wp:comment_author>
			<wp:comment_author_email>adamjwright@comcast.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.adamjwright.com</wp:comment_author_url>
			<wp:comment_author_IP>24.2.12.70</wp:comment_author_IP>
			<wp:comment_date>2009-08-23 11:20:25</wp:comment_date>
			<wp:comment_date_gmt>2009-08-23 17:20:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Brilliant!!!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Double many-to-one?</title>
		<link>http://jasondentler.com/blog/2009/08/double-many-to-one/</link>
		<pubDate>Thu, 20 Aug 2009 13:54:47 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=303</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’m working on a mapping for a project at work. The entity names have been changed to protect the innocent. </p>  <p><a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/ClassDiagram1.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="ClassDiagram1" border="0" alt="ClassDiagram1" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/ClassDiagram1_thumb.png" width="427" height="137" /></a> </p>  <p>In the application I’m working on, the model is more like glasses with a left and right lens, but I’ve simplified it. </p>  <pre class="brush:vbnet">Public Class Monocle
    Inherits Entity

    Private m_LeftLens As Lens

    Public Overridable Property Lens() As Lens
        Get
            Return m_LeftLens
        End Get
        Set(ByVal value As Lens)
            m_LeftLens = value
        End Set
    End Property

End Class

Public Class Lens
    Inherits Entity

    Private m_Glasses As Monocle

    Public Overridable Property Monocle() As Monocle
        Get
            Return m_Glasses
        End Get
        Set(ByVal value As Monocle)
            m_Glasses = value
        End Set
    End Property

End Class

Public Class MonocleMapping
    Inherits ClassMap(Of Monocle)
    Public Sub New()
        Id(Function(x As Monocle) x.ID).GeneratedBy.GuidComb()
        References(Function(x As Monocle) x.Lens) _
            .Cascade.All() _
            .WithForeignKey(&quot;MonocleLens&quot;)

    End Sub
End Class

Public Class LensMapping
    Inherits ClassMap(Of Lens)
    Public Sub New()
        Id(Function(x As Lens) x.ID).GeneratedBy.GuidComb()
        References(Function(x As Lens) x.Monocle) _
            .Cascade.All() _
            .WithForeignKey(&quot;LensMonocle&quot;)
    End Sub
End Class

&lt;TestFixture()&gt; _
Public Class GlassesMappingTests

    &lt;Test()&gt; _
    Public Sub CanCascadeSaveFromMonocleToLens()
        Dim ID As Guid
        Dim Monocle As Monocle
        Dim Lens As Lens
        Using Scope As New SQLiteDatabaseScope(Of MonocleMapping)
            Using Session = Scope.OpenSession
                Using Tran = Session.BeginTransaction
                    Monocle = New Monocle

                    Lens = New Lens With {.Monocle = Monocle}
                    Monocle.Lens = Lens

                    'These are just idiot checks...
                    Monocle.Should.Not.Be.Null()
                    Lens.Should.Not.Be.Null()
                    Monocle.Lens.Should.Be.SameInstanceAs(Lens)
                    Lens.Monocle.Should.Be.SameInstanceAs(Monocle)

                    ID = Session.Save(Monocle)
                    Tran.Commit()
                End Using
            End Using

            Using Session = Scope.OpenSession
                Using Tran = Session.BeginTransaction

                    Monocle = Session.Get(Of Monocle)(ID)

                    Monocle.Should.Not.Be.Null()
                    Monocle.ID.Should.Be.EqualTo(ID)

                    Monocle.Lens.Should.Not.Be.Null()
                    Monocle.Lens.Should.Not.Be.SameInstanceAs(Lens)
                    Monocle.Lens.Should.Be.EqualTo(Lens)
                    Monocle.Lens.Monocle.Should.Be.SameInstanceAs(Monocle)

                    Tran.Commit()
                End Using

            End Using
        End Using

    End Sub

End Class</pre>
<pre class="brush:csharp">
using NUnit.Framework;
using FluentNHibernate.Mapping;

public class Monocle : Entity
{
    
    private Lens m_Lens;
    
    public virtual Lens Lens {
        get { return m_Lens; }
        set { m_Lens = value; }
    }
    
}

public class Lens : Entity
{
    
    private Monocle m_Glasses;
    
    public virtual Monocle Monocle {
        get { return m_Glasses; }
        set { m_Glasses = value; }
    }
    
}

public class MonocleMapping : ClassMap&lt;Monocle>
{
    public MonocleMapping()
    {
        Id((Monocle x) => x.ID).GeneratedBy.GuidComb();
            
        References((Monocle x) => x.Lens).Cascade.All().WithForeignKey("MonocleLens");
    }
}

public class LensMapping : ClassMap&lt;Lens>
{
    public LensMapping()
    {
        Id((Lens x) => x.ID).GeneratedBy.GuidComb();
        References((Lens x) => x.Monocle).Cascade.All().WithForeignKey("LensMonocle");
    }
}

[TestFixture()]
public class GlassesMappingTests
{
    
    [Test()]
    public void CanCascadeSaveFromGlassesToLense()
    {
        Guid ID;
        Monocle Monocle;
        Lens Lens;
        using (SQLiteDatabaseScope&lt;MonocleMapping> Scope = new SQLiteDatabaseScope&lt;MonocleMapping>()) {
            using (Session == Scope.OpenSession()) {
                using (Tran == Session.BeginTransaction()) {
                    Monocle = new Monocle();
                    
                    Lens = new Lens { Monocle = Monocle };
                    Monocle.Lens = Lens;
                    
                    //These are just idiot checks...
                    Monocle.Should.Not.Be.Null();
                    Lens.Should.Not.Be.Null();
                    Monocle.Lens.Should.Be.SameInstanceAs(Lens);
                    Lens.Monocle.Should.Be.SameInstanceAs(Monocle);
                    
                    ID = Session.Save(Monocle);
                    Tran.Commit();
                }
            }
            
            using (Session == Scope.OpenSession) {
                using (Tran == Session.BeginTransaction) {
                    
                    Monocle = Session.Get&lt;Monocle>(ID);
                    
                    Monocle.Should.Not.Be.Null();
                    Monocle.ID.Should.Be.EqualTo(ID);
                    
                    Monocle.Lens.Should.Not.Be.Null();
                    Monocle.Lens.Should.Not.Be.SameInstanceAs(Lens);
                    Monocle.Lens.Should.Be.EqualTo(Lens);
                    Monocle.Lens.Monocle.Should.Be.SameInstanceAs(Monocle);
                    
                    Tran.Commit();
                    
                }
            }
            
        }
    }
    
}

</pre>

<p>Here’s the resulting SQL.</p>

<pre>drop table if exists &quot;Monocle&quot;
drop table if exists &quot;Lens&quot;
create table &quot;Monocle&quot; (ID UNIQUEIDENTIFIER not null, Lens_id UNIQUEIDENTIFIER, primary key (ID))
create table &quot;Lens&quot; (ID UNIQUEIDENTIFIER not null, Monocle_id UNIQUEIDENTIFIER, primary key (ID))
INSERT INTO &quot;Lens&quot; (Monocle_id, ID) VALUES (@p0, @p1); @p0 = '', @p1 = 'f6f37089-a66b-4007-b732-9c6b008d1448'
INSERT INTO &quot;Monocle&quot; (Lens_id, ID) VALUES (@p0, @p1); @p0 = 'f6f37089-a66b-4007-b732-9c6b008d1448', @p1 = 'bb2879f6-d27a-4eb0-8bf0-9c6b008d143b'
UPDATE &quot;Lens&quot; SET Monocle_id = @p0 WHERE ID = @p1; @p0 = 'bb2879f6-d27a-4eb0-8bf0-9c6b008d143b', @p1 = 'f6f37089-a66b-4007-b732-9c6b008d1448'
SELECT monocle0_.ID as ID0_0_, monocle0_.Lens_id as Lens2_0_0_ FROM &quot;Monocle&quot; monocle0_ WHERE monocle0_.ID=@p0; @p0 = 'bb2879f6-d27a-4eb0-8bf0-9c6b008d143b'
SELECT lens0_.ID as ID1_0_, lens0_.Monocle_id as Monocle2_1_0_ FROM &quot;Lens&quot; lens0_ WHERE lens0_.ID=@p0; @p0 = 'f6f37089-a66b-4007-b732-9c6b008d1448'</pre>

<p>Of course, I think that making this a double many-to-one relationship is probably wrong, but it gets me close to a working solution. </p>

<p>This works, except for the unnecessary UPDATE “Lens” statement. In my mind, since I’m using the GuidComb generator, NHibernate should specify the Monicle_id in the INSERT “Lens” statement. Instead, it’s inserting NULL, then updating it later. This prevents me from putting a NOT NULL constraint on Lens.Monicle_id. It’s been suggested that I have superfluous update, and I agree. However, the prescribed inverse=”true” won’t work. I don’t have a one-to-many relationship to put it on.</p>

<p>I’ve tried using HasOne instead of References to create a bidirectional one-to-one relationship. It didn’t work at all. My database schema didn’t even have FK fields. </p>

<p>Am I missing something or is this double many-to-one as good as it’s going to get?</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date>2009-08-20 07:54:47</wp:post_date>
		<wp:post_date_gmt>2009-08-20 13:54:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>double-many-to-one</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fluent-nhibernate"><![CDATA[Fluent NHibernate]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<wp:comment>
			<wp:comment_id>115</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-20 12:30:59</wp:comment_date>
			<wp:comment_date_gmt>2009-08-20 18:30:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is as good as it gets. Tuna figured out why it wasn't possible to eliminate the update. Thanks!

http://twitter.com/tehlike/statuses/3431907077]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>116</wp:comment_id>
			<wp:comment_author><![CDATA[Tuna Toksoz]]></wp:comment_author>
			<wp:comment_author_email>tehlike@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://tunatoksoz.com</wp:comment_author_url>
			<wp:comment_author_IP>81.215.121.213</wp:comment_author_IP>
			<wp:comment_date>2009-08-21 03:56:44</wp:comment_date>
			<wp:comment_date_gmt>2009-08-21 09:56:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If I detail the situation, even if we know the id's, we will anyway have to insert two records into database in 2 insert statemetns.

INSERT INTO "Lens" (Monocle_id, ID) VALUES (@p0, @p1); @p0 = '', @p1 = 'f6f37089-a66b-4007-b732-9c6b008d1448'
INSERT INTO "Monocle" (Lens_id, ID) VALUES (@p0, @p1); @p0 = 'f6f37089-a66b-4007-b732-9c6b008d1448', @p1 = 'bb2879f6-d27a-4eb0-8bf0-9c6b008d143b'

If we say p0=something and this something doesn't exist in Monocle table, we'll run into trouble with FK violation exception. This is why we can't make the both sides not-null, too.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Imagining the Tenth Dimension</title>
		<link>http://jasondentler.com/blog/2009/08/imagining-the-tenth-dimension/</link>
		<pubDate>Thu, 20 Aug 2009 20:28:46 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2009/08/imagining-the-tenth-dimension/</guid>
		<description></description>
		<content:encoded><![CDATA[<div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:5737277B-5D6D-4f48-ABFC-DD9C333F4C5D:efcaf438-37cc-45fd-8778-679681342936" class="wlWriterEditableSmartContent"><div><embed type="application/x-shockwave-flash" src="http://flash.revver.com/player/1.0/player.swf" wmode="transparent" pluginspage="http://www.macromedia.com/go/getflashplayer" scale="noScale" salign="TL" bgcolor="#000000" flashvars="mediaId=99898&affiliateId=0&allowFullScreen=true" allowfullscreen="true" height="392" width="480"></embed></div></div>  <p>&#160;</p>  <p>The 5th post in the ASP.NET MVC / NHibernate series, <em>Fixing the Broken Stuff</em>,&#160; will be out Friday night.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date>2009-08-20 14:28:46</wp:post_date>
		<wp:post_date_gmt>2009-08-20 20:28:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>imagining-the-tenth-dimension</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Part 5: Fixing the Broken Stuff</title>
		<link>http://jasondentler.com/blog/2009/08/part-5-fixing-the-broken-stuff/</link>
		<pubDate>Fri, 21 Aug 2009 00:25:36 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=315</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is part 5 of my series on <a href="http://www.asp.net/mvc/" target="_blank">ASP.NET MVC</a> with <a href="http://nhforge.org" target="_blank">NHibernate</a>. So far, we concentrated on NHibernate and persistence concerns. In this part, we’re going to correct our model and mappings to pass our tests. This will be the last full-time NHibernate post for a while. The next part will be focused on integrating <a href="http://ninject.org/" target="_blank">Ninject</a>, our inversion of control / dependency injection framework, with ASP.NET MVC.</p>  <p>If you’re just joining us, you can still catch up.</p>  <ul>   <li><a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">Part 1</a> – Solution setup </li>    <li><a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/" target="_blank">Part 2</a> – Model design </li>    <li><a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/" target="_blank">Part 3</a> – Persistence mapping </li>    <li><a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/" target="_blank">Part 4</a> – Persistence tests <a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/LogoNH.gif"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="LogoNH" border="0" alt="LogoNH" align="right" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/LogoNH_thumb.gif" width="43" height="40" /></a> </li> </ul>  <p>First, some trivia. According to Fabio Maulo, the NHibernate logo is probably a sleeping <a href="http://en.wikipedia.org/wiki/Marmot" target="_blank">marmot</a>.&#160;&#160;&#160; </p>  <h3>Know what you’re fixing</h3>  <p>When correcting bugs, you should correct only bugs. This seems obvious. Yes, we write tests so we can find out what’s broken. The less obvious purpose is to know what’s not broken.</p>  <p><strong>Confession</strong>: Sometimes I code first, then test. Sometimes I put on my pants, then my shirt. As long as you leave the house fully dressed, the order isn’t all that important. As long as you write your code and tests every day, the order isn’t all that important.</p>  <p>Now, when you’re on a team working on a project, I assume things *should* work a little different. I wouldn’t know. My project team is just me, and I’ve picked up a lot of bad habits from my team over the years.</p>  <p>Here are the results of the NUnit tests from part 4: 2 passed, 3 failed, 5 threw exceptions. 2 out of 10 is actually pretty good for me. Let’s work through these 8 problems one at a time.</p>  <p>&#160;</p>  <h3>Bare-minimum NHibernate debugging</h3>  <p>NHibernate makes extensive use of the log4net log framework. It’s quick and painless to expose this log to NUni or most other test runners.</p>  <ol>   <li>In your data test project, add a reference to log4net.dll </li>    <li>Add an app.config </li>    <li>Add a new class called BaseFixture </li>    <li>Set all of your test fixtures to inherit from the base fixture. </li> </ol>  <p>Here’s what your app.config should look like with the log4net configuration:</p>  <pre class="brush:xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;configuration&gt;
  &lt;configSections&gt;
    &lt;section name=&quot;log4net&quot; type=&quot;log4net.Config.Log4NetConfigurationSectionHandler,log4net&quot;/&gt;
  &lt;/configSections&gt;
  &lt;log4net&gt;
    &lt;appender name=&quot;Debugger&quot; type=&quot;log4net.Appender.ConsoleAppender&quot;&gt;
      &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;
        &lt;conversionPattern value=&quot;%date [%thread] %-5level %logger - %message%newline&quot;/&gt;
      &lt;/layout&gt;
    &lt;/appender&gt;
    &lt;logger name=&quot;NHibernate.SQL&quot;&gt;
      &lt;level value=&quot;ALL&quot;/&gt;
      &lt;appender-ref ref=&quot;Debugger&quot;/&gt;
    &lt;/logger&gt;
  &lt;/log4net&gt;
&lt;/configuration&gt;</pre>

<p>Here’s the code for BaseFixture.</p>

<pre class="brush:vbnet">Public MustInherit Class BaseFixture

    Protected Shared ReadOnly Log As log4net.ILog = GetLogger()

    Private Shared Function GetLogger() As log4net.ILog
        log4net.Config.XmlConfigurator.Configure()
        Return log4net.LogManager.GetLogger(GetType(BaseFixture))
    End Function

End Class</pre>

<p>We’re calling log4net.Config,XmlConfiguration.Configure() just once. This loads the logging configuration from the app.config, which wires up log4net with Console.Out through the ConsoleAppender. With the example configuration, we'll get to see the SQL NHibernate is executing.</p>

<p>If you want something a lot more powerful, check out Ayende’s <a href="http://nhprof.com/" target="_blank">NHProf</a>.</p>

<h3>Problem #1</h3>

<pre>NStackExample.Data.Tests.CourseMappingTests.CanCascadeOrphanDeleteFromCourseToSections:
NHibernate.TransientObjectException : object references an unsaved transient instance - save the transient instance before flushing. Type: NStackExample.Section, Entity: NStackExample.Section</pre>

<pre class="brush:vbnet">                Dim Course As New Course() With { _
                        .Subject = &quot;SUBJ&quot;, _
                        .CourseNumber = &quot;1234&quot;, _
                        .Title = &quot;Title&quot;, _
                        .Description = &quot;Description&quot;, _
                        .Hours = 3}

                Dim Section As New Section() With { _
                        .FacultyName = &quot;FacultyName&quot;, _
                        .RoomNumber = &quot;R1&quot;, _
                        .SectionNumber = &quot;1&quot;}

                Term.AddSection(Section)
                Course.AddSection(Section)

                Using Tran = Session.BeginTransaction()
                    ID = Session.Save(Course)
                    Session.Save(Section)
                    Tran.Commit() ' &lt;==== Exception here
                End Using
                Session.Clear()</pre>

<p>When a transaction is committed, the session is flushed to the database. That just means data changes are written to the database. This exception is telling us we’re trying to save an object, but it references another object that isn’t saved. We can infer that this means cascading is turned off for this relationship. When we go to this particular line in the code, we see that this transaction is committing a save (INSERT) of a new course, and that this course references a new section. If this were a TestCascadeSaveFromParentToChild test, we would adjust our mapping. In this case, we’re testing the delete-orphan functionality, not the cascade of inserts and updates. We’ll explicitly save the section in this transaction as well.</p>

<p>After making the change and re-running our tests, we see that the same test is still failing, although it got further.</p>

<pre class="brush:vbnet">                'Test removing
                Course.RemoveSection(Section)
                Using Tran = Session.BeginTransaction()
                    Session.Save(Course)
                    Tran.Commit() ' &lt;==== Exception here
                End Using
                Session.Clear()</pre>

<p>Now we're violating a unique constraint. This is because we've called Session.Save(Course) twice. Session.Save is for saving new objects only. Session.SaveOrUpdate or simply Session.Update should be used to save the course. Since neither of those return the identifier, we'll need to get that from our initial Save. We make those change, recompile, and test.</p>

<p>Next, we get this:</p>

<pre>NStackExample.Data.Tests.CourseMappingTests.CanCascadeOrphanDeleteFromCourseToSections:
NHibernate.Exceptions.GenericADOException : could not delete collection: [NStackExample.Course.Sections#912b489a-4d12-4bc9-9d68-9c6b0147b799][SQL: UPDATE &quot;Section&quot; SET Course_id = null WHERE Course_id = @p0]
  ----&gt; System.Data.SQLite.SQLiteException : Abort due to constraint violation
Section.Course_id may not be NULL</pre>

<p>This message is telling us that when we disassociated the course from the section, NHibernate tried to set the Section's Course_id to NULL. This violated a not-null constraint. More importantly, this violated our business rule. The section was orphaned and should have been deleted. To corrected it, we update our mappings. In our course mapping, we’ll add Cascade.AllDeleteOrphan() to the one-to-many sections relationship.</p>

<pre class="brush:vbnet">        HasMany(Function(x As Course) x.Sections) _
            .AsSet() _
            .WithForeignKeyConstraintName(&quot;CourseSections&quot;) _
            .Cascade.AllDeleteOrphan()</pre>

<p>After a compile and retest, we get this:</p>

<pre>NStackExample.Data.Tests.CourseMappingTests.CanCascadeOrphanDeleteFromCourseToSections:
NHibernate.PropertyValueException : not-null property references a null or transient valueNStackExample.Section.Course</pre>

<p>This error is strange. Basically, even though we’re going to delete the section now that it’s orphaned, NHibernate is complaining that we’ve set Section.Course = null / nothing. For now, simply to appease the marmot god, we’ll remove our not null constraint on Section.Course. If you turn on log4net NHibernate.SQL logging, you’ll see that this operation wouldn’t violate the NOT NULL database constraint. The orphaned row is being deleted. We’re only failing an internal NHibernate property check. I’m hoping for a better explanation from Tuna, one of the NHibernate gurus, who’s been extremely helpful with this series.</p>

<p>The second problem is basically a disconnect between relational database concepts and object relations. All one-to-many database relationships are bidirectional. The many-to-one is implied. In an object graph, we can have a reference from a parent to its children but not reference from the child back to the parent, or vice-versa. Object relationships are unidirectional. Even though it would indicate a bug in most circumstances, we still have to tell NHibernate which of our two unidirectional relationships is the “real” one that we want to persist to the database. The default is to use the one-to-many. This means that the relationship that is saved is based on membership in a course’s sections collection. We would rather have the relationship based on the many-to-one relationship: the Section’s Course property. To do this, we specify Inverse() in our mapping for Course.Sections. This tells NHibernate that the “other side” of the bidirectional relationship is the one we want to persist.</p>

<p>Bug solved. Onward! Wait. Compile it and rerun your tests. You may have unknowingly fixed other problems.</p>

<h3>Problem #2</h3>

<pre>NStackExample.Data.Tests.CourseMappingTests.CanCascadeSaveFromCourseToSections:
  Expected: &lt;nstackexample.section&gt;
  But was:  &lt;nstackexample.section&gt;</pre>

<p>This is another misleading issue. Our test is checking the equality of two sections.</p>

<p>Q: How did we define the equality of a section?</p>

<p>A: We didn’t, so Object.Equals is just looking to see if these two happen to be the same instance. Since one is rehydrated from the database, they aren’t. We’ll have to define our own equality check.</p>

<p>Q: How should we define equality?</p>

<p>A: If two instances represent the same section, they are equal.&#160; Wait. Why are we just talking about sections? Let’s expand that to cover all entities.</p>

<p>Q: Where can we put this rule?</p>

<p>A: We should override Equals In our base Entity class, so all entities can use it.</p>

<p>Q: How do we know if two instances represent the same entity?</p>

<p>A: The ID fields will be equal.</p>

<p>Q: What about when we haven’t persisted the object and don’t have an ID yet?</p>

<p>A: We’ll assume they’re not equal. If a specific class needs something more accurate, it can override Equals again.</p>

<p>Here’s the code:</p>

<pre class="brush:vbnet">    Public Overrides Function Equals(ByVal obj As Object) As Boolean
        Dim other As Entity = TryCast(obj, Entity)
        If other Is Nothing Then Return False
        Return ID.Equals(other.ID) AndAlso Not ID.Equals(Guid.Empty)
    End Function</pre>

<p>Let’s recompile and test again. Look at that! We have 6 out of 10 tests passing now.</p>

<h3>Problem #3</h3>

<pre>NStackExample.Data.Tests.SectionMappingTests.CanCascadeSaveFromSectionToStudentSections:
NHibernate.PropertyValueException : not-null property references a null or transient valueNStackExample.Student.MiddleName</pre>

<p>This particular error can be fixed in two ways. We have defined our Student mapping to not allow null middle names. Our test of the Sections cascade is failing because it doesn’t set a value in middle name. We can either change our test to put something, even an empty string in middle name, or we can change our mapping to allow nulls. I choose option #1. Changing our mapping to allow nulls could lead to NullReferenceExceptions. Let’s set MiddleName = String.Empty around line 83. After a compile and test, we get this error.</p>

<pre>NStackExample.Data.Tests.SectionMappingTests.CanCascadeSaveFromSectionToStudentSections:
NHibernate.TransientObjectException : object references an unsaved transient instance - save the transient instance before flushing. Type: NStackExample.StudentSection, Entity: NStackExample.StudentSection</pre>

<p>This error is saying that our cascade is failing. Why? Because we didn’t actually specify cascade on one of the one-to-many relationships pointing to&#160; StudentSection. Since we know both Sections and Students should cascade to StudentSection, go add Cascade.All to both. Add Inverse() while you’re there.</p>

<p>Compile and retest. Success.</p>

<h3>Problem #4</h3>

<pre>NStackExample.Data.Tests.StudentMappingTests.CanCascadeSaveFromStudentToStudentSection:
NHibernate.TransientObjectException : object references an unsaved transient instance - save the transient instance before flushing. Type: NStackExample.Student, Entity: NStackExample.Student</pre>

<p>This one is a bug in our test. If you look at what we're testing and what we're actually saving, you'll realize that we should be saving Student, not Section. Fix it and try again. Now we have the same MiddleName bug we had in problem #3. Fix it as well. Test again. Now we get a NullReferenceException. Why?</p>

<p>If you look at our test of the Student mapping, you’ll see that we’re not checking the correct results. This was most likely a sloppy cut-and-paste job in the middle of a conference call or some other distracting scenario. Swap in the correct expected results:</p>

<pre class="brush:vbnet">                'Check the results
                Using Tran = Session.BeginTransaction
                    Student = Session.Get(Of Student)(ID)

                    Assert.AreEqual(1, Student.StudentSections.Count)
                    Assert.AreEqual(Student.StudentSections(0), StudentSection)

                    Tran.Commit()
                End Using</pre>

<p>It works!</p>

<h3>Problem #5</h3>

<pre>NStackExample.Data.Tests.TermMappingTests.CanCascadeSaveFromTermToSections:
NHibernate.TransientObjectException : object references an unsaved transient instance - save the transient instance before flushing. Type: NStackExample.Section, Entity: NStackExample.Section</pre>

<p>This is the same as problem #3. Our cascade from term is not cascading the save down to the section. Go add Cascade,All()and Inverse() to Term.Sections.</p>

<h3>Problem #6</h3>

<pre>NStackExample.Data.Tests.TermMappingTests.CanSaveAndLoadTerm:
  Expected: &quot;Fall 2009&quot;
  But was:  null</pre>

<p>In this test, we see that we were expecting a value in the Name property of Term, but we got null / nothing. Whenever you see this, you should first check your mapping. In this case, you'll quickly discover that we didn't map that property. Go map it. Next, you'll discover a bug in our tests. We're comparing the wrong date. EndDate should be compared with December 1st, 2009.</p>

<h3>It works! </h3>

<p>That really wasn’t so terrible. It probably took more effort to read this post than it did to correct those bugs.</p>

<p>Oh yeah, and get some source control.</p>

<p><strike>Before I post the source code, I’ll be updating to Fluent NHibernate v1.0 RC and fixing some of the typos and reference problems you’ve commented about. With any luck, the corrected source code for this part, along with the next part will be out before the weekend is over. </strike></p>

<p>Edit: Download the entire solution in <a href="http://jasondentler.com/downloads/NStackExample.Part5.VBNET.Zip" target="_blank">VB</a> or <a href="http://jasondentler.com/downloads/NStackExample.Part5.CSharp.Zip" target="_blank">C#</a>. I’ve upgraded to Fluent NHibernate v1 RC and updated most of the other assemblies.</p>

<p>Jason 
  <br />- Glad to be moving on to Ninject soon.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date>2009-08-20 18:25:36</wp:post_date>
		<wp:post_date_gmt>2009-08-21 00:25:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>part-5-fixing-the-broken-stuff</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fluent-nhibernate"><![CDATA[Fluent NHibernate]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="category" nicename="nunit"><![CDATA[NUnit]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>117</wp:comment_id>
			<wp:comment_author><![CDATA[ASP.NET MVC Archived Buzz, Page 1]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://aspdotnetmvc.com/buzz/default.aspx</wp:comment_author_url>
			<wp:comment_author_IP>64.55.113.203</wp:comment_author_IP>
			<wp:comment_date>2009-08-22 23:13:53</wp:comment_date>
			<wp:comment_date_gmt>2009-08-23 05:13:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] to Vote[Del.icio.us] Part 5: Fixing the Broken Stuff « BASICly everything (8/22/2009)Saturday, August 22, 2009 from [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>118</wp:comment_id>
			<wp:comment_author><![CDATA[Twitter Trackbacks for Part 5: Fixing the Broken Stuff « BASICly everything [jasondentler.com] on Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/tb/bit.ly/rHe6I</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2009-08-23 20:44:07</wp:comment_date>
			<wp:comment_date_gmt>2009-08-24 02:44:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Part 5: Fixing the Broken Stuff « BASICly everything  jasondentler.com/blog/2009/08/part-5-fixing-the-broken-stuff &ndash; view page &ndash; cached  #BASICly everything RSS Feed BASICly everything Atom Feed BASICly everything » Part 5: Fixing the Broken Stuff Comments Feed BASICly everything Hello World! Imagining the Tenth Dimension Bidirectional One-to-many with Orphan &mdash; From the page [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>119</wp:comment_id>
			<wp:comment_author><![CDATA[t800t8]]></wp:comment_author>
			<wp:comment_author_email>t800t8@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://t800t8.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>117.0.57.168</wp:comment_author_IP>
			<wp:comment_date>2009-08-24 09:05:57</wp:comment_date>
			<wp:comment_date_gmt>2009-08-24 15:05:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I tried to run the tests but I have "System.BadImageFormatException: Could not load file or assembly 'System.Data.SQLite, Version=1.0.65.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139' or one of its dependencies. An attempt was made to load a program with an incorrect format."

I tried to add 32-bit and 64-bit of System.Data.SQLite but it didn't help. 

Do you have any idea about this problem? Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>120</wp:comment_id>
			<wp:comment_author><![CDATA[t800t8]]></wp:comment_author>
			<wp:comment_author_email>t800t8@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://t800t8.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>117.0.57.168</wp:comment_author_IP>
			<wp:comment_date>2009-08-24 09:27:18</wp:comment_date>
			<wp:comment_date_gmt>2009-08-24 15:27:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I added System.Data.SQLite.dll in ManagedOnly folder to project and the problem was fixed]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>121</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-08-25 18:30:31</wp:comment_date>
			<wp:comment_date_gmt>2009-08-26 00:30:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm really having difficulty following you in the analysis of the problems, because the code you have in the explanations doesn't match the code you gave us in part 4, and the explanation of the changes are not completely clear.  When I put in what I think are the changes you're suggesting, I get entirely different errors than you do, and they don't make sense.

Specifically, on Problem #1, if I add Session.Save(Section1) and Session.Save(Section2) before the Session.Save(Course), then I'm getting a different exception from NHibernate saying "not-null property references a null or transient valueNStackExample.Section.Course" at the point I do the Session.Save(Section1).  So it appears that you can't save the Course until  you have saved  the Section, and you can't save the Section until you have saved the Course!  How do you solve that?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>122</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-08-25 19:14:03</wp:comment_date>
			<wp:comment_date_gmt>2009-08-26 01:14:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, I actually worked through that. I moved the Session.Save(Section1) and Section2 AFTER the Session.Save(Course), and the error went away (I still don't understand that), and then I was able to work through the remainder of the errors just as you described.

I do have a question though.  Back in Part 3, in the paragraph "8 Hours or 8 Minutes", you implied that this approach is much easier than setting up your database.  I've done a few applications using both MySql and MSSQL with Visual Studio and DataSets, in which I just go into the server explorer, define the tables, click Add New Item -&gt; DataSet, and drag the tables  from the server explorer onto the design surface, and presto, I have all my mappings.  That seems an order of magnitude easier than this. What are the advantages to the NHibernate approach, even with Fluent mappings?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>123</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-26 14:59:20</wp:comment_date>
			<wp:comment_date_gmt>2009-08-26 20:59:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Dave - I apologize for the unposted updates between #4 and 5. They were necessary to illustrate some points I wanted to make in #5. I'll try to go back and document those changes. 

NHibernate is light-years ahead of the strongly-typed dataset approach. I know. I've been converted. At best, datasets will give you a bunch of DTOs to use in your own custom DAL with connections, transactions and DataAdapters flying all over. NH lets you just build your model and use it with an intelligent DAL already baked in. 

Ayende's blog is following a series by Davey Brion about building your own DAL and comparing that the NH features you get for free. It's worth a read.

http://ayende.com/Blog/archive/2009/08/24/a-guide-into-orm-implementation-challenges-reasoning.aspx

http://davybrion.com/blog/2009/08/build-your-own-data-access-layer-series/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>122</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>124</wp:comment_id>
			<wp:comment_author><![CDATA[Tuna Toksoz]]></wp:comment_author>
			<wp:comment_author_email>tehlike@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://tunatoksoz.com</wp:comment_author_url>
			<wp:comment_author_IP>81.215.116.25</wp:comment_author_IP>
			<wp:comment_date>2009-08-26 15:04:01</wp:comment_date>
			<wp:comment_date_gmt>2009-08-26 21:04:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Datasets are hard to deal with, you can't fine tune their behavior. They are bloated and heavy, on the other hand, in NH, you have Plain Old Csharp Objects, which represents your "domain" as pposed to your database.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>125</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-08-31 14:31:59</wp:comment_date>
			<wp:comment_date_gmt>2009-08-31 20:31:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jason, this on a different topic. I'm following along in this series, and applying the principles to a project I'm working on.  Except that I decided to try out  the FluentNHibernate.Automapping routines.

I have a "subscriber" class which is very simple, but contains a HasMany relationship to SubscriberContacts (e.g., email, cell phone, etc.) It is implemented just like Sections property in your Course object:
 
        private ICollection _subscriberContacts = new HashSet();
        public virtual ICollection SubscriberContacts { get { return _subscriberContacts; }
            protected set { _subscriberContacts = value; } }

However, when I get to the Session.Save(newSub), NHibernate is throwing an InvalidCast exception saying it can't cast a HashSet to a IList (which it can't - HashSet is an ICollection, but not an IList).

My question is two fold - why is NHibernate trying to cast it to an IList, and why did we implement the collection with a HashSet as opposed to a List?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>126</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-31 15:53:22</wp:comment_date>
			<wp:comment_date_gmt>2009-08-31 21:53:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Dave - I'm glad you're giving it a shot in a real world app, and more importantly, experimenting. This is exactly the feedback I was hoping this series would generate.

#1 - I couldn't say without seeing the mapping generated by FNH's automap. I suspect that it has automapped this collection as a list, not a set. If that's the case, I can't tell you how to change that behavior. When it comes to my DB and my model, I'm a bit of a control freak, so I explicitly map everything. The FNH google group can provide better assistance.

#2 - We use sets for two reasons. First, the order of the sections is unimportant. Since, in a list, order is maintained (at least within the POCO), it can imply that order is important. More importantly, sets don't allow duplicates. It makes no sense to have a section associated with its parent course multiple times, and can lead to bugs.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>125</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>127</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-09-01 14:53:07</wp:comment_date>
			<wp:comment_date_gmt>2009-09-01 20:53:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yep, you're right.  I exported the mappings and looked at the HBM files. It's using the "" tag in the OneToMany mapping, whereas in the mappings we did by hand, you used ".AsSet".

Your reasons for using sets make sense. I'm trying to understand the Fluent convention stuff to figure out how to make "AsSet" the default.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>128</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-09-02 14:02:39</wp:comment_date>
			<wp:comment_date_gmt>2009-09-02 20:02:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Okay, if anybody cares, I've found an  answer - not necessarily the best one.

If you define the collection as an Iesi.Collections.Generic.ISet, and initialize it with a Iesi.Collections.Generic.HashedSet, then the hbm will generate as a &gt;set&lt; tag, rather than a %gt;bag%lt;.

Only took me two days to figure that out.  I love FNH, but their documentation could be a little more substantial.  But it is open source!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>How I do things: The pieces</title>
		<link>http://jasondentler.com/blog/?p=570</link>
		<pubDate>Wed, 22 Jun 2011 19:07:36 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=570</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)"><img style="border-right-width: 0px; margin: 5px 20px 5px 5px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="mccarthy-youre-doing-it-wrong-s" border="0" alt="mccarthy-youre-doing-it-wrong-s" align="left" src="http://jasondentler.com/blog/wp-content/uploads/2011/06/mccarthyyouredoingitwrongs.jpg" width="471" height="480" /></a>This isn't one of those posts where some geek starts preaching &quot;You’re doing it completely wrong! Follow these 12 simple steps and be awesome just like me!&quot; Except, it is. </p>  <p>By the way, that picture is not me. I am not John McCarthy. You are not John McCarthy. I am not comparing myself to John McCarthy. <a href="http://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)">Who is John McCarthy?</a></p>  <p>I’m becoming a web guy. A long time ago, I was an ASP.NET guy. Then, I was an ASP.NET MVC guy. Now, finally, I think I’m a web guy – sort of. What’s the difference? I’m not frustrated by or afraid of JavaScript. That’s my big message: Don’t be afraid of JavaScript. Have some <a href="http://en.wikipedia.org/wiki/Jim_Jones">Flavor-Aid</a>. Mmmm. Grape!</p>  <p>Here are the pieces I’m using for my latest app. Don’t worry. The explanation comes later.</p>  <h3>Server</h3>  <p><a href="http://ncqrs.org/">nCQRS</a> provides <a href="http://cqrsinfo.com/" target="_blank">Command Query Responsibility Separation</a>, an event store, and plug-ins/connectors/add-ins for all the pieces and parts you need to fully implement it. The main thing you need to know about CQRS is that every interaction is either a command or a query, but never both. </p>  <h3>Client / Server</h3>  <p>ASP.NET MVC is just the glue between the client and the server parts of the app. I used to think of MVC as the entire application and the browser as an html renderer, the equivalent of a mainframe and terminal in the PC era. That’s wrong.</p>  <h4>Controllers</h4>  <p>CQRS fits well with MVC controllers when you follow some simple rules.</p>  <ul>   <li>Queries use GET. These always return either a View result or a JSON result. </li>    <li>Commands use POST. Following the <a href="http://devlicio.us/blogs/tim_barcz/archive/2008/08/22/prg-pattern-in-the-asp-net-mvc-framework.aspx">POST-Redirect-GET pattern</a>, these action methods always return a RedirectToAction result. </li> </ul> [gist id=1040832 file=Post-Redirect-Get.cs]   <p>The ExportModelState / ImportModelState attributes copy the model state to/from TempData so that “controls” like the ASP.NET MVC validation summary will work as expected despite using the PRG pattern. </p>  <h4>Views</h4>  <p>My views are thin. There are a handful of items from the view model that I render in to the view, and only in the master page.</p>  <p>[gist id=1040832 file=_layout.cshtml] </p>  <p>The views themselves consist of static html and Razor partials to “include” jQuery templates shared across views. </p>  <p>[gist id=1040832 file=Views.cshtml] </p>  <p>If you are not my target audience, you may have already figured out the magic trick.</p>  <h4>Model</h4>  <p>Let’s try an experiment. Imagine an ASP.NET MVC app based on this information: <strong>GET /Instructor/Details/4</strong></p>  <p>You’ve already guessed you have an InstructorController with an action method called Details that takes a single integer parameter called Id and returns a ViewResult. That’s what convention is all about.</p>  <p>Now, take the convention a step farther. You also have a view model class called MyApp.Instructor.Details with properties for each bit of data required in the view. </p>  <p>Stretch that convention as far as we can. You also have a table in your read model database called Instructor_Details that contains the data for this view model. The table has a primary key called Id and a field for each additional property of the view model. </p>  <h3>Client</h3>  <p>Allow me to introduce you to the modern web browser. Not only can it render the hell out of Geocities pages, but it can also <a href="http://bellard.org/jslinux/">run a full Linux kernel</a> and play <a href="http://chrome.angrybirds.com/">Angry Birds</a>. It can even run your application. I didn’t say “render.” I said “run.”</p>  <p></p>  <p>Take a look at this snippet of razor code from the master page:</p>  <p>[gist id=1040832 file=ModelOutput.cshtml] </p>  <p>Here’s the resulting html:</p>  <p>[gist id=1040832 file=ModelOutput.htm] </p>  <p>Your page has access to the entire view model. We can really do better than just a simple static html page. We can actually move the UI layer of the application from the view to the browser. Here’s some of the frameworks I like:</p>  <ul>   <li><a href="http://jquery.com" target="_blank">jQuery</a> </li>    <li><a href="http://jqueryui.com/" target="_blank">jQuery UI</a> </li>    <li><a href="http://api.jquery.com/category/plugins/templates/" target="_blank">jQuery templates</a> </li>    <li><a href="http://knockoutjs.com/" target="_blank">Knockout.js</a> </li>    <li>Landscape </li> </ul>  <p>Of course, this gives us a javascript- and css-heavy application. We can use something like <a href="http://aboutcode.net/knapsack/" target="_blank">Knapsack</a> to figure out our dependencies and minify everything.</p>  <p>Finally, I have to give credit for <a href="http://simon-says-architecture.com/2011/02/03/just-an-idea">most of this idea to Szymon Pobiega</a>. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>570</wp:post_id>
		<wp:post_date>2011-06-22 13:07:36</wp:post_date>
		<wp:post_date_gmt>2011-06-22 19:07:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="how-i-do-things"><![CDATA[How I do things]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How I do things: Landscape</title>
		<link>http://jasondentler.com/blog/?p=611</link>
		<pubDate>Thu, 23 Jun 2011 19:58:22 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=611</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://github.com/jasondentler/Landscape" target="_blank">Landscape</a> is my kitchen-sink project with inspirations from all over the web.
<h3>Knapsack resources</h3>
<a href="http://aboutcode.net/knapsack/" target="_blank">Knapsack</a> is a framework to manage the css and javascript dependencies for a page.

Suppose we have a view that uses a custom javascript file called “instructorList.js” If we used Knapsack, we’d reference that dependency like this:

[gist id=1043487 file=KnapsackRegisterScript.htm]

Without getting in to all the details, Knapsack easily allows us to define the dependencies of instructorList.js. So, if instructorList.js requires <a href="http://jqueryui.com/" target="_blank">jQuery UI</a> and our view references instructorList.js, Knapsack will also include a script tag for jQuery UI.

Knapsack also handles css files for us.

Here’s the _Layout.cshtml:

[gist id=1043487 file=KnapsackMasterPage.htm]

With two lines in the master page, we’ll get all of our &lt;link /&gt; tags for css and &lt;script /&gt; tags for required javascript files, all in the right order and without duplicates.
<h3>Landscape’s Knapsack-style external jQuery templates</h3>
Knapsack users should feel right at home with this view.

[gist id=1043487 file=KnapsackyView.htm]

With two extension methods – ReferenceTemplate(id, url) and RenderTemplates() - on HtmlHelper, we get “Knapsack for templates.”

The result is a script tag for an external jQuery template.

[gist id=1043487 file=ExternalTemplate.htm]

That’s cool, except browsers won’t automatically load the template. It has the wrong type. We need to use a bit of jQuery magic to make this happen. Enter <a href="https://github.com/jasondentler/Landscape/blob/a23f79bc33737bf22dcfcfcc4bee32e976ab79ff/Landscape.Web/Scripts/landscape/landscape.js" target="_blank">Landscape.js</a>. It downloads all of the external templates, sets the content of each script tag accordingly, and then kicks off knockout’s ko.applyBindings.
<h3>Tiny Responses</h3>
If we move the page content in to an external <a href="http://jquery.com" target="_blank">jQuery</a> template, it becomes just another cacheable external resource. The response from the server is just a list of resource urls and the view model.

[gist id=1043487 file=LandscapeResponse.htm] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>611</wp:post_id>
		<wp:post_date>2011-06-23 13:58:22</wp:post_date>
		<wp:post_date_gmt>2011-06-23 19:58:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="how-i-do-things"><![CDATA[How I do things]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cassette Tutorial #1</title>
		<link>http://jasondentler.com/blog/?p=693</link>
		<pubDate>Fri, 26 Aug 2011 00:54:10 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=693</guid>
		<description></description>
		<content:encoded><![CDATA[<p>When was the last time you tried something new and thought “Why haven’t I been doing it this way all along?” <a href="http://twitter.com/andrewdavey" target="_blank">Andrew Davey</a> created Knapsack, a framework to handle web assets like javascript and css, only to discover the name was trademarked. He turned that in to an opportunity to start over and create something even better. <a href="https://github.com/andrewdavey/cassette" target="_blank">Cassette</a> was born.</p>  <p>Out of the box, Cassette will sort out all of your javascript and css dependencies. In production, it will minify and merge those assets. </p>  <p>I think this framework deserves a good step-by-step tutorial. You’ll need Visual Studio 2010 with ASP.NET MVC 3 and NuGet.</p>  <h2>Getting Started</h2>  <p>Create a new, empty MVC 3 web app using the Razor view engine.</p>  <p>Pull up the installed NuGet packages by right-clicking on References, selecting Manage NuGet Packages, and clicking on the Installed packages.group.:</p>  <p>Remove these three NuGet packages by selecting the package and clicking Uninstall</p>  <ul>   <li>Entity Framework </li>    <li>jQuery Validation </li>    <li>jQuery Visual Studio 2010 IntelliSense </li> </ul>  <p>Install these NuGet packages. Go to the Online group, then search by name or use the nuget console.</p>  <ul>   <li>Cassette.Web </li>    <li>knockoutjs </li> </ul>  <p>You’ll end up with a scripts folder that looks something like this. Don’t be afraid. This mess of javascript is exactly why I’m showing you Cassette.</p>  <p><a href="http://jasondentler.com/blog/wp-content/uploads/2011/08/image.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://jasondentler.com/blog/wp-content/uploads/2011/08/image_thumb.png" width="429" height="810" /></a></p>  <p>Since Cassette will automatically minify our scripts for us in production, we’ll only need the full, hopefully human-readable copies of these javascript frameworks. Plus, there’s some stuff we just won’t need. Delete these files (or whatever version of them you may have):</p>  <ul>   <li>jquery-1.5.1.min.js </li>    <li>jquery-ui-1.8.11.min.js </li>    <li>jQuery.tmpl.min.js </li>    <li>jquery.unobtrusive-ajax.js </li>    <li>jquery.unobtrusive-ajax.min.js </li>    <li>jquery.validate.unobtrusive.js </li>    <li>jquery.validate.unobtrusive.min.js </li>    <li>knockout-1.2.1.js </li>    <li>Microsoft*.js </li>    <li>modernizr-1.7.min.js </li> </ul>  <p>Cassette allows you to set up a tree of javascript dependencies. So, if your page uses Knockout.js, which requires jquery.tmpl.js, which requires jquery.js, you just reference your script. Cassette will automatically include the other script tags for you. More on that later.</p>  <p>Now, you don’t want to reference jQuery 1.5.1. You want to reference whatever version jQuery you happen to have. Right? Okay. Rename your js files and remove those version numbers. The final result should look like this:</p>  <p><a href="http://jasondentler.com/blog/wp-content/uploads/2011/08/image1.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://jasondentler.com/blog/wp-content/uploads/2011/08/image_thumb1.png" width="429" height="422" /></a></p>  

<p>Let's also rename the /Content/themes/base folder to /Content/jquery-ui</p>

<p>We’ve renamed these files, so they’re not going to be properly updated by NuGet anymore. Let’s remove those packages. </p>  <ul>   <li>Modernizr </li>    <li>KnockoutJs </li>    <li>jQuery UI </li>    <li>jQuery.Templates </li>    <li>jQuery </li> </ul>  <p>This will leave you with these 4 packages:</p>  <ul>   <li>AjaxMin </li>    <li>Cassette </li>    <li>Cassette.Web </li>    <li>Jurassic </li> </ul>  <p>As a final step, let’s get a minimal website working.</p>  <p>Open the _Layout.cshtml and remove the link and script tags. </p>  <p>Create an “empty” HomeController with Index action and corresponding view. </p>  <p>Now run your web site, just to be sure it all works.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>693</wp:post_id>
		<wp:post_date>2011-08-26 00:54:10</wp:post_date>
		<wp:post_date_gmt>2011-08-26 00:54:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bidirectional One-to-many with Orphan Delete</title>
		<link>http://jasondentler.com/blog/2009/08/bidirectional-one-to-many-with-orphan-delete/</link>
		<pubDate>Sat, 22 Aug 2009 13:24:35 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2009/08/bidirectional-one-to-many-with-orphan-delete/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Here’s the full write-up on my issue from part 5. Since we’re saying all orphan children should be deleted, it seems logical that our DB schema won’t allow orphaned children, meaning Child.Parent_id should have a NOT NULL constraint. However, when I add this constraint and try to do a cascading orphan delete, <a href="http://nhforge.org" target="_blank">NHibernate</a> yells at me because I’ve set the Child.Parent to null / nothing.</p>  <p>If I remove this constraint (not good DB practice in my opinion), we see that the orphan is deleted without ever updating Child.Parent_id to NULL, so it won’t violate any database constraints, as far as I can tell.</p>  <p>Here’s the code in VB:</p>  <pre class="brush:vbnet">Imports FluentNHibernate.Mapping
Imports NUnit.Framework

Public Class Parent
    Inherits Entity

    Private m_Children As ICollection(Of Child) = New HashSet(Of Child)

    Public Overridable Property Children() As ICollection(Of Child)
        Get
            Return m_Children
        End Get
        Protected Set(ByVal value As ICollection(Of Child))
            m_Children = value
        End Set
    End Property

End Class

Public Class Child
    Inherits Entity

    Private m_Parent As Parent

    Public Overridable Property Parent() As Parent
        Get
            Return m_Parent
        End Get
        Set(ByVal value As Parent)
            m_Parent = value
        End Set
    End Property

End Class

Public Class ParentMapping
    Inherits ClassMap(Of Parent)
    Public Sub New()
        Id(Function(x As Parent) x.ID).GeneratedBy.GuidComb()
        HasMany(Function(x As Parent) x.Children) _
            .AsSet() _
            .WithForeignKeyConstraintName(&quot;ParentChildren&quot;) _
            .Cascade.AllDeleteOrphan() _
            .Inverse()

    End Sub
End Class

Public Class ChildMapping
    Inherits ClassMap(Of Child)
    Public Sub New()
        Id(Function(x As Child) x.ID).GeneratedBy.GuidComb()
        References(Function(x As Child) x.Parent) _
            .Cascade.All() _
            .WithForeignKey(&quot;ChildParent&quot;) _
            .Not.Nullable()

    End Sub
End Class

&lt;TestFixture()&gt; _
Public Class ParentMappingTests
    Inherits BaseFixture

    &lt;Test()&gt; _
    Public Sub CanCascadeSaveFromParentToChild()
        Dim ID As Guid
        Dim P As Parent
        Dim C As Child
        Using Scope As New SQLiteDatabaseScope(Of ParentMapping)
            Using Session = Scope.OpenSession
                Using Tran = Session.BeginTransaction
                    P = New Parent

                    'Add a child of the parent
                    C = New Child With {.Parent = P}
                    P.Children.Add(C)

                    ID = Session.Save(P)
                    Tran.Commit()
                End Using
                Session.Clear()

                Using Tran = Session.BeginTransaction

                    P = Session.Get(Of Parent)(ID)

                    Assert.IsNotNull(P)
                    Assert.AreEqual(ID, P.ID)

                    Assert.AreEqual(1, P.Children.Count)
                    Assert.AreNotSame(C, P.Children(0))
                    Assert.AreEqual(C, P.Children(0))
                    Assert.AreSame(P.Children(0).Parent, P)

                    Tran.Commit()
                End Using

            End Using
        End Using

    End Sub

    &lt;Test()&gt; _
    Public Sub CanDeleteOrphanFromParentToChildren()
        Dim ID As Guid
        Dim P As Parent
        Dim C As Child
        Using Scope As New SQLiteDatabaseScope(Of ParentMapping)
            Using Session = Scope.OpenSession
                Using Tran = Session.BeginTransaction
                    P = New Parent

                    'Add a child of the parent
                    C = New Child With {.Parent = P}
                    P.Children.Add(C)

                    ID = Session.Save(P)
                    Tran.Commit()
                End Using
                Session.Clear()

                Using Tran = Session.BeginTransaction

                    P = Session.Get(Of Parent)(ID)

                    Assert.IsNotNull(P)
                    Assert.AreEqual(ID, P.ID)

                    Assert.AreEqual(1, P.Children.Count)
                    Assert.AreNotSame(C, P.Children(0))
                    Assert.AreEqual(C, P.Children(0))
                    Assert.AreSame(P.Children(0).Parent, P)

                    Tran.Commit()
                End Using
                Session.Clear()

                'Orphan the child
                C = P.Children(0)
                P.Children.Remove(C)
                C.Parent = Nothing

                Using Tran = Session.BeginTransaction
                    'Orhpaned child should be deleted
                    Session.SaveOrUpdate(P)
                    Tran.Commit()
                End Using
                Session.Clear()

                Using Tran = Session.BeginTransaction
                    P = Session.Get(Of Parent)(ID)

                    Assert.AreEqual(0, P.Children.Count)

                    Tran.Commit()
                End Using

            End Using
        End Using
    End Sub

End Class</pre>

<p>Here’s the code in C#:</p>

<pre class="brush:csharp">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NHibernate;
using FluentNHibernate.Mapping;
using NUnit.Framework;

namespace NStackExample.Data.Tests
{

    public class Parent : Entity
    {

        private ICollection&lt;Child&gt; m_Children = new HashSet&lt;Child&gt;();

        public virtual ICollection&lt;Child&gt; Children
        {
            get { return m_Children; }
            protected set { m_Children = value; }
        }

    }

    public class Child : Entity
    {

        private Parent m_Parent;

        public virtual Parent Parent
        {
            get { return m_Parent; }
            set { m_Parent = value; }
        }

    }

    public class ParentMapping : ClassMap&lt;Parent&gt;
    {
        public ParentMapping()
        {
            Id((Parent x) =&gt; x.ID).GeneratedBy.GuidComb();
            HasMany((Parent x) =&gt; x.Children)
                .AsSet()
                .WithForeignKeyConstraintName(&quot;ParentChildren&quot;)
                .Cascade.AllDeleteOrphan()
                .Inverse();
        }
    }

    public class ChildMapping : ClassMap&lt;Child&gt;
    {
        public ChildMapping()
        {
            Id((Child x) =&gt; x.ID).GeneratedBy.GuidComb();
            References((Child x) =&gt; x.Parent)
                .Cascade.All()
                .WithForeignKey(&quot;ChildParent&quot;)
                .Not.Nullable();
        }
    }

    [TestFixture()]
    public class ParentMappingTests
    {

        [Test()]
        public void CanCascadeSaveFromParentToChild()
        {
            Guid ID;
            Parent P;
            Child C;
            using (SQLiteDatabaseScope&lt;ParentMapping&gt; Scope = new SQLiteDatabaseScope&lt;ParentMapping&gt;())
            {
                using (ISession Session = Scope.OpenSession())
                {
                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        P = new Parent();

                        //Add a child of the parent
                        C = new Child { Parent = P };
                        P.Children.Add(C);

                        ID = (Guid) Session.Save(P);
                        Tran.Commit();
                    }
                    Session.Clear();

                    using (ITransaction Tran = Session.BeginTransaction())
                    {

                        P = Session.Get&lt;Parent&gt;(ID);

                        Assert.IsNotNull(P);
                        Assert.AreEqual(ID, P.ID);

                        Assert.AreEqual(1, P.Children.Count);
                        Assert.AreNotSame(C, P.Children.First());
                        Assert.AreEqual(C.ID , P.Children.First().ID );
                        Assert.AreSame(P.Children.First().Parent, P);

                        Tran.Commit();

                    }
                }

            }
        }

        [Test()]
        public void CanDeleteOrphanFromParentToChildren()
        {
            Guid ID;
            Parent P;
            Child C;
            using (SQLiteDatabaseScope&lt;ParentMapping&gt; Scope = new SQLiteDatabaseScope&lt;ParentMapping&gt;())
            {
                using (ISession Session = Scope.OpenSession())
                {
                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        P = new Parent();

                        //Add a child of the parent
                        C = new Child { Parent = P };
                        P.Children.Add(C);

                        ID = (Guid) Session.Save(P);
                        Tran.Commit();
                    }
                    Session.Clear();

                    using (ITransaction Tran = Session.BeginTransaction())
                    {

                        P = Session.Get&lt;Parent&gt;(ID);

                        Assert.IsNotNull(P);
                        Assert.AreEqual(ID, P.ID);

                        Assert.AreEqual(1, P.Children.Count);
                        Assert.AreNotSame(C, P.Children.First());
                        Assert.AreEqual(C.ID, P.Children.First().ID );
                        Assert.AreSame(P.Children.First().Parent, P);

                        Tran.Commit();
                    }
                    Session.Clear();

                    //Orphan the child
                    C = P.Children.First();
                    P.Children.Remove(C);
                    C.Parent = null;

                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        //Orhpaned child should be deleted
                        Session.SaveOrUpdate(P);
                        Tran.Commit();
                    }
                    Session.Clear();

                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        P = Session.Get&lt;Parent&gt;(ID);

                        Assert.AreEqual(0, P.Children.Count);

                        Tran.Commit();

                    }
                }
            }
        }

    }


}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>354</wp:post_id>
		<wp:post_date>2009-08-22 07:24:35</wp:post_date>
		<wp:post_date_gmt>2009-08-22 13:24:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bidirectional-one-to-many-with-orphan-delete</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fluent-nhibernate"><![CDATA[Fluent NHibernate]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="category" nicename="nunit"><![CDATA[NUnit]]></category>
	</item>
	<item>
		<title>First Impression: Horn</title>
		<link>http://jasondentler.com/blog/2009/08/first-impression-horn/</link>
		<pubDate>Sat, 22 Aug 2009 22:20:59 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=360</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Horn is an open source project used to build other often-interdependent open source projects, such as <a href="http://nhforge.org" target="_blank">NHibernate</a>, Fluent NHibernate, NHContrib, the Castle suite of projects, MVCContrib, Rhino Tools, and Ninject. </p>  <p>This solves a couple of very common problems when working with the average ALT.NET stack. </p>  <ul>   <li>The dependency tree of the ALT.NET stack is a wind-whipped, gnarled, stunted cedar growing out of the side of a rock cliff. It twists and turns back on itself. It would be a monumental task to grab the correct version of all of these, whether that’s the latest trunk or a stable release, sort out the dependencies, and build them all by hand. </li>    <li>The precompiled releases of these projects don’t necessarily correspond to each other. NHContrib Validator might depend on a recent nightly build of NH while FNH v1 RC might depend on NH 2.1 GA. </li>    <li>Many of these projects have multi-step build processes. It’s not just a simple “F5” build. There may be codegen tasks, unit tests, assembly signing or any number of oddities. </li> </ul>  <p>When I published the first part of my series about setting up the solution, there was an issue where the assembly for <a href="http://ninject.org/" target="_blank">Ninject</a>’s ASP.NET MVC integration was only available from the trunk. I posted in the comments that the readers could either wait for me to post the source, including all the 3rd party libraries, or they could grab the source from the trunk and build it themselves. </p>  <p>The next day, I got a series of tweets from <a href="http://devlicio.us/blogs/tuna_toksoz" target="_blank">Tuna</a> (<a href="http://www.twitter.com/tehlike" target="_blank">@tehlike</a>) and <a href="http://www.twitter.com/dagda1" target="_blank">@dagda1</a> about <a href="http://groups.google.co.uk/group/horn-development" target="_blank">Horn</a>, so I read up on it. It looked cool, but I had just spent the afternoon updating everything and writing about it, so I was a bit burned out. Now that it’s been two weeks, there are a couple of projects in the stack that need to be updated. FNH released v1 RC (Congratulations James!) and Ninject and MVCContrib also have some updates. </p>  <p>I also have two medium sized web apps at work that should be updated to the latest and greatest when we move them from a VPC to a physical server next month. I’m hoping Horn will save me from .NET’s version of DLL HELL. </p>  <p>If you want more info, check out the <a href="http://groups.google.co.uk/group/horn-development" target="_blank">discussion group</a>, or just grab the <a href="http://code.google.com/p/hornget/" target="_blank">source code</a>. Horn even has its own <a href="http://code.google.com/p/horn-contrib/" target="_blank">contrib project</a>. </p>  <p>Here are my thoughts:</p>  <p>Very first impression – It’s an awesome idea, but it needs a lot more SEO. To find it, I had to search in Google code. Hopefully, this post will help with that. If you’ve got a blog (and you should) and you use Horn, write about it. It deserves great press.</p>  <p>I grabbed the latest source from their Google Code SVN. In the /src directory, there’s a hornbuild.bat. I fired up a command prompt, changed directories and ran it. 20 seconds later, I had it - /src/build/net-3.5/debug/horn.exe. </p>  <p>From there, I started grabbing everything I needed</p>  <pre>horn –install:fluentnhibernate
horn -install:ninject
horn -install:mvccontrib</pre>

<p>Well, that’s what I had planned. I got a BadImageException on SharpSvn when trying to grab FNH. After trying a few things on my own, I tweeted for help. <a href="http://devlicio.us/blogs/tuna_toksoz" target="_blank">Tuna</a>, who I’ve decided is either stalking me or involved in every .NET open source project out there, suggested checking the assemblies with the corflags utility. If you’re new to corflags, like I was, it’s in C:Program FilesMicrosoft SDKsWindowsv6.0ABin and part of the Windows SDK. As it turns out, horn.exe and horn.core.dll in my particular build were not marked as 32-bit. I marked them both as 32-bit with these commands:</p>

<pre>corflags horn.exe /32BIT+
corflags horn.core.dll /32BIT+</pre>

<p>I tried it again. Success! It started by grabbing the castle project, then built it. Then it moved on the NHibernate, and finally Fluent NHibernate. </p>

<p>In the end, the only project out of the three that didn’t work 100% was Ninject. The build for it’s monorail integration had an issue signing the assembly. Since I’m not using monorail, much less Ninject’s monorail integration, I commented that out of the .build file and tried it again. It worked perfectly.</p>

<p>Horn is still a little rough around the edges. For example, when a build fails, horn crashes out to windows error reporting. Even with those issues, it has saved me a lot of time. It’s a great idea and even at this early stage, it’s an amazing tool.</p>

<p>Thanks again to Tuna for answering my stupid questions.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>360</wp:post_id>
		<wp:post_date>2009-08-22 16:20:59</wp:post_date>
		<wp:post_date_gmt>2009-08-22 22:20:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>first-impression-horn</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>129</wp:comment_id>
			<wp:comment_author><![CDATA[Twitter Trackbacks for First Impression: Horn « BASICly everything [jasondentler.com] on Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/tb/bit.ly/r7cua</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2009-08-24 05:50:11</wp:comment_date>
			<wp:comment_date_gmt>2009-08-24 11:50:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] First Impression: Horn « BASICly everything  jasondentler.com/blog/2009/08/first-impression-horn &ndash; view page &ndash; cached  #BASICly everything RSS Feed BASICly everything Atom Feed BASICly everything » First Impression: Horn Comments Feed BASICly everything Hello World! Bidirectional One-to-many with Orphan Delete &mdash; From the page [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>130</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-08-31 12:13:13</wp:comment_date>
			<wp:comment_date_gmt>2009-08-31 18:13:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I tried to use Horn after the reference in your NStack part 6 article, but it repeatedly blew up trying to build Castle, which seems to be required for everything.  But more importantly was the WAY it blew up.  Repeatedly, Windows gave a message about some file in the Castle working directory being corrupt and unreadable, and finished "Please run CHKDSK".  And when I restarted Windows, it did indeed say that my disks were corrupted and needed to run chkdsk (it didn't find any failures.)

I am more than a little shy about using a tool that has the capability to write to the disk in a way that ends up requiring CHKDSK.  I think for the time being, I'll stick with downloading the latest versions by hand.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>131</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-31 12:34:12</wp:comment_date>
			<wp:comment_date_gmt>2009-08-31 18:34:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Dave - Sorry about the bad experience. I suggest you post this to the developer google group. However, this will be a non-issue in the near future. @hhariri and iMeta have offered the horn guys some server space. They'll keep the builds up to date and you'll just download the results from the 'net.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>130</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Fluent NHibernate upgrade to v1 RC gotchas</title>
		<link>http://jasondentler.com/blog/2009/08/fluent-nhibernate-upgrade-to-v1-rc-gotchas/</link>
		<pubDate>Thu, 27 Aug 2009 00:29:15 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2009/08/fluent-nhibernate-upgrade-to-v1-rc-gotchas/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In a project I’m doing at work, I have a rather large table-per-subclass hierarchy. When I upgraded the reference to Fluent NHibernate v1 RC, it immediately broke. This was expected. Many of the mapping method names have been shortened. For example, WithLengthOf is now just Length. ColumnName is now just Column. I think this is great. </p>  <p>One thing I wasn’t expecting was the change in JoinedSubclass. The method is deprecated. It still works –mostly. Since the issues this causes are pretty obscure, I’m trying to get the word out to save someone else the same headaches. Isn’t that what a programming blog is really about? I mean, besides all that other stuff like fame and riches.</p>  <p>There are two issues:</p>  <ol>   <li>The newly deprecated JoinedSubclass ignores mappings without mapped properties. This was an issue for me since I had two mapped classes that inherited all of their properties from the base class but implemented their own behavior. After the upgrade, neither of these were included in my mapping. To correct this, upgrade to SubclassMap – everywhere (see #2). </li>    <li>You cannot mix JoinedSubclass with the new SubclassMap in the same <a href="http://nhforge.org" target="_blank">NHibernate</a> configuration. JoinedSubclass messes up some internal state with SubclassMap. If you use both, you will get an incomplete configuration exception with a null reference exception inside. </li> </ol>  <p>#2 was especially bad for me because I assumed the exception was because I was using SubclassMap incorrectly. I rolled back my code twice before deciding just to go for it. When I replaced my last JoinedSubclass it all magically started working. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>369</wp:post_id>
		<wp:post_date>2009-08-26 18:29:15</wp:post_date>
		<wp:post_date_gmt>2009-08-27 00:29:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fluent-nhibernate-upgrade-to-v1-rc-gotchas</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fluent-nhibernate"><![CDATA[Fluent NHibernate]]></category>
		<wp:comment>
			<wp:comment_id>132</wp:comment_id>
			<wp:comment_author><![CDATA[Brian Sullivan &raquo; Blog Archive &raquo; Subclass Difficulties Upgrading to Fluent NHibernate RC 1 - From one geek to another]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.sullivansoftdev.com/blog/2009/08/27/subclass-difficulties-upgrading-to-fluent-nhibernate-rc-1/</wp:comment_author_url>
			<wp:comment_author_IP>67.205.62.185</wp:comment_author_IP>
			<wp:comment_date>2009-08-27 06:55:08</wp:comment_date>
			<wp:comment_date_gmt>2009-08-27 12:55:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] stumbled across Jason Dentler&#8217;s post on the problems he had upgrading his code to the Release Candidate of Fluent NHibernate today, [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Part 6: Ninject and MVC or How to be a Web Ninja</title>
		<link>http://jasondentler.com/blog/2009/08/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja/</link>
		<pubDate>Sat, 29 Aug 2009 00:03:32 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=370</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="border-right-width: 0px; margin: 10px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" border="0" alt="Ninject" align="left" src="http://kohari.org/wp-content/themes/thesis_151/custom/images/ninject-logo.png" />Nope. I don’t mean <a href="http://askaninja.com/" target="_blank">this guy</a>. He’s cool – well, maybe, maybe not - but I was thinking less comedic assassin and more dependency injection (DI.) <a href="http://ninject.org/" target="_blank">Ninject</a> is the illegitimate brain child of <a href="http://kohari.org/" target="_blank">Nate Kohari</a>, and the subject of today’s post. For those of you looking for another NHibernate fix, we’ll set up session-per-request in part 7.</p>  <p>If you’re new here, you can check out <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">Part 1</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/" target="_blank">Part 2</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/" target="_blank">Part 3</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/" target="_blank">Part 4</a>, and <a href="http://jasondentler.com/blog/2009/08/part-5-fixing-the-broken-stuff/" target="_blank">Part 5</a> to catch up. Grab the latest source from the end of Part 5.</p>  <p>If you remember back in the part 1, I said we’d be using Ninject v1. I lied. We’ll be using v1.5. This is the version built by <a href="http://groups.google.co.uk/group/horn-development" target="_blank">horn</a>, and the version that includes Ninject.Framework.MVC.dll. Save yourself some time. Go get the source for horn, build it, and then let horn build Ninject, Fluent NHibernate, and MVCContrib. </p>  <p>Let’s talk about Ninject’s constructor dependency injection. Say you have an AccountBuilder object that builds up a user account object from some fields on a “new user” form and saves it to the database. That’s a pretty complicated task for just one object. You should split off the persistence responsibility to a DAO or Repository and the password hashing / encryption to a password service. The AccountBuilder doesn’t care how the DAO saves the data, just that it does. It also doesn’t care how the password is secured. AccountBuilder has a dependency on each of these services. If ever there was a time to code to interfaces, this is it. The constructor looks like this:</p>  <pre class="brush:vbnet">Public Sub New(DAO As ISaveUserAccounts, PwdHasher As IHashPasswords)</pre>

<pre class="brush:csharp">public AccountBuilder(ISaveUserAccounts DAO, IHashPasswords PwdHasher)</pre>

<p>The details of the constructor aren’t important, only the signature. AccountBuilder is a concrete type, meaning we can create an instance of it, so Ninject can auto self-bind it. We don’t have to tell Ninject ahead of time that it will be creating an AccountBuilder for us. When we ask Ninject to get an AccountBuilder for us, it checks to see if it has a binding for it (more on that in a minute). Since it doesn’t, it checks to see if it can create an object of type AccountBuilder. Since AccountBuilder isn’t abstract (MustInherit in VB.NET) or an interface, Ninject decides that it will just create an AccountBuilder for us. </p>

<p>it goes through all the constructors searching for one with the Inject attribute or the one with the most parameters. Once it’s decided on a constructor, it tries to resolve each of those parameters. Let’s say for a minute that instead of the interfaces, we had specified the actual concrete implementations as parameters. Ninject would resolve each of those the same way it is resolving AccountBuilder. It goes on and on recursively as deep as necessary to resolve each and every dependency until it has instances of DAO and PasswordHasher to use as parameters for the AccountBuilder constructor. Finally, it calls the constructor with those parameters and gives us our AccountBuilder. </p>

<p>Now, because we’ve coded to interfaces, we have to tell Ninject exactly which implementation of those interfaces we want to use. So, we tell Ninject that each time anything needs an ISaveUserAccounts, build up a new instance of UserAccountDAO. It has to be a new instance each time, because UserAccountDAO depends on NHibernate.ISession, which isn’t constant throughout the application. We’ll bind ISession to a Ninject provider. You’ll see an example of that in our application in part 7. The binding for ISaveUserAccounts looks like this:</p>

<pre class="brush:vbnet">        Bind(Of ISaveUserAccounts).To(Of UserAccountDAO)()</pre>

<pre class="brush:csharp">        Bind&lt;ISaveUserAccounts&gt;().To&lt;UserAccountDAO&gt;();</pre>

<p>The password hasher service can be handled a little differently. Let’s suppose for a minute that encryption algorithms can be fairly heavy-weight. We don’t want to build the algorithm over and over, possibly thousands or millions of times an hour on a popular site. Even if it doesn’t bring the site to a screeching halt, it would slow it down significantly. Since the algorithm is reusable, we’re only going to build one for our entire application. Of course, your first thought is “the evil singleton anti-pattern.” Would I do that to you? Well yes, but not intentionally. We are going to create an instance of our PasswordHasher and tell Ninject to pass it out anytime our application needs an implementation of IHashPasswords. The binding looks like this:</p>

<pre class="brush:vbnet">        Bind(Of IHashPasswords).ToConstant(New PasswordHasher)()</pre>

<pre class="brush:csharp">        Bind&lt;IHashPasswords&gt;().ToConstant(New PasswordHasher());</pre>

<p>Of course, if you use just one instance across your entire web, WPF, or multi-threaded application, PasswordHasher will almost certainly need to be thread-safe, but that’s another series of posts. </p>

<p>Now that Ninject knows what implementations to use for those parameters of our AccountBuilder constructor, it builds a new UserAccountDAO, grabs our one-and-only instance of PasswordHasher, calls the constructor and gives us our AccountBuilder. Of course, this is still a pretty basic example.</p>

<p>Now let’s look at <a href="http://www.asp.net/mvc/" target="_blank">ASP.NET MVC</a>. Up to this point in the series, we’ve talked a lot about the model. Now it’s time to talk about controllers. Controllers in an MVC application manage the flow of your application from view to view, call in to the model to perform actions, and pass data between the model and the views. </p>

<p>Suppose our AccountBuilder is actually a service consumed by our Account controller to carry out the work of registering a new user account. If you’re new to this, you may think that we’re just going to somehow pass in the Ninject kernel to our controller and get our AccountBuilder from there. While I don’t recommend it, you can do that. You’ll essentially end up with the ServiceLocator pattern. We’re going to take this to what may seem an illogical or even perverse extreme. Why not let Ninject build your controllers and inject all of your dependencies? You won’t have any ServiceLocator clutter in your controllers. At least as far as user code goes, the controller is near the bottom of the call stack. You’re in this perfect world where EVERYTHING is injected for you. Let that sink in for a minute. You don’t have to new up a single service ever again. Just ask for it in the constructor wherever you need it. Of course, that’s an absolute and absolutes are evil for the same reason singletons are – you can’t easily prove them with tests. </p>

<p>But wait, doesn’t ASP.NET MVC build the controllers? Yes it does, but it doesn’t have to. Deep inside the mother ship, apparently while hiding from that guy who invented the sealed keyword, <a href="http://haacked.com" target="_blank">Haacked</a> and Co.&#160; built all sorts of extension points in to ASP.NET MVC. One of these extension points happens to be the ability to replace the default controller factory using ControllerBuilder.Current.SetControllerFactory. Just supply the type of your new controller factory implementation. </p>

<p>So, you set up a controller factory to resolve the controllers using Ninject and register all of your controllers with the kernel, right? Wrong. Well, not exactly. Ninject.Framework.MVC has all of that pre-built for you – just use it. Ninject actually has an implementation of HttpApplication that will set up all of this for you. In your Global.asax codebehind file, inherit from Ninject.Framework.Mvc.NinjectHttpApplication. You’ll still have to register your routes. You also have to build the Ninject kernel with all of your ninject modules. </p>

<p>A ninject module is a class that sets up your bindings. So for instance, if you have a module for binding your DAO interfaces to their implementations, it might look something like this:</p>

<pre class="brush:vbnet">Public Class DaoModule
     Inherits StandardModule

     Public Overrides Sub Load()
          Bind(Of ISaveUserAccounts)().To(Of UserAccountDao)()
          Bind(Of ILookupUserAccounts)().To(Of UserAccountDao)()
          Bind(Of IUserAccountDao)().To(Of UserAccountDao)()
          Bind(Of ISaveContacts)().To(Of ContactDao)()
          ' and so on...
     End Sub

End Class</pre>

<pre class="brush:csharp">public class DaoModule : StandardModule
{
    public override void Load()
    {
        Bind&lt;ISaveUserAccounts&gt;().To&lt;UserAccountDAO&gt;();
        Bind&lt;ILookupUserAccounts&gt;().To&lt;UserAccountDAO&gt;();
        Bind&lt;IUserAccountDao&gt;().To&lt;UserAccountDAO&gt;();
        Bind&lt;ISaveContacts&gt;().To&lt;ContactDAO&gt;();
        // and so on...
    }
}</pre>

<p>Of course, we haven’t built any DAOs to bind yet. We haven’t built any controllers to bind yet either. That brings up another point. If there is a single point of constant change during the development of your application, it will most likely be the controllers. Will you always remember to bind new controllers as you build them? Yeah, neither will I. Wouldn’t it be nice if Ninject just went looking for them instead? That’s exactly what AutoControllerModule is for. Just point it at an assembly. It will find all of your controllers and wire them in to Ninject and its controller factory. </p>

<p>At this stage, our Global.asax codebehind looks something like this:</p>

<pre class="brush:vbnet">Imports Ninject.Framework.Mvc
Imports Ninject.Core

Public Class MvcApplication
    Inherits NinjectHttpApplication

    Protected Overrides Function CreateKernel() As Ninject.Core.IKernel
        Dim ControllerModule As New AutoControllerModule( _
            GetType(NStackExample.Controllers.BaseController).Assembly)
        Dim Kernel As IKernel = New StandardKernel(ControllerModule)
        Return Kernel
    End Function

    Protected Overrides Sub RegisterRoutes(ByVal routes As System.Web.Routing.RouteCollection)
        routes.IgnoreRoute(&quot;{resource}.axd/{*pathInfo}&quot;)

        ' MapRoute takes the following parameters, in order:
        ' (1) Route name
        ' (2) URL with parameters
        ' (3) Parameter defaults
        routes.MapRoute( _
            &quot;Default&quot;, _
            &quot;{controller}/{action}/{id}&quot;, _
            New With {.controller = &quot;Home&quot;, .action = &quot;Index&quot;, .id = &quot;&quot;} _
        )
    End Sub

End Class</pre>

<p>If you don’t want Ninject invading your application that deeply, with a good understanding of Ninject and controller factories, you can easily do all of this by hand. Still, I’m pretty confident Nate wrote better code and tests than most of us would have. </p>

<p>That’s it for part 6. In part 7, we’ll wire up <a href="http://nhforge.org" target="_blank">NHibernate</a> to Ninject, talk about our options for session handling in a web app, and set up session-per-request. With a bit of luck, part 7 will be out this weekend.&#160; </p>

<p>Once again, these are just my practices, not necessarily best practices. As always, feedback welcome, flames by appointment only. </p>

<p>Jason
  <br />- 6 down, 52 to go. maybe. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>370</wp:post_id>
		<wp:post_date>2009-08-28 18:03:32</wp:post_date>
		<wp:post_date_gmt>2009-08-29 00:03:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>part-6-ninject-and-mvc-or-how-to-be-a-web-ninja</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net-mvc"><![CDATA[ASP.NET MVC]]></category>
		<category domain="category" nicename="ninject"><![CDATA[Ninject]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>133</wp:comment_id>
			<wp:comment_author><![CDATA[Part 7: NHibernate and Ninject for ASP.NET MVC &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/08/part-7-nhibernate-and-ninject-for-asp-net-mvc/</wp:comment_author_url>
			<wp:comment_author_IP>72.167.131.46</wp:comment_author_IP>
			<wp:comment_date>2009-08-29 14:43:53</wp:comment_date>
			<wp:comment_date_gmt>2009-08-29 20:43:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] part 6, I explained how to set up Ninject with ASP.NET MVC. In this part, we’ll add NHibernate to the [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>134</wp:comment_id>
			<wp:comment_author><![CDATA[Part 7: NHibernate and Ninject for ASP.NET MVC - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/08/29/part-7-nhibernate-and-ninject-for-asp-net-mvc.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-08-29 14:48:04</wp:comment_date>
			<wp:comment_date_gmt>2009-08-29 20:48:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] part 6, I explained how to set up Ninject with ASP.NET MVC. In this part, we’ll add NHibernate to the [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>135</wp:comment_id>
			<wp:comment_author><![CDATA[Twitted by elijahmanor]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://realurl.org/twitted.php?id=3669167560</wp:comment_author_url>
			<wp:comment_author_IP>94.23.51.159</wp:comment_author_IP>
			<wp:comment_date>2009-08-31 11:03:54</wp:comment_date>
			<wp:comment_date_gmt>2009-08-31 17:03:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was Twitted by elijahmanor [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>136</wp:comment_id>
			<wp:comment_author><![CDATA[Twitter Trackbacks for Part 6: Ninject and MVC or How to be a Web Ninja « BASICly everything [jasondentler.com] on Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/tb/jasondentler.com/blog/2009/08/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja/</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2009-08-31 14:17:59</wp:comment_date>
			<wp:comment_date_gmt>2009-08-31 20:17:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Part 6: Ninject and MVC or How to be a Web Ninja « BASICly everything  jasondentler.com/blog/2009/08/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja &ndash; view page &ndash; cached  #BASICly everything RSS Feed BASICly everything Atom Feed BASICly everything » Part 6: Ninject and MVC or How to be a Web Ninja Comments Feed BASICly everything Hello World! Fluent NHibernate upgrade to v1 RC gotchas Fluent NHibernate v1 released &mdash; From the page [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>137</wp:comment_id>
			<wp:comment_author><![CDATA[Anthony]]></wp:comment_author>
			<wp:comment_author_email>anthony@kilhoffer.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.249.159.159</wp:comment_author_IP>
			<wp:comment_date>2009-09-02 09:40:06</wp:comment_date>
			<wp:comment_date_gmt>2009-09-02 15:40:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm a Horn noob, so I'm having a hard time piecing together what I need to build Ninject 1.5 with the other assemblies you mention. You stated that we should do ourselves a favor and download the Horn source and build it, but the current version doesnt build a Ninject assembly. Guess I'll have to figure out how to add Ninject to it's list of packages?

Anyway, great series. I'm getting into it a bit late, but it's a great help in melding together a good DI framework and nHibernate with MVC. Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>138</wp:comment_id>
			<wp:comment_author><![CDATA[Anthony]]></wp:comment_author>
			<wp:comment_author_email>anthony@kilhoffer.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.249.159.159</wp:comment_author_IP>
			<wp:comment_date>2009-09-02 09:47:25</wp:comment_date>
			<wp:comment_date_gmt>2009-09-02 15:47:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome. Nevermind....it does actually build the current version of Ninject. I just wasn't familiar enough with Horn.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>137</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>139</wp:comment_id>
			<wp:comment_author><![CDATA[Gregory]]></wp:comment_author>
			<wp:comment_author_email>2bhere4u@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://set4u.biz/</wp:comment_author_url>
			<wp:comment_author_IP>194.56.215.66</wp:comment_author_IP>
			<wp:comment_date>2009-09-06 02:25:02</wp:comment_date>
			<wp:comment_date_gmt>2009-09-06 08:25:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey! I am new here. It's very cool what you are doing here. I've stambled at the 
The type or namespace name 'RouteCollection' could not be found (are you missing a using directive or an assembly reference?)	C:Projects..Mvc....Mvc..WebGlobal.asax.cs

Also had a problem with 
The type or namespace name 'MvcHttpHandler' could not be found (are you missing a using directive or an assembly reference?)	C:Projects..Mvc....Mvc..WebDefault.aspx.cs

So the solution , at the end was very simple , I had to add 
using System.Web.Routing;
using System.Web.Mvc; 
at Global.asax.cs 
and 
using System.Web.Mvc; 
at Default.aspx.cs .
I'll keep going now :) Thanks again!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>140</wp:comment_id>
			<wp:comment_author><![CDATA[Jonathan]]></wp:comment_author>
			<wp:comment_author_email>jonathan@watchfinder.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.watchfinder.co.uk</wp:comment_author_url>
			<wp:comment_author_IP>93.96.162.218</wp:comment_author_IP>
			<wp:comment_date>2009-09-06 13:38:25</wp:comment_date>
			<wp:comment_date_gmt>2009-09-06 19:38:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[HI

Anyone else having trouble getting horn to build Ninject ?  I have tried 4 different machines now and every time the end result is "The build tool Horn.Core.NAntBuildTool failed building the ninject package"  is this just me ?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>141</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-09-07 03:58:08</wp:comment_date>
			<wp:comment_date_gmt>2009-09-07 09:58:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Jonathan = Please post this to the Horn google group. They need to know about issues like this.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>140</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>142</wp:comment_id>
			<wp:comment_author><![CDATA[Jonathan Adams]]></wp:comment_author>
			<wp:comment_author_email>jonathan@watchfinder.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.watchfinder.co.uk</wp:comment_author_url>
			<wp:comment_author_IP>82.45.127.69</wp:comment_author_IP>
			<wp:comment_date>2009-09-07 04:14:37</wp:comment_date>
			<wp:comment_date_gmt>2009-09-07 10:14:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Will do Jason :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>141</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>143</wp:comment_id>
			<wp:comment_author><![CDATA[Part 8: DAOs, Repositories, or Query Objects &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/09/part-8-daos-repositories-or-query-objects/</wp:comment_author_url>
			<wp:comment_author_IP>208.109.181.13</wp:comment_author_IP>
			<wp:comment_date>2009-09-07 13:52:04</wp:comment_date>
			<wp:comment_date_gmt>2009-09-07 19:52:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 8 is about abstracting NHibernate. Catch up by reading Part 1, Part 2, Part 3, Part 4, Part 5, Part 6, and Part 7.  Warning: This post will contain an extraordinary number of links. They will lead you [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>144</wp:comment_id>
			<wp:comment_author><![CDATA[Part 8: DAOs, Repositories, or Query Objects - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/09/07/part-8-daos-repositories-or-query-objects.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-09-07 14:18:25</wp:comment_date>
			<wp:comment_date_gmt>2009-09-07 20:18:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 8 is about abstracting NHibernate. Catch up by reading Part 1, Part 2, Part 3, Part 4, Part 5, Part 6, and Part 7.  Warning: This post will contain an extraordinary number of links. They will lead you [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>145</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-09-07 16:16:50</wp:comment_date>
			<wp:comment_date_gmt>2009-09-07 22:16:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It looks like @dagda1 and @tehlike may have fixed your issue.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>142</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>146</wp:comment_id>
			<wp:comment_author><![CDATA[Part 9: NHibernate transactions &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/09/part-9-nhibernate-transactions/</wp:comment_author_url>
			<wp:comment_author_IP>208.109.181.13</wp:comment_author_IP>
			<wp:comment_date>2009-09-08 07:22:29</wp:comment_date>
			<wp:comment_date_gmt>2009-09-08 13:22:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] you’re new to the series, you can read Part 1, Part 2, Part 3, Part 4, Part 5, Part 6, Part 7, and Part 8 to catch [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>147</wp:comment_id>
			<wp:comment_author><![CDATA[Part 9: NHibernate transactions - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/09/08/part-9-nhibernate-transactions.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-09-08 07:26:37</wp:comment_date>
			<wp:comment_date_gmt>2009-09-08 13:26:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] you’re new to the series, you can read Part 1, Part 2, Part 3, Part 4, Part 5, Part 6, Part 7, and Part 8 to catch [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Fluent NHibernate v1 released</title>
		<link>http://jasondentler.com/blog/2009/08/fluent-nhibernate-v1-released/</link>
		<pubDate>Sat, 29 Aug 2009 01:12:34 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2009/08/fluent-nhibernate-v1-released/</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://nhforge.org/blogs/nhibernate/archive/2009/08/29/fluent-nhibernate-1-0.aspx" target="_blank">Fluent NHibernate v1 was just released</a>. Congratulations to James Gregory and the rest of the FNH team. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>371</wp:post_id>
		<wp:post_date>2009-08-28 19:12:34</wp:post_date>
		<wp:post_date_gmt>2009-08-29 01:12:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fluent-nhibernate-v1-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fluent-nhibernate"><![CDATA[Fluent NHibernate]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Part 7: NHibernate and Ninject for ASP.NET MVC</title>
		<link>http://jasondentler.com/blog/2009/08/part-7-nhibernate-and-ninject-for-asp-net-mvc/</link>
		<pubDate>Sat, 29 Aug 2009 15:03:50 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=384</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In <a href="http://jasondentler.com/blog/2009/08/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja/" target="_blank">part 6</a>, I explained how to set up <a href="http://ninject.org/" target="_blank">Ninject</a> with <a href="http://www.asp.net/mvc/" target="_blank">ASP.NET MVC</a>. In this part, we’ll add <a href="http://nhforge.org" target="_blank">NHibernate</a> to the mix. Specifically, we’re going to set up session-per-request using a Ninject and bind all the necessary NHibernate interfaces.</p>  <p>Of course, for the sake of history, read up on <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">part 1</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/" target="_blank">part 2</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/" target="_blank">part 3</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/" target="_blank">part 4</a>, <a href="http://jasondentler.com/blog/2009/08/part-5-fixing-the-broken-stuff/" target="_blank">part 5</a>, and <a href="http://jasondentler.com/blog/2009/08/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja/" target="_blank">part 6</a>. <img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" border="0" align="left" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Components.SiteFiles/logos/NHLogoSmall.gif" width="240" height="56" /></p>  <p>If you aren’t familiar with NHibernate in an ASP.NET MVC application, the most common way to manage your sessions is to open one session per web request. Just about everything you need to know about session-per-request is explained in the content and comments of <a href="http://ayende.com/Blog/archive/2009/08/05/do-you-need-a-framework.aspx" target="_blank">this post</a> on Ayende’s blog, but I’ll summarize for you.</p>  <ul>   <li>While building a session factory may be a big operation, once it’s built, opening a session is lightweight. </li>    <li>Opening a session does not open a connection to the database </li>    <li>NHibernate has a built in method for doing session-per-request, but Ayende doesn’t use it for simple stuff and neither will we. When your application doesn’t do anything other than session-per-request, it’s just easier to do it this way. </li>    <li>Multiple business transactions and therefore multiple sessions in a single web request are usually not necessary, just because of how users tend to interact with the application. Even then, you can usually accomplish the same thing with multiple DB transactions on the same session. </li> </ul>  <p><img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" border="0" alt="SessionPerConversation" align="left" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/SessionPerConversation_5F00_thumb_5F00_7345BC5F.png" width="240" height="172" /></p>  <p>NHibernate Burrow is available to help with complex session management in web apps where session per conversation is used. Basically, this allows you to span your NHibernate sessions across several web requests. Just a quick note: If you disregarded everyone’s advice and used Identity (integer auto-number) ID fields, Burrow won’t work for you. If you want more information, check out the Burrow posts on NHForge. Also,&#160; <a href="http://nhforge.org/blogs/nhibernate/archive/2009/08/15/nhibernate-and-wpf-models-concept.aspx" target="_blank">Jose Romaniello’s uses Conversation per Business Transaction</a> in his NHibernate and WPF series on NHForge.org. It’s definitely worth a read.</p>  <p>OK. Back to session-per-request. I’m taking a slightly different approach than Ayende. Even though opening a session is lightweight, I don’t like the idea of opening a session for requests that may not use NHibernate at all. For example, in an application I’m building at work, only about 7 views out of nearly 50 actually use an NHibernate session. That’s a lot of unused sessions. </p>  <p>First things first, we need to make a Ninject module for all of our NHibernate bindings. Where are we going to put it? We have two options. We could put it in NStackExample.Data with all of our NHibernate mappings and configuration. We could also put it in NStackExample.Web. Like Ayende, we will be storing the NHibernate session in the context of the current web request and relying on our application’s EndRequest event to close the session. Since we’re unfortunately coupled to the web application, we’ll put it in the web project. </p>  <ol>   <li>In the web project, make a new folder called Code. </li>    <li>Make a class in that folder called NHibernateModule. </li>    <li>NHibernateModule should inherit from Ninject.Core.StandardModule. </li> </ol>  <p>The process of configuring NHibernate is a lot of work and only needs to be done once. Since our configuration object also creates the session factory, another potentially heavy operation, we kill two birds with one stone. The binding for our NHibernate configuration looks like this:</p>  <pre class="brush:vbnet">    Public Overrides Sub Load()
        Dim Cfg As New NStackExample.Data.Configuration
        Cfg.Configure()

        Bind(Of NStackExample.Data.Configuration).ToConstant(Cfg)
    End Sub</pre>

<pre class="brush:csharp&quot;">    public override void Load()
    {
        NStackExample.Data.Configuration Cfg = new NStackExample.Data.Configuration()
        Cfg.Configure();

        Bind<nstackexample.data.configuration>().ToConstant(Cfg);
    }</pre>

<p>ToConstant bindings essentially create singletons, at least within the scope of our Ninject kernel. Unlike true singletons, this isn’t evil because our tests are free to mock, replace, and re-implement them as necessary. </p>

<p>Now that we have NHibernate configured and our session factory built, we need to bind our NHibernate session. The scope of our session is somewhat complex (per-request). We could use the OnePerRequestBehavior of Ninject, but that <a href="http://stackoverflow.com/questions/536007/ninject-oneperrequestbehaviour-doesnt-seem-to-work-correctly" target="_blank">requires the registration of an IIS HTTP module</a>. Instead, we’ll just bind it to a method and manage it ourselves. This method will create up to one session per request. If a particular request doesn’t require a session, Ninject will never call the method, so an unnecessary session won’t be created. If a particular request asks for a session more than once, perhaps to build more than one DAO, the method will create a single session and use it throughout the web request. Here’s what our module looks like with the binding for our session:</p>

<pre class="brush:vbnet">    Friend Const SESSION_KEY As String = &quot;NHibernate.ISession&quot;

    Public Overrides Sub Load()
        Dim Cfg As New Configuration
        Cfg.Configure()

        Bind(Of Configuration).ToConstant(Cfg)
        Bind(Of NHibernate.ISession).ToMethod(AddressOf GetRequestSession)
    End Sub

    Private Function GetRequestSession(ByVal Ctx As IContext) As NHibernate.ISession
        Dim Dict As IDictionary = HttpContext.Current.Items
        Dim Session As NHibernate.ISession
        If Not Dict.Contains(SESSION_KEY) Then
            'Create an NHibernate session for this request
            Session = Ctx.Kernel.Get(Of Configuration)().OpenSession()
            Dict.Add(SESSION_KEY, Session)
        Else
            'Re-use the NHibernate session for this request
            Session = Dict(SESSION_KEY)
        End If
        Return Session
    End Function</pre>

<pre class="brush:csharp">        internal const string SESSION_KEY = &quot;NHibernate.ISession&quot;;

        public override void Load()
        {
            Configuration Cfg = new Configuration();
            Cfg.Configure();

            Bind&lt;Configuration&gt;().ToConstant(Cfg);
            Bind&lt;NHibernate.ISession&gt;().ToMethod(x =&gt; GetRequestSession(x));
        }

        private NHibernate.ISession GetRequestSession(IContext Ctx)
        {
            IDictionary Dict = HttpContext.Current.Items;
            NHibernate.ISession Session;
            if (!Dict.Contains(SESSION_KEY)) 
            {
                // Create an NHibernate session for this request
                Session = Ctx.Kernel.Get&lt;Configuration&gt;().OpenSession();
                Dict.Add(SESSION_KEY, Session);
            } else {
                // Re-use the NHibernate session for this request
                Session = (NHibernate.ISession) Dict[SESSION_KEY];
            }
            return Session;
        }</pre>

<p>All we have left to do is dispose our session at the end of the request. Let's go back to the Global.asax codebehind.</p>

<pre class="brush:vbnet">    Private Sub MvcApplication_EndRequest(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.EndRequest
        If Context.Items.Contains(NHibernateModule.SESSION_KEY) Then
            Dim Session As NHibernate.ISession = Context.Items(NHibernateModule.SESSION_KEY)
            Session.Dispose()
            Context.Items(NHibernateModule.SESSION_KEY) = Nothing
        End If
    End Sub</pre>

<pre class="brush:csharp">        public MvcApplication()
        {
            this.EndRequest += MvcApplication_EndRequest;
        }


        private void MvcApplication_EndRequest(object sender, System.EventArgs e)
        {
            if (Context.Items.Contains(NHibernateModule.SESSION_KEY))
            {
                NHibernate.ISession Session = (NHibernate.ISession) Context.Items[NHibernateModule.SESSION_KEY];
                Session.Dispose();
                Context.Items[NHibernateModule.SESSION_KEY] = null;
            }
        }</pre>

<p>To illustrate how this will work, I’ve made several additions to the code download. I’ve added a BaseController and HomeController so we can begin to run our web application. I’ve also added a IStudentDao and ICourseDao interfaces to the core project and corresponding implementations in the Data project. I’ve bound the DAO interfaces to their corresponding implementations and added debug statements to output exactly what’s happening with our session. Finally, I’ve set up a constructor in HomeController making it dependent on IStudentDao and ICourseDao. </p>

<p>When we run our application, we see from the debug output that the session is created when we create our IStudentDao. The session is reused to create our ICourseDao. This gives us everything we need to create the HomeController. The web request executes. When the request ends, the session is disposed. If you remove one of the Dao dependencies from HomeController, you’ll see that our session is created. It’s not reused because nothing else needs a session. If you remove both of the Dao dependencies from HomeController, you’ll see that our session is never even created. Since we didn’t create a session, we don’t dispose it when the web request ends.</p>

<p>That’s all for part 7. In part 8, we’ll wrap the NHibernate transaction for use in our controllers project and build a real DAO or two. </p>

<p>Get your code here! We have <a href="http://www.jasondentler.com/downloads/NStackExample.Part7.VBNET.zip" target="_blank">VB.NET</a> and <a href="http://www.jasondentler.com/downloads/NStackExample.Part7.CSharp.zip" target="_blank">CSharp</a> flavored bits. </p>

<p>Jason
  <br />- NHibernating Ninja Wannabe</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>384</wp:post_id>
		<wp:post_date>2009-08-29 09:03:50</wp:post_date>
		<wp:post_date_gmt>2009-08-29 15:03:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>part-7-nhibernate-and-ninject-for-asp-net-mvc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net-mvc"><![CDATA[ASP.NET MVC]]></category>
		<category domain="category" nicename="fluent-nhibernate"><![CDATA[Fluent NHibernate]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="category" nicename="ninject"><![CDATA[Ninject]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>148</wp:comment_id>
			<wp:comment_author><![CDATA[DotNetShoutout]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dotnetshoutout.com/Part-7-NHibernate-and-Ninject-for-ASPNET-MVC-Jason-Dentler</wp:comment_author_url>
			<wp:comment_author_IP>206.72.113.4</wp:comment_author_IP>
			<wp:comment_date>2009-08-31 13:34:52</wp:comment_date>
			<wp:comment_date_gmt>2009-08-31 19:34:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Part 7: NHibernate and Ninject for ASP.NET MVC - Jason Dentler...</strong>

Thank you for submitting this cool story - Trackback from DotNetShoutout...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>149</wp:comment_id>
			<wp:comment_author><![CDATA[Jorgas]]></wp:comment_author>
			<wp:comment_author_email>jorgen.g.andersson@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.233.118.82</wp:comment_author_IP>
			<wp:comment_date>2009-08-31 15:59:28</wp:comment_date>
			<wp:comment_date_gmt>2009-08-31 21:59:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excellent article series! I'll be following your future posts as well.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>150</wp:comment_id>
			<wp:comment_author><![CDATA[Part 8: DAOs, Repositories, or Query Objects &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/09/part-8-daos-repositories-or-query-objects/</wp:comment_author_url>
			<wp:comment_author_IP>208.109.181.13</wp:comment_author_IP>
			<wp:comment_date>2009-09-07 13:53:35</wp:comment_date>
			<wp:comment_date_gmt>2009-09-07 19:53:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] About                   &laquo; Part 7: NHibernate and Ninject for ASP.NET MVC [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>151</wp:comment_id>
			<wp:comment_author><![CDATA[Part 8: DAOs, Repositories, or Query Objects - NHibernate blog - NHibernate Forge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nhforge.org/blogs/nhibernate/archive/2009/09/07/part-8-daos-repositories-or-query-objects.aspx</wp:comment_author_url>
			<wp:comment_author_IP>190.7.31.158</wp:comment_author_IP>
			<wp:comment_date>2009-09-07 16:36:42</wp:comment_date>
			<wp:comment_date_gmt>2009-09-07 22:36:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] abstracting NHibernate. Catch up by reading Part 1, Part 2, Part 3, Part 4, Part 5, Part 6, and Part 7.  Warning: This post will contain an extraordinary number of links. They will lead you to the [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Part 8: DAOs, Repositories, or Query Objects</title>
		<link>http://jasondentler.com/blog/2009/09/part-8-daos-repositories-or-query-objects/</link>
		<pubDate>Sat, 05 Sep 2009 22:13:25 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=402</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Part 8 is about abstracting <a href="http://nhforge.org" target="_blank">NHibernate</a>. Catch up by reading <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">Part 1</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/" target="_blank">Part 2</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/" target="_blank">Part 3</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/" target="_blank">Part 4</a>, <a href="http://jasondentler.com/blog/2009/08/part-5-fixing-the-broken-stuff/" target="_blank">Part 5</a>, <a href="http://jasondentler.com/blog/2009/08/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja/" target="_blank">Part 6</a>, and <a href="http://jasondentler.com/blog/2009/08/part-7-nhibernate-and-ninject-for-asp-net-mvc/" target="_blank">Part 7</a>. </p>  <div><em><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" border="0" align="left" src="http://commons.wikimedia.org/w/thumb.php?f=Nuvola%20apps%20important%20yellow.svg&amp;width=200px" width="100" height="84" />Warning: This post will contain an extraordinary number of links. They will lead you to the opinions of very smart people™. Click them. Read them. Learn something new.</em></div>  <div>There is no one best practice. I know. I googled for it. It seems there are just as many patterns as there are anti-patterns. In fact, these days we’re not even clear <a href="http://msdn.microsoft.com/en-us/library/aa973811.aspx" target="_blank">which</a> is <a href="http://ayende.com/Blog/archive/2009/04/17/repository-is-the-new-singleton.aspx" target="_blank">which</a>. There are <a href="http://codebetter.com/blogs/gregyoung/archive/2009/04/23/repository-is-dead-long-live-repository.aspx" target="_blank">differing opinions</a> all <a href="http://www.udidahan.com/2007/03/28/query-objects-vs-methods-on-a-repository/" target="_blank">over</a> the <a href="http://geekswithblogs.net/Billy/archive/2006/02/15/69607.aspx" target="_blank">place</a>.</div>  <h3>What are my options?</h3>  <p><a href="http://martinfowler.com/eaaCatalog/repository.html" target="_blank">Repositories</a></p>  <ul>   <li><a href="http://twitter.com/sbohlen" target="_blank">Steve Bohlen</a> uses the repository pattern. </li>    <li><a href="http://twitter.com/jfroma" target="_blank">José Romaniello</a> <a href="http://jfromaniello.blogspot.com/2009/08/chinook-media-manager-core.html" target="_blank">uses repositories</a> in his Chinook Media Manager sample on NHForge.org </li>    <li><a href="http://twitter.com/ayende" target="_blank">Ayende</a> <a href="http://msdn.microsoft.com/en-us/library/aa973811.aspx" target="_blank">loved repositories in 2006</a>, but not anymore. </li> </ul>  <p><a href="http://java.sun.com/blueprints/corej2eepatterns/Patterns/DataAccessObject.html" target="_blank">Data Access Objects</a>:</p>  <ul>   <li><a href="http://fabiomaulo.blogspot.com/" target="_blank">Fabio Maulo</a> <a href="http://ayende.com/Blog/archive/2009/04/17/repository-is-the-new-singleton.aspx#30272" target="_blank">uses DAOs</a> with query objects. </li>    <li><a href="http://twitter.com/tehlike" target="_blank">Tuna Toksoz</a> uses DAOs with FindBy methods </li> </ul>  <p><a href="http://martinfowler.com/eaaCatalog/queryObject.html" target="_blank">Query objects</a>:</p>  <li>In early 2009, Ayende posted that he <a href="http://ayende.com/Blog/archive/2009/04/17/repository-is-the-new-singleton.aspx" target="_blank">no longer likes repositories,</a> and has switched to query objects which expose raw NHibernate&#160; ICriteria. </li>  <li><a href="http://twitter.com/udidahan" target="_blank">Udi Dahan</a> also prefers <a href="http://www.udidahan.com/2007/03/28/query-objects-vs-methods-on-a-repository/" target="_blank">query objects</a>     <p>One note about all of this: Repositories and DAOs can both be used with query objects or simple FindBy methods. Query objects can also be used on their own.</p>    <h3>What’s the score? </h3>    <p>The experts don’t agree, so use whatever you think will work best for your application and your team. By the way, if you’re not following all of these people on twitter, go follow them now.</p>    <p>If you’re looking for a good NHibernate repository sample, check out <a href="http://nhforge.org/wikis/howtonh/your-first-nhibernate-based-application.aspx" target="_blank">Your First NHibernate based application</a> by Gabriel Schenker on the NHForge wiki, or José’s Chinook WPF app. </p>    <p>In this sample application, we’re going to use Data Access Objects. The pattern is simple and well known. This application is small and we won’t have many queries, so we’ll use DAOs with FindBy methods. In a large project, such as an ERP, I would use query objects. </p>    <h3>Splitting the CRUD</h3>    <p>CRUD stands for create, read/retrieve, update, and delete/destroy. which correspond to SQL INSERT, SELECT, UPDATE, and DELETE respectively. </p>    <p>Suppose we’re tracking down an issue in our system where the customer’s middle name was being erased from the database. You start with the most likely locations such as the round trip through the customer update view. No luck. You’ll have to dig in deeper.</p>    <p>We’re using constructor dependency injection throughout our application. Our DAO is defined by the interface IDAO&lt;T&gt;. If you saw some object with a dependency of IDAO&lt;Customer&gt;, you would assume that it performs some database action on customer, so it would be a candidate for deeper investigation. Of course, without diving in to the code, you wouldn’t know what it actually does to customer. </p>    <p>As it turns out 95% of the uses of IDAO&lt;Customer&gt; only display customer data. They don’t actually change anything. You just wasted a LOT of time digging through code that couldn’t possibly cause your bug.</p>    <p>Now suppose you had split your IDAO interface to allow more fine-grained dependencies. Instead of IDAO&lt;T&gt;, you now have ICreate&lt;T&gt;, IRead&lt;T&gt;, IUpdate&lt;T&gt;, and IDelete&lt;T&gt;. When searching for a bug like the one I described, you only need to search through classes with dependencies on IUpdate&lt;Customer&gt; and possibly ICreate&lt;Customer&gt;. </p>    <p>We’re tracking which entity instances are transient (new, not saved) and which ones are already persisted (saved to the database) by the ID property. If the ID is equal to Guid.Empty, the instance is transient. If the ID has any other value, it’s persistent. Since we know that handy bit of information, we don’t really need separate interfaces for create and update operations. We can combine them in to one called ISave&lt;T&gt;. We now have IRead&lt;T&gt;, ISave&lt;T&gt;, and IDelete&lt;T&gt;. </p>    <p>Even though we’ve split our interface up by operation, we’re still only going to have one DAO implementation. In the <a href="http://ninject.org/" target="_blank">Ninject</a> module, we’ll bind each of our three interfaces to the DAO implementation.</p>    <p>Every entity has the same basic CUD, but what about entity-specific queries? In these cases, we’ll create entity-specific interfaces such as IReadCustomer. This means you could have up to four IoC bindings for each entity. </p>    <p>Splitting the CRUD operations in to separate interfaces has one added benefit. In our case, we don’t want to allow certain (most) entities to be deleted. In these cases, your entity-specific DAO shouldn’t implement IDelete. For this reason, we won’t implement deletes in our generic base DAO.</p>    <h3>Show me some code already!</h3>    <p>We put our interfaces in the data namespace of the core project and our implementations in the data project.</p>    <pre class="brush:vbnet">Namespace Data

    Public Interface IRead(Of TEntity As Entity)

        Function GetByID(ByVal ID As Guid) As TEntity

    End Interface

End Namespace

Namespace Data

    Public Interface ISave(Of TEntity As Entity)

        Function Save(ByVal Entity As TEntity) As TEntity

    End Interface

End Namespace

Namespace Data

    Public Interface IDelete(Of TEntity As Entity)

        Sub Delete(ByVal Entity As TEntity)

    End Interface

End Namespace

Namespace Data

    Public Interface IReadStudent
        Inherits IRead(Of Student)

        Function FindByStudentID(ByVal StudentID As String) As Student
        Function FindByName(ByVal LikeFirstName As String, ByVal LikeLastName As String) As IEnumerable(Of Student)

    End Interface

End Namespace

Imports NHibernate

Public Class GenericDAOImpl(Of TEntity As Entity)
    Implements IRead(Of TEntity)
    Implements ISave(Of TEntity)

    Public Sub New(ByVal Session As ISession)
        m_session = Session
    End Sub

    Protected ReadOnly m_Session As ISession

    Public Function GetByID(ByVal ID As System.Guid) As TEntity Implements IRead(Of TEntity).GetByID
        If m_Session.Transaction Is Nothing Then
            Dim RetVal As TEntity
            Using Tran = m_Session.BeginTransaction
                RetVal = m_Session.Get(Of TEntity)(ID)
                Tran.Commit()
                Return RetVal
            End Using
        Else
            Return m_Session.Get(Of TEntity)(ID)
        End If
    End Function

    Public Function Save(ByVal Entity As TEntity) As TEntity Implements ISave(Of TEntity).Save
        If m_Session.Transaction Is Nothing Then
            Using Tran = m_Session.BeginTransaction
                m_Session.SaveOrUpdate(Entity)
                Tran.Commit()
            End Using
        Else
            m_Session.SaveOrUpdate(Entity)
        End If
        Return Entity
    End Function

End Class

Imports NHibernate
Imports NHibernate.Criterion

Public Class StudentDaoImpl
    Inherits GenericDAOImpl(Of Student)
    Implements IReadStudent

    Public Sub New(ByVal Session As ISession)
        MyBase.New(Session)
    End Sub

    Public Function FindByName(ByVal LikeFirstName As String, ByVal LikeLastName As String) As System.Collections.Generic.IEnumerable(Of Student) Implements IReadStudent.FindByName
        Dim crit As ICriteria = m_Session.CreateCriteria(Of Student) _
            .Add(Expression.Like(&quot;FirstName&quot;, LikeFirstName)) _
            .Add(Expression.Like(&quot;LastName&quot;, LikeLastName)) _
            .SetMaxResults(101)
        If m_Session.Transaction Is Nothing Then
            Using Tran = m_Session.BeginTransaction()
                Dim RetVal = crit.List.Cast(Of Student)()
                Tran.Commit()
                Return RetVal
            End Using
        Else
            Return crit.List.Cast(Of Student)()
        End If
    End Function

    Public Function FindByStudentID(ByVal StudentID As String) As Student Implements IReadStudent.FindByStudentID
        Dim Crit = m_Session.CreateCriteria(Of Student) _
            .Add(Expression.Eq(&quot;StudentID&quot;, StudentID))
        If m_Session.Transaction Is Nothing Then
            Using Tran = m_Session.BeginTransaction
                Dim RetVal = Crit.UniqueResult(Of Student)()
                Tran.Commit()
                Return RetVal
            End Using
        Else
            Return Crit.UniqueResult(Of Student)()
        End If
    End Function

End Class</pre>

  <pre class="brush:csharp">using System;

namespace NStackExample.Data
{
    public interface IRead&lt;TEntity&gt; where TEntity : Entity 
    {

        TEntity GetById(Guid ID);

    }
}

namespace NStackExample.Data 
{
    public interface ISave&lt;TEntity&gt; where TEntity : Entity 
    {

        TEntity Save(TEntity entity);

    }
}

namespace NStackExample.Data
{
    public interface IDelete&lt;TEntity&gt; where TEntity:Entity 
    {

        void Delete(TEntity entity);

    }
}

using System.Collections.Generic;

namespace NStackExample.Data
{
    public interface IReadStudent : IRead&lt;Student&gt;
    {

        Student FindByStudentID(string StudentID);
        IEnumerable&lt;Student&gt; FindByName(string LikeFirstName, string LikeLastName);

    }
}

using NHibernate;

namespace NStackExample.Data
{

    public class GenericDAOImpl&lt;TEntity&gt; : IRead&lt;TEntity&gt;, ISave&lt;TEntity&gt; where TEntity : Entity
    {

        public GenericDAOImpl(ISession Session)
        {
            m_Session = Session;
        }

        protected readonly ISession m_Session;

        public TEntity GetByID(System.Guid ID)
        {
            if (m_Session.Transaction == null)
            {
                TEntity retval;
                using (var Tran = m_Session.BeginTransaction())
                {
                    retval = m_Session.Get&lt;TEntity&gt;(ID);
                    Tran.Commit();
                    return retval;
                }
            }
            else
            {
                return m_Session.Get&lt;TEntity&gt;(ID);
            }
        }

        public TEntity Save(TEntity Entity)
        {
            if (m_Session.Transaction == null)
            {
                using (var Tran = m_Session.BeginTransaction())
                {
                    m_Session.SaveOrUpdate(Entity);
                    Tran.Commit();
                }
            }
            else
            {
                m_Session.SaveOrUpdate(Entity);
            }
            return Entity;
        }

    }

}

using NHibernate;
using NHibernate.Criterion;
using System.Collections.Generic;
using System.Linq;

namespace NStackExample.Data
{
    public class StudentDAOImpl : GenericDAOImpl&lt;Student&gt;, IReadStudent
    {

        public StudentDAOImpl(ISession Session) : base(Session) { }

        public System.Collections.Generic.IEnumerable&lt;Student&gt; FindByName(string LikeFirstName, string LikeLastName)
        {
            ICriteria crit = m_Session.CreateCriteria&lt;Student&gt;()
                .Add(Expression.Like(&quot;FirstName&quot;, LikeFirstName))
                .Add(Expression.Like(&quot;LastName&quot;, LikeLastName))
                .SetMaxResults(101);
            if (m_Session.Transaction == null)
            {
                using (var Tran = m_Session.BeginTransaction())
                {
                    var RetVal = crit.List().Cast&lt;Student&gt;();
                    Tran.Commit();
                    return RetVal;
                }
            }
            else
            {
                return crit.List().Cast&lt;Student&gt;();
            }
        }

        public Student FindByStudentID(string StudentID)
        {
            var Crit = m_Session.CreateCriteria&lt;Student&gt;()
                .Add(Expression.Eq(&quot;StudentID&quot;, StudentID));
            if (m_Session.Transaction == null)
            {
                using (var Tran = m_Session.BeginTransaction())
                {
                    var RetVal = Crit.UniqueResult&lt;Student&gt;();
                    Tran.Commit();
                    return RetVal;
                }
            }
            else
            {
                return Crit.UniqueResult&lt;Student&gt;();
            }
        }


    }
}</pre>

  <p></p>

  <h3>Other changes</h3>

  <p>I’ve cleaned out the course and student DAO junk from part 7. These were just used to illustrate session-per-request. </p>

  <p>The fluent mapping classes have been moved in to a mapping folder.</p>

  <p></p>

  <p>That’s it for part 8. Don’t forget to write your tests for the queries. </p>

  <p>Jason 
    <br />- IBlog.Post(Part8) operation completed. Executing IWatchTV.Watch(Timespan.FromHours(1))</p>

  <p></p>
</li>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>402</wp:post_id>
		<wp:post_date>2009-09-05 16:13:25</wp:post_date>
		<wp:post_date_gmt>2009-09-05 22:13:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>part-8-daos-repositories-or-query-objects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>152</wp:comment_id>
			<wp:comment_author><![CDATA[Noam Gal]]></wp:comment_author>
			<wp:comment_author_email>ATGardner+jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.google.com/profiles/ATGardner</wp:comment_author_url>
			<wp:comment_author_IP>138.134.102.1</wp:comment_author_IP>
			<wp:comment_date>2009-09-08 04:47:27</wp:comment_date>
			<wp:comment_date_gmt>2009-09-08 10:47:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've noticed that in each DAO method, you specifically handle transactions, if no transaction is available. Doesn't NHibernate do this automatically? Wrap each database access in an implicit transaction (if no transaction is currently running)?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>153</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-09-08 04:57:15</wp:comment_date>
			<wp:comment_date_gmt>2009-09-08 10:57:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Noam - This is a common mistake, and one I've certainly made myself. The reason for doing it this way is explained in the section "Transactions and the second level cache" here:
http://nhprof.com/Learn/Alert?name=DoNotUseImplicitTransactions]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>152</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>154</wp:comment_id>
			<wp:comment_author><![CDATA[Noam Gal]]></wp:comment_author>
			<wp:comment_author_email>ATGardner+jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.google.com/profiles</wp:comment_author_url>
			<wp:comment_author_IP>84.108.236.205</wp:comment_author_IP>
			<wp:comment_date>2009-09-08 08:41:02</wp:comment_date>
			<wp:comment_date_gmt>2009-09-08 14:41:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am not sure I understand the 2nd level cache example given at the end of the article, as this seems like the only good reason to explicitly open the transaction ourselves in such cases -
on the *wrong* example with no transaction it has

using(var session = sessionFactory.OpenSession()) 
{ 
	var post = session.Get(1);
	// do something with post
} 

and the article says that since there is no commit on the (implicit) transaction, the post will not get into the 2nd level cache. Doesn't hibernate commit the implicit transaction on session close? Won't it be committed after the closing brackets?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>155</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-09-08 09:56:57</wp:comment_date>
			<wp:comment_date_gmt>2009-09-08 15:56:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Noam - Yes. As I understand it, in these single-operation DB interactions, the explicit transactions are used purely for the benefit of the 2nd level cache. 

The incorrect example uses an implicit transaction, and therefore doesn't affect the 2nd level cache. When or whether the implicit transaction is committed or rolled back is irrelevant from the viewpoint of the 2nd level cache.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>154</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>156</wp:comment_id>
			<wp:comment_author><![CDATA[Noam Gal]]></wp:comment_author>
			<wp:comment_author_email>ATGardner+jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.google.com/profiles/ATGardner</wp:comment_author_url>
			<wp:comment_author_IP>138.134.102.1</wp:comment_author_IP>
			<wp:comment_date>2009-09-09 00:52:15</wp:comment_date>
			<wp:comment_date_gmt>2009-09-09 06:52:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I must say I still don't get it - sorry.
Isn't an implicit transaction just the same old "BeginTransaction" call being made by NHibernate code inside? Won't this transaction commit affect the 2nd level cache just like any other (explicit) transaction commit?

What would be the easiest way to test this? Is there some way to see what objects are inside the 2nd level cache at a given time? I might try a spike on the weekend.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>157</wp:comment_id>
			<wp:comment_author><![CDATA[Simon]]></wp:comment_author>
			<wp:comment_author_email>simon@maquiladora.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.19.191.88</wp:comment_author_IP>
			<wp:comment_date>2009-09-09 03:48:10</wp:comment_date>
			<wp:comment_date_gmt>2009-09-09 09:48:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm not using exactly the same code as you, but for me when I check the session for a transaction it is never null. However the IsActive property on the transaction is set to false if it hasn't been started.

Is this a bug or do you see a difference behaviour due to the different ways we have NHibernate setup?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Part 9: NHibernate transactions</title>
		<link>http://jasondentler.com/blog/2009/09/part-9-nhibernate-transactions/</link>
		<pubDate>Tue, 08 Sep 2009 12:38:03 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=419</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In this part, we’re going to wrap our <a href="http://nhforge.org" target="_blank">NHibernate</a> transactions and create a factory for them so we can use them in higher layers without referencing NHibernate all the way up.</p>  <p>If you’re new to the series, you can read <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">Part 1</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/" target="_blank">Part 2</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/" target="_blank">Part 3</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/" target="_blank">Part 4</a>, <a href="http://jasondentler.com/blog/2009/08/part-5-fixing-the-broken-stuff/" target="_blank">Part 5</a>, <a href="http://jasondentler.com/blog/2009/08/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja/" target="_blank">Part 6</a>, <a href="http://jasondentler.com/blog/2009/08/part-7-nhibernate-and-ninject-for-asp-net-mvc/" target="_blank">Part 7</a>, and <a href="http://jasondentler.com/blog/2009/09/part-8-daos-repositories-or-query-objects" target="_blank">Part 8</a> to catch up.</p>  <p>You may have noticed in part 8 that in each DAO method, if we didn’t already have an explicit transaction, I created one around each database interaction. My reason for this is explained in Ayende’s NHibernate Profiler alert “<a href="http://nhprof.com/Learn/Alert?name=DoNotUseImplicitTransactions" target="_blank">Use of implicit transactions is discouraged</a>.” This works great for simple DB interaction, but what about the more complex scenarios? </p>  <p>This is where we get to talk about this great thing called a business transaction. So once again, I’m going to parade out my experts. Actually, this time it’s only Udi Dahan. There are two key points he’s written about on his blog. </p>  <ol>   <li><a href="http://www.udidahan.com/2009/01/24/ddd-many-to-many-object-relational-mapping/" target="_blank">Partial failures can be good</a>. The programmer in all of us sees that and screams <a href="http://en.wikipedia.org/wiki/ACID" target="_blank">atomicity</a>. Transactions&#160; should be all-or-nothing. Anything less is just wrong. Right? In real life, there are instances where we allow, and even prefer partial failures of business transactions. Udi gives us a great example. Would you leave the grocery store empty handed simply because they were out of one item on your list? Probably not. When you’re gathering requirements, be sure to ask questions about the proper way to fail. “Roll it all back” isn’t the only option. </li>    <li><a href="http://www.udidahan.com/2007/01/22/realistic-concurrency/" target="_blank">Realistic Concurrency</a> – The entire post is worth reading, but Udi makes one point I want to touch on specifically. When performing an operation for the user, you should get the current state, validate, and then perform the task all within the business transaction. </li> </ol>  <p>Let’s use our college application as an example. We have a user story / use case / requirement / story card / whatever to allow students to register for classes, provided those classes aren’t full. If you’ve ever worked at or attended a college or university where certain classes always have more demand than available seats, you are no doubt aware of how quickly those classes will fill up. In fact, the best sections (best professors and best times) can fill up just minutes after registration is opened. It’s very possible that dozens of potential students could access the section when there is only a few seats left. Since the enrollment in a particular section (the current state) changes so rapidly, you must obtain a lock, refresh your enrollment numbers and make sure there is room (revalidate) before actually enrolling that student. If more than one registration request is received, they should be performed serially. </p>  <p>The process is:</p>  <ol>   <li>Open a transaction at the proper <a href="http://en.wikipedia.org/wiki/Isolation_(database_systems)" target="_blank">isolation level</a>. Consult your nearest DBA, as isolation levels are outside the scope of this series. </li>    <li>Refresh – Get the current state of the entity </li>    <li>(Re)Validate – Be sure the business transaction is still valid for the current state </li>    <li>Execute – Perform the insert / update / delete </li>    <li>Commit the transaction </li> </ol>  <p>Now that we’ve covered business transactions, let’s get set up to use them in our business logic. We shouldn’t have NHibernate types floating around at that level, so we’ll wrap them. Once again, the interfaces go in the Data namespace of the core project and the implementations go in the Data project.</p>  <pre class="brush:vbnet">Imports System.Data

Namespace Data

    Public Interface ITransactionFactory

        Function BeginTransaction() As ITransaction
        Function BeginTransaction(ByVal IsolationLevel As IsolationLevel) As ITransaction

    End Interface

End Namespace

Namespace Data

    Public Interface ITransaction
        Inherits IDisposable

        Sub Commit()
        Sub Rollback()

    End Interface

End Namespace

Imports NHibernate

Public Class TransactionFactoryImpl
    Implements ITransactionFactory

    Public Sub New(ByVal Session As ISession)
        m_Session = Session
    End Sub

    Protected ReadOnly m_Session As ISession

    Public Function BeginTransaction() As ITransaction Implements ITransactionFactory.BeginTransaction
        Return New TransactionWrapper(m_Session.BeginTransaction)
    End Function

    Public Function BeginTransaction(ByVal IsolationLevel As System.Data.IsolationLevel) As ITransaction Implements ITransactionFactory.BeginTransaction
        Return New TransactionWrapper(m_Session.BeginTransaction(IsolationLevel))
    End Function

End Class


Imports NHibernate

Public Class TransactionWrapper
    Implements ITransaction

    Public Sub New(ByVal Transaction As NHibernate.ITransaction)
        m_Transaction = Transaction
    End Sub

    Protected ReadOnly m_Transaction As NHibernate.ITransaction

    Public Sub Commit() Implements ITransaction.Commit
        m_Transaction.Commit()
    End Sub

    Public Sub Rollback() Implements ITransaction.Rollback
        m_Transaction.Rollback()
    End Sub

    Private disposedValue As Boolean = False        ' To detect redundant calls

    ' IDisposable
    Protected Overridable Sub Dispose(ByVal disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                ' TODO: free other state (managed objects).
                m_Transaction.Dispose()
            End If

            ' TODO: free your own state (unmanaged objects).
            ' TODO: set large fields to null.
        End If
        Me.disposedValue = True
    End Sub

#Region &quot; IDisposable Support &quot;
    ' This code added by Visual Basic to correctly implement the disposable pattern.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

End Class</pre>

<pre class="brush:csharp">using System.Data;

namespace NStackExample.Data
{
    public interface ITransactionFactory
    {

        ITransaction BeginTransaction();
        ITransaction BeginTransaction(IsolationLevel isolationLevel);

    }
}

using System;

namespace NStackExample.Data
{
    public interface ITransaction : IDisposable 
    {
        void Commit();
        void Rollback();
    }
}

using System.Data;
using NHibernate;

namespace NStackExample.Data
{
    public class TransactionFactoryImpl : ITransactionFactory 
    {

        public TransactionFactoryImpl(ISession Session)
        {
            m_Session = Session;
        }
        
        protected readonly ISession m_Session;

        #region ITransactionFactory Members

        public ITransaction BeginTransaction()
        {
            return new TransactionWrapper(m_Session.BeginTransaction());
        }

        public ITransaction BeginTransaction(IsolationLevel isolationLevel)
        {
            return new TransactionWrapper(m_Session.BeginTransaction(isolationLevel));
        }

        #endregion
    }
}


using System;
using NHibernate;

namespace NStackExample.Data
{
    public class TransactionWrapper : ITransaction
    {

        public TransactionWrapper(NHibernate.ITransaction Transaction)
        {
            m_Transaction = Transaction;
        }

        protected readonly NHibernate.ITransaction m_Transaction;

        #region ITransaction Members

        void ITransaction.Commit()
        {
            m_Transaction.Commit();
        }

        void ITransaction.Rollback()
        {
            m_Transaction.Rollback();
        }

        private bool disposedValue = false;

        protected override void Dispose(bool Disposing)
        {
            if (!this.disposedValue)
            {
                m_Transaction.Dispose();
            }
            this.disposedValue = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        #endregion
    }
}</pre>

<p>You may be interested to know that the NHibernate ITransaction will perform an implicit rollback when it is disposed, unless an explicit call to Commit or Rollback has already occurred. To implement this behavior, we implement IDisposable in our transaction wrapper and chain our wrapper’s Dispose to NHibernate.ITransaction’s Dispose. This implicit rollback can indicate a missing call to Commit, so it <a href="http://nhprof.com/Learn/Alert?name=AvoidImplicitRollback" target="_blank">generates an alert in NHibernate Profiler</a>. If you intend to rollback, do it explicitly. Your code will be easier to understand.</p>

<p>That’s it for part 9.</p>

<p>Jason
  <br />- Off to mow the lawn.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>419</wp:post_id>
		<wp:post_date>2009-09-08 06:38:03</wp:post_date>
		<wp:post_date_gmt>2009-09-08 12:38:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>part-9-nhibernate-transactions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>158</wp:comment_id>
			<wp:comment_author><![CDATA[Jake Scott]]></wp:comment_author>
			<wp:comment_author_email>jake.net@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/jakescott</wp:comment_author_url>
			<wp:comment_author_IP>118.90.135.190</wp:comment_author_IP>
			<wp:comment_date>2009-09-08 23:22:44</wp:comment_date>
			<wp:comment_date_gmt>2009-09-09 05:22:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Got a download yo? Great series keep up the good work!!!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>159</wp:comment_id>
			<wp:comment_author><![CDATA[cowgaR]]></wp:comment_author>
			<wp:comment_author_email>cowgaR@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.136.136.6</wp:comment_author_IP>
			<wp:comment_date>2009-09-09 04:40:50</wp:comment_date>
			<wp:comment_date_gmt>2009-09-09 10:40:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes I wonder this series doesn't have the momentum of popularity as is unique on the internet.

There aren't many articles using NHibernate so this is very welcomed!
Going to read it, I wonder how it compares with Conversation per B.Transaction from Fabio.

Good work Jason!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>160</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-09-09 14:08:30</wp:comment_date>
			<wp:comment_date_gmt>2009-09-09 20:08:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@cowgaR - Don't confuse lack of comments with lack of readers. When I started this series, I had roughly 2 unique visitors (including myself) and 0 subscribers. According to the Google Analytics data for this site, plus my numbers on NHForge, I'm somewhere over 3K unique readers. This series has exceeded my wildest expectations, and I owe the NH team, especially Fabio, a huge thank you for supporting (and tolerating) me. Also, ScottGu's tweet and the 20 or so retweets that followed certainly gave me a good jump-start.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>159</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>161</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-09-09 14:10:21</wp:comment_date>
			<wp:comment_date_gmt>2009-09-09 20:10:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Jake - The current download is in part 7 and the next one will be in part 10. Glad you're enjoying the series.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>158</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>162</wp:comment_id>
			<wp:comment_author><![CDATA[Craig]]></wp:comment_author>
			<wp:comment_author_email>craig.j.cox@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.33.171.15</wp:comment_author_IP>
			<wp:comment_date>2009-09-09 20:41:16</wp:comment_date>
			<wp:comment_date_gmt>2009-09-10 02:41:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great series! I've been in search for a series of this nature for a long time so I'm very thankful.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>163</wp:comment_id>
			<wp:comment_author><![CDATA[Joshua Gough]]></wp:comment_author>
			<wp:comment_author_email>jsgough@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://agilefromthegroundup.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>24.98.228.70</wp:comment_author_IP>
			<wp:comment_date>2009-09-14 21:17:57</wp:comment_date>
			<wp:comment_date_gmt>2009-09-15 03:17:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is just an awesome series Jason. I'm learning a ton from this and from S#arp Architecture. Can't wait to see more.
take care
Josh]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>164</wp:comment_id>
			<wp:comment_author><![CDATA[Sean Gough]]></wp:comment_author>
			<wp:comment_author_email>sdgough@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>204.152.235.219</wp:comment_author_IP>
			<wp:comment_date>2009-09-15 08:27:12</wp:comment_date>
			<wp:comment_date_gmt>2009-09-15 14:27:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree with Mr. Gough (go figure!) -- this is a great series and I am learning a ton!

Cheers,
-Sean]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>165</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-09-15 18:18:59</wp:comment_date>
			<wp:comment_date_gmt>2009-09-16 00:18:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Josh - Thanks. S#arp Arch is great, but the VB.NETers need a little love as well.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>163</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>World’s Newest Micro-ISV</title>
		<link>http://jasondentler.com/blog/2009/09/worlds-newest-micro-isv/</link>
		<pubDate>Sat, 12 Sep 2009 23:30:41 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2009/09/worlds-newest-micro-isv/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Today, I started the world’s newest Micro-ISV. It may be several months before I share any details, but the journey started today.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>427</wp:post_id>
		<wp:post_date>2009-09-12 17:30:41</wp:post_date>
		<wp:post_date_gmt>2009-09-12 23:30:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>worlds-newest-micro-isv</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>166</wp:comment_id>
			<wp:comment_author><![CDATA[Sean]]></wp:comment_author>
			<wp:comment_author_email>sdgough@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>204.152.235.219</wp:comment_author_IP>
			<wp:comment_date>2009-09-15 08:21:46</wp:comment_date>
			<wp:comment_date_gmt>2009-09-15 14:21:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oooooh, mysterious!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>NHibernate Testing with SQLite in-memory DB</title>
		<link>http://jasondentler.com/blog/2009/09/nhibernate-testing-with-sqlite-in-memory-db/</link>
		<pubDate>Tue, 15 Sep 2009 01:25:53 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2009/09/nhibernate-testing-with-sqlite-in-memory-db/</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" border="0" alt="SQLite Logo" align="left" src="http://sqlite.org/images/SQLite.gif" />This is a follow-up to my post <a href="http://jasondentler.com/blog/2009/08/nhibernate-unit-testing-with-sqlite-in-memory-db/" target="_blank">here</a> about SQLiteDatabaseScope, a small class to control the lifecycle of SQLite in-memory databases. It allows you to run NHibernate tests against SQLite’s fast in-memory database. Since each test can have its own database in memory, you can easily run tests in parallel without conflict. </p>  <p><em>Warning: While SQLite is thread-safe, SQLiteDatabaseScope itself is not. It is intended to be used to manage one or more SQLite in-memory databases per thread, not shared across threads.</em></p>  <p>Since I originally wrote SQLiteDatabaseScope, I’ve learned a few things about <a href="http://sqlite.org" target="_blank">SQLite</a> and <a href="http://nhforge.org" target="_blank">NHibernate</a>, and updated the code to match. </p>  <p>First, building an NHibernate configuration and session factory is heavy. It’s a huge waste of time to rebuild those objects for each new instance of the database. Instead, you supply your own configuration and session factory.</p>  <p>Second, it’s possible to create an in-memory database with initial data. A few people I follow on Twitter mentioned giving up on SQLite because they couldn’t quickly and easily fill the in-memory database with necessary initial test data. I’ve found a solution. We attach a SQLite file database containing our data, perform an “INSERT INTO tbl SELECT * FROM attached.tbl” command for each table, then detach our file database. The import runs fast, and the file database can be safely accessed by multiple threads simultaneously, so we can still run our tests in parallel. Better yet, since SQLite doesn’t support foreign keys, we don’t have to be careful about the table order when we import.</p>  <p>Here’s the code:</p>  <pre class="brush:csharp">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SQLite;

namespace System.Data.SQLite
{
    public class SQLiteDatabaseScope : IDisposable 
    {

        private const string CONNECTION_STRING = &quot;Data Source=:memory:;Version=3;New=True;&quot;;

        private static readonly log4net.ILog Log = log4net.LogManager.GetLogger(typeof(SQLiteDatabaseScope));

        private object sync = new object();
        private NHibernate.Cfg.Configuration config;
        private NHibernate.ISessionFactory sessionFactory;
        private string initialDataFilename;
        private SQLiteConnection connection;

        public SQLiteDatabaseScope(NHibernate.Cfg.Configuration Configuration,
            NHibernate.ISessionFactory SessionFactory)
        {
            Log.Info(&quot;Creating database scope&quot;);
            config = Configuration;
            sessionFactory = SessionFactory;
        }

        public SQLiteDatabaseScope(NHibernate.Cfg.Configuration Configuration,
            NHibernate.ISessionFactory SessionFactory,
            string InitialDataFilename)
            : this(Configuration, SessionFactory)
        {
            initialDataFilename = InitialDataFilename;
        }

        public NHibernate.ISession OpenSession()
        {
            return sessionFactory.OpenSession(GetConnection());
        }

        public NHibernate.ISession OpenSession(NHibernate.IInterceptor Interceptor)
        {
            return sessionFactory.OpenSession(GetConnection(), Interceptor);
        }

        public NHibernate.IStatelessSession OpenStatelessSession()
        {
            return sessionFactory.OpenStatelessSession(GetConnection());
        }

        private SQLiteConnection GetConnection()
        {
            if (null == connection)
                BuildConnection();
            return connection;
        }

        private void BuildConnection()
        {
            Log.Info(&quot;Building SQLite database connection&quot;);
            connection = new SQLiteConnection(CONNECTION_STRING);
            connection.Open();
            BuildSchema();
            if (!string.IsNullOrEmpty(initialDataFilename))
                new SQLiteDataLoader(connection, initialDataFilename).ImportData();
        }

        private void BuildSchema()
        {
            Log.Debug(&quot;Creating schema&quot;);
            NHibernate.Tool.hbm2ddl.SchemaExport se;
            se = new NHibernate.Tool.hbm2ddl.SchemaExport(config);
            se.Execute(false, true, false, connection, null);
        }

        private bool disposedValue = false;

        protected void Dispose(bool disposing)
        {
            if (!this.disposedValue)
            {
                if (disposing)
                {
                    Log.Info(&quot;Disposing database scope.&quot;);
                    if (null != connection)
                    {
                        connection.Dispose();
                    }
                }
            }
            this.disposedValue=true;
        }

        #region IDisposable Members

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        #endregion
    }
}</pre>

<pre class="brush:csharp">using System;
using System.Linq;
using System.Data;
using System.Data.SQLite;

namespace System.Data.SQLite
{
    public class SQLiteDataLoader
    {

        private static log4net.ILog Log = log4net.LogManager.GetLogger(typeof(SQLiteDataLoader));

        private const string ATTACHED_DB = &quot;zxcvbnmInitialData&quot;;

        private SQLiteConnection connection;
        private string initialDataFilename;

        public SQLiteDataLoader(SQLiteConnection Connection, 
            string InitialDataFilename)
        {
            connection = Connection;
            initialDataFilename = InitialDataFilename;
        }

        public void ImportData()
        {
            DataTable dt = connection.GetSchema(SQLiteMetaDataCollectionNames.Tables);
            var tableNames = (from DataRow R in dt.Rows
                             select (string)R[&quot;TABLE_NAME&quot;]).ToArray();
            AttachDatabase();
            foreach (string tableName in tableNames)
            {
                CopyTableData(tableName);
            }
            DetachDatabase();
        }

        private void AttachDatabase()
        {
            SQLiteCommand cmd = new SQLiteCommand(connection);
            cmd.CommandText = String.Format(&quot;ATTACH '{0}' AS {1}&quot;, initialDataFilename, ATTACHED_DB);
            Log.Debug(cmd.CommandText);
            cmd.ExecuteNonQuery();
        }

        private void DetachDatabase()
        {
            SQLiteCommand cmd = new SQLiteCommand(connection);
            cmd.CommandText = string.Format(&quot;DETACH {0}&quot;, ATTACHED_DB);
            Log.Debug(cmd.CommandText);
            cmd.ExecuteNonQuery();
        }

        private void CopyTableData(string TableName)
        {
            int rowsAffected;
            SQLiteCommand cmd = new SQLiteCommand(connection);
            cmd.CommandText = string.Format(&quot;INSERT INTO {0} SELECT * FROM {1}.{0}&quot;, TableName, ATTACHED_DB );
            Log.Debug(cmd.CommandText);
            rowsAffected = cmd.ExecuteNonQuery();
            Log.InfoFormat(&quot;{0} {1} rows loaded&quot;, rowsAffected, TableName);
        }

    }
}</pre>

<p></p>

<p>Jason</p>

<p>- We now return you to your regularly scheduled program.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>430</wp:post_id>
		<wp:post_date>2009-09-14 19:25:53</wp:post_date>
		<wp:post_date_gmt>2009-09-15 01:25:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nhibernate-testing-with-sqlite-in-memory-db</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="category" nicename="sqlite"><![CDATA[SQLite]]></category>
	</item>
	<item>
		<title>Houston Tech Fest 2009</title>
		<link>http://jasondentler.com/blog/2009/09/houston-tech-fest-2009/</link>
		<pubDate>Fri, 18 Sep 2009 21:34:42 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2009/09/houston-tech-fest-2009/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’ll be attending Houston Tech Fest 2009 next weekend.</p>  <ul>   <li>ASP.NET MVC in Action - Testing the Last Mile with UI Testing – <a href="http://www.lostechies.com/blogs/jimmy_bogard/default.aspx" target="_blank">Jimmy Bogard</a></li>    <li>ASP.NET MVC in Action - Level 300 - <a href="http://jeffreypalermo.com/" target="_blank">Jeffrey Palermo</a></li>    <li>Automated builds &amp; continuous integration – <a href="http://flux88.com/" target="_blank">Ben Scheirman</a> (<a href="http://twitter.com/Subdigital" target="_blank">@Subdigital</a>)</li>    <li>Into to NHibernate – <a href="http://scottwhite.blogspot.com/" target="_blank">Scott White</a> (<a href="http://twitter.com/kibbled_bits" target="_blank">@kibbled_bits</a>)</li> </ul>  <p>I’m looking forward to meeting some local people I’ve been following online for a while.</p>  <p>Also, Houston ALT.NET is <a href="http://flux88.com/blog/workshop-on-continuous-integration-this-saturday/" target="_blank">hosting a CI workshop</a> this Saturday from 9 AM to 2 PM. Unfortunately, I can’t attend. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>432</wp:post_id>
		<wp:post_date>2009-09-18 15:34:42</wp:post_date>
		<wp:post_date_gmt>2009-09-18 21:34:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>houston-tech-fest-2009</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="event"><![CDATA[Event]]></category>
	</item>
	<item>
		<title>Part 10: Testing and Refactoring</title>
		<link>http://jasondentler.com/blog/2009/09/part-10-testing-and-refactoring-2/</link>
		<pubDate>Sun, 20 Sep 2009 20:35:08 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2009/09/part-10-testing-and-refactoring-2/</guid>
		<description></description>
		<content:encoded><![CDATA[<p><strike>Today’s post will be short</strike>. I’m going to cover the basics of testing with Rhino Mocks and do some refactoring in the DAOs. </p>  <p>I’m not an expert. This is just how I do things. If you have a better way, do it your way. Better yet, tell me about it so I can improve the way I work as well.</p>  <h3>Testing Terminology</h3>  <p>In recent years, testing vocabulary has exploded. There are mocks and stubs and fakes and unit tests and integration tests and acceptance tests and all sorts of jargon. You may be thinking “who cares?” This jargon is only important when code needs to communicate its intent to humans, right?. The compiler doesn’t care what terminology we use. Well, sorry. Code is written for humans, not compilers, so programming jargon is a prerequisite.</p>  <h4>Test Doubles</h4>  <p>So, let’s go over some common terms. I’m going to lift these definitions straight from Marton Fowler’s <a href="http://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs" target="_blank">Mocks Aren’t Stubs</a>. Test Double is a “generic term for any kind of pretend object used in place of a real object for testing purposes.” That’s pretty straight forward. Test doubles come in four types:</p>  <blockquote>   <ul>     <li><b>Dummy</b> objects are passed around but never actually used. Usually they are just used to fill parameter lists. </li>      <li><b>Fake</b> objects actually have working implementations, but usually take some shortcut which makes them not suitable for production (an <a href="http://www.martinfowler.com/bliki/InMemoryTestDatabase.html">in memory database</a> is a good example). </li>      <li><b>Stubs</b> provide canned answers to calls made during the test, usually not responding at all to anything outside what's programmed in for the test. Stubs may also record information about calls, such as an email gateway stub that remembers the messages it 'sent', or maybe only how many messages it 'sent'. </li>      <li><b>Mocks</b> are what we are talking about here: objects pre-programmed with expectations which form a specification of the calls they are expected to receive. </li>   </ul> </blockquote>  <p>Hi. Still with me? Good. </p>  <p>Mocks are significant. They are part of the “proof” of the test. The other three amount to plumbing. Now, you may be asking your self why we even need test doubles. Why can’t we just run our production code and inspect the output? <a href="http://martinfowler.com/articles/mocksArentStubs.html#ClassicalAndMockistTesting" target="_blank">Fowler’s article has several sections</a> about the differences and pros and cons of classical testing (using objects from the real code) vs. mockist testing (creating doubles for everything except what you’re testing).</p>  <p>Even in classical testing, you sometimes have to swap in a test double for objects that lead to permanent side effects or operate too slowly. In mockist testing, you swap in test doubles for everything that you’re not explicitly testing. Either way, you need to know how to create and use test doubles.</p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" border="0" src="http://ayende.com/Blog/images/ayende_com/Blog/WindowsLiveWriter/NewRhinoMocksLogo_ECFE/rhinomocks-120x90.png" /></p>  <p>We’re going to use <a href="http://ayende.com/projects/rhino-mocks.aspx" target="_blank">Rhino Mocks</a>, a fluent framework for creating stubs and mocks. I don’t know if it’s the best, but if Ayende wrote it, you can bet it’s pretty darn awesome. Plus, the fluent syntax works OK in VB.NET, which is rare. </p>  <h3>Writing the Test</h3>  <p>Suppose we had a standard GetByID function on our DAO (because we do) containing some code like this (because it does). How would we test that the function actually did what it claimed? </p>  <pre class="brush:vbnet">        If m_Session.Transaction Is Nothing OrElse Not m_Session.Transaction.IsActive Then
            Dim RetVal As TEntity
            Using Tran = m_Session.BeginTransaction
                RetVal = m_Session.Get(Of TEntity)(ID)
                Tran.Commit()
                Return RetVal
            End Using
        Else
            Return m_Session.Get(Of TEntity)(ID)
        End If</pre>

<pre class="brush:csharp">            if (null == m_Session.Transaction || !m_Session.Transaction.IsActive)
            {
                TEntity retval;
                using (var Tran = m_Session.BeginTransaction())
                {
                    retval = m_Session.Get&lt;TEntity&gt;(ID);
                    Tran.Commit();
                    return retval;
                }
            }
            else
            {
                return m_Session.Get&lt;TEntity&gt;(ID);
            }</pre>

<p>Because I’m not an expert, I won’t try to explain the computer science of testing. I can tell you that if we ignore possible branches inside NHibernate objects, there are two possible paths through our function (the first if we don’t have an existing explicit transaction, and the second if we do), giving us a <a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity" target="_blank">cyclomatic complexity</a> of 2. This means that we need two unit tests to achieve 100% code coverage. 100% code coverage doesn’t mean perfect code, but it helps.</p>

<p>I prefer the Record / Playback style of testing. In this style, you start by setting up your expectations within a record section – which mock methods will be called, how many times they’ll be called, in what order they’ll be called, and what their return values should be. Then, in the playback section, you perform the actual action. In this case, we’ll create an instance of our DAO and call its GetByID method. Finally, you verify that the expectations of your mock were met, as well as any other assertions you may need to prove.</p>

<p>Edit: The alternative to Record / Playback is Arrange / Act / Assert. If you don’t know the difference, <a href="http://rasmuskl.dk/post/Why-AAA-style-mocking-is-better-than-Record-Playback.aspx" target="_blank">here’s a good article</a> Jose sent me. Rhino Mocks supports both styles. I still prefer Record / Playback, probably just because I’m used to it.</p>

<p>Here’s what a test of GetByID with a pre-existing transaction would look like:</p>

<pre class="brush:vbnet">    &lt;Test()&gt; _
    Public Sub GetByIDTest()
        Dim mocks As New MockRepository()
        Dim session As NHibernate.ISession = mocks.StrictMock(Of NHibernate.ISession)()
        Dim transaction As NHibernate.ITransaction = mocks.Stub(Of NHibernate.ITransaction)()
        Dim expected As Student = mocks.Stub(Of Student)()
        Dim actual As Student
        Using mocks.Record()
            Rhino.Mocks.Expect.Call(session.Transaction).Return(transaction).Repeat.Any()
            Rhino.Mocks.Expect.Call(transaction.IsActive).Return(True)
            Rhino.Mocks.Expect.Call(session.Get(Of Student)(Guid.Empty)).Return(expected)
        End Using

        Using mocks.Playback()
            Dim StudentDao As IReadStudent = New StudentDaoImpl(session)
            actual = StudentDao.GetByID(Guid.Empty)
        End Using
        mocks.VerifyAll()
        Assert.IsNotNull(actual, &quot;null entity returned&quot;)
        Assert.AreSame(expected, actual, &quot;wrong entity returned&quot;)
    End Sub</pre>

<pre class="brush:csharp">        [Test]
        public void GetByIDTest()
        {
            MockRepository mocks = new MockRepository();
            NHibernate.ISession session = mocks.StrictMock&lt;NHibernate.ISession&gt;();
            NHibernate.ITransaction transaction = mocks.Stub&lt;NHibernate.ITransaction&gt;();
            Student expected = new Student();
            Student actual;
            using (mocks.Record())
            {
                Rhino.Mocks.Expect.Call(session.Transaction)
                    .Return(transaction)
                    .Repeat.Any();
                Rhino.Mocks.Expect.Call(transaction.IsActive)
                    .Return(true);
                Rhino.Mocks.Expect.Call(session.Get&lt;Student&gt;(Guid.Empty))
                    .Return(expected);
            }
            using (mocks.Playback())
            {
                IReadStudent StudentDao = new StudentDAOImpl(session);
                actual = StudentDao.GetById(Guid.Empty);
            }
            mocks.VerifyAll();
            Assert.IsNotNull(actual);
            Assert.AreSame(expected,actual);
        }</pre>

<p>We start by creating a MockRepository. This is the factory for all of our mocks and stubs, controls our record and playback blocks, and verifies that all the mock expectations have been met.</p>

<p>Next, we create a mock of the <a href="http://nhforge.org" target="_blank">NHIbernate</a> session and a stub of an NHibernate transaction. We create a mock because we want to make sure our DAO calls m_Session.Get&lt;&gt;. We also create a double for our return value called expected. We’ll compare it to the actual return value. </p>

<p>Now that we have our doubles, we set up our expectations. We are testing the path of the pre-existing transaction. Session.transaction will return our transaction stub. Since this is a mock, not a stub, the default is to assert that it is called exactly once. Since we’re not interested in this part, we specify that it can be called <strong>any</strong> number of times. We also specify that a call to transaction.IsActive should return true. Finally, we specify that our DAO will call session.Get&lt;&gt; exactly once, and that our mock session should return our expected student.</p>

<p>Next, we start our playback block and perform the action. We create an instance of our DAO, passing in the mock session we wired up in our record block, and we call GetByID. </p>

<p>Finally, we verify that our DAO interacted with the stub as expected. We also assert that the actual instance returned during our test is the same as our expected instance.</p>

<p>This covers the first test. What about the second one? Well, the test would be identical except for your expectations. We would setup our transaction stub so that transaction.IsActive returned false. We would also expect our DAO to call session.BeginTransaction(). </p>

<p>Now, I’m lazy and we’ve already done things backwards by writing our code before our tests, so let’s continue being lazy. I don’t want to write two tests for each DAO method just because of some transaction handling code, which by the way, is repeated all over the place. Not good. Let’s refactor things a bit.</p>

<h3>Refactored Transaction Handling</h3>

<p>In all of the DAO methods, I’ve made the choice to ensure we have an explicit transaction before interacting with the database. In previous versions, each method is nearly identical to the code we tested above above.</p>

<p>In all of this, the only unique code is the call to m_Session.Get(). The rest of the code is just uninteresting transaction handling, and this uninteresting plumbing code is repeated in every method of our DAO. Let’s pull it out in to its own function.</p>

<pre class="brush:vbnet">    Protected Function WrapInTransaction(ByVal F As Func(Of TEntity)) As TEntity
        Return WrapInTransaction(Of TEntity)(F)
    End Function

    Protected Function WrapInTransaction(Of TResult)(ByVal F As Func(Of TResult)) As TResult
        If m_Session.Transaction Is Nothing OrElse _
            m_Session.Transaction.IsActive = False Then
            Using Tran = m_Session.BeginTransaction
                Dim RetVal As TResult = F.Invoke()
                Tran.Commit()
                Return RetVal
            End Using
        Else
            Return F.Invoke()
        End If
    End Function</pre>

<pre class="brush:csharp">        protected TEntity WrapInTransaction(System.Func&lt;TEntity&gt; F)
        {
            return WrapInTransaction&lt;TEntity&gt;(F);
        }

        protected TResult WrapInTransaction&lt;TResult&gt;(System.Func&lt;TResult&gt; F)
        {
            if (null == m_Session.Transaction || !m_Session.Transaction.IsActive)
            {
                using (NHibernate.ITransaction Tran = m_Session.BeginTransaction())
                {
                    TResult RetVal = F.Invoke();
                    Tran.Commit();
                    return RetVal;
                }
            }
            else
            {
                return F.Invoke();
            }
        }</pre>
Now we can pass in the small-but-interesting bit of code as a parameter to the WrapInTransaction method. This lets us simplify our methods down to this: 

<pre class="brush:vbnet">    Public Function GetByID(ByVal ID As System.Guid) As TEntity Implements IRead(Of TEntity).GetByID
        Return WrapInTransaction(Function() m_Session.Get(Of TEntity)(ID))
    End Function</pre>

<pre class="brush:csharp">        public TEntity GetById(System.Guid ID)
        {
            return WrapInTransaction(() =&gt; m_Session.Get&lt;TEntity&gt;(ID));
        }</pre>

<p>It’s shorter. Some might argue that it’s not as readable since it uses lambda syntax. In this case, I think DRY (don’t repeat yourself) is more important. To be honest, I’m not sure if this cuts the cyclomatic complexity of our methods in half, but It certainly lets us write about 1/2 as many tests and still have 100% coverage. We just need to write our already-have-a-transaction and wrap-in-transaction tests once period, instead of once per method.</p>

<p>If you’re working in C#, you can create another overload that accepts a System.Action (System.Func but returning void). In Visual Basic.NET, this would be a Sub, but unfortunately, there’s no lambda syntax for calling a Sub in VB.NET. To get around this, I’ve updated our Save method to this:</p>

<pre class="brush:vbnet">    Public Function Save(ByVal Entity As TEntity) As TEntity Implements ISave(Of TEntity).Save
        Return WrapInTransaction(Function() SaveOrUpdate(Entity))
    End Function

    Private Function SaveOrUpdate(ByVal Entity As TEntity) As TEntity
        m_Session.SaveOrUpdate(Entity)
        Return Entity
    End Function</pre>
Since we're returning a value, we can use our existing WrapInTransaction(Func&lt;&gt;) method. The download includes tests for all of our DAO methods, including WrapInTransaction. 

<p>That’s it for part 10. For homework, write the tests for our StudentDaoImpl class. Hints: Use a fake, verify that it returns what it should, and verify that it doesn’t return what it shouldn’t.</p>

<p>I’ve changed the SQLiteDatabaseScope to match my previous post, and pulled it in to its own project. </p>

<p>Download the entire solution in <a href="http://jasondentler.com/downloads/NStackExample.Part10.VBNET.zip" target="_blank">VB.NET</a> or <a href="http://jasondentler.com/downloads/NStackExample.Part10.CSharp.zip" target="_blank">C#</a>.</p>

<p>In part 11, we’ll dive in to validation.</p>

<p>Jason</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>442</wp:post_id>
		<wp:post_date>2009-09-20 14:35:08</wp:post_date>
		<wp:post_date_gmt>2009-09-20 20:35:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>part-10-testing-and-refactoring-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nunit"><![CDATA[NUnit]]></category>
		<category domain="category" nicename="rhino-mocks"><![CDATA[Rhino Mocks]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>167</wp:comment_id>
			<wp:comment_author><![CDATA[LeoXing]]></wp:comment_author>
			<wp:comment_author_email>nsx808@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.leoxing.cn/</wp:comment_author_url>
			<wp:comment_author_IP>208.53.138.21</wp:comment_author_IP>
			<wp:comment_date>2009-09-25 01:00:34</wp:comment_date>
			<wp:comment_date_gmt>2009-09-25 07:00:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[can I translated into chinese?I guarantee that will retain copyright information!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>168</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2009-09-25 06:55:43</wp:comment_date>
			<wp:comment_date_gmt>2009-09-25 12:55:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Absolutely! 

The content is licensed under CC attribution 3 and the code is licensed under LGPL 3.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>167</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>169</wp:comment_id>
			<wp:comment_author><![CDATA[LeoXing]]></wp:comment_author>
			<wp:comment_author_email>nsx808@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.leoxing.cn/</wp:comment_author_url>
			<wp:comment_author_IP>208.53.138.21</wp:comment_author_IP>
			<wp:comment_date>2009-09-26 06:47:33</wp:comment_date>
			<wp:comment_date_gmt>2009-09-26 12:47:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Request for feedback</title>
		<link>http://jasondentler.com/blog/2009/10/request-for-feedback/</link>
		<pubDate>Sun, 11 Oct 2009 00:12:43 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2009/10/request-for-feedback/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Recently, I was asked to provide feedback on someone’s writing about a specific technical subject. Their work is targeted at average .NET programmers who are new to this particular subject – much like I was to <a href="http://nhforge.org" target="_blank">NHibernate</a> just a few months ago. By the time I had finished the 2nd chapter, I was concerned to the point I considered withdrawing from the project. There were some obvious technical flaws, and the whole thing generally rubbed me the wrong way. My feedback was pretty harsh. </p>  <p>A week later, I realized my real objections were over the author’s process. He did things exactly backwards from the order I typically follow. He did things in this order because that’s probably how he works, but more importantly because it’s easier to explain. From the other end, he’d have to assume some knowledge that the reader may not have. </p>  <p>So as not to sink in to the meta-blogging quicksand, I’ll simply ask these questions about the series up to this point:</p>  <ol>   <li>Which post(s) did you like the most? Why?</li>    <li>Which post(s) did you like the least? Why?</li>    <li>How should the process be reordered? Why?</li>    <li>What left you generally confused or with unanswered questions?</li>    <li>What do you think would be the next logical topic to write about?</li> </ol>  <p>Please comment or send me an email with your feedback.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>446</wp:post_id>
		<wp:post_date>2009-10-10 18:12:43</wp:post_date>
		<wp:post_date_gmt>2009-10-11 00:12:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>request-for-feedback</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>170</wp:comment_id>
			<wp:comment_author><![CDATA[Nick Kirkes]]></wp:comment_author>
			<wp:comment_author_email>nick.kirkes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.8.179.50</wp:comment_author_IP>
			<wp:comment_date>2009-10-11 11:39:52</wp:comment_date>
			<wp:comment_date_gmt>2009-10-11 17:39:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I generally liked the earlier chapters of your NHib discussion more than the latter.  I think the earlier items were more detailed, and the further along you got, there seemed to be less detail as to why you made a particular decision and how you intended to implement certain pieces.  I'm thinking of the Transactions article in particular, but since comments are closed on that post, I haven't bothered to send much in.

All that said, I thoroughly enjoyed the process you went through and especially appreciated the amount of external linking you supplied early on in the series.  I came into the project with a healthy amount of knowledge of Nhib but wanted a different perspective, which I got.  I can see the value though from possibly approaching it from a different direction, but I'm not sure I would if it were my choice.

Hope that helps.

NK]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>171</wp:comment_id>
			<wp:comment_author><![CDATA[Bob]]></wp:comment_author>
			<wp:comment_author_email>roberthking3@tx.rr.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>151.151.73.166</wp:comment_author_IP>
			<wp:comment_date>2009-10-13 14:31:53</wp:comment_date>
			<wp:comment_date_gmt>2009-10-13 20:31:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have been startign to work through the NH series and agree with the other poster that the level of detail seemed to shrink a bit. All in all, however, I've found it to be very informative EXCEPT that something is missing or I've made a mistake with Sqlite, and the articles really don't guide me very well in this regard. I'm sure it's on me, but I even encountered this when I dl'ed and installed the Example4 zip.

System.BadImageFormatException: Could not load file or assembly 'System.Data.SQLite, Version=1.0.60.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139' or one of its dependencies. An attempt was made to load a program with an incorrect format.
at NStackExample.Data.Tests.SQLiteDatabaseScope`1.BuildSchema(Configuration Cfg)
at FluentNHibernate.Cfg.FluentConfiguration.BuildConfiguration() 

I guess my feedback from this would be that it might be nice, as sweet as Sqlite seems, to provide a tutorial with less external dependencies, perhaps simply using SqlServer since we all have it working.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>172</wp:comment_id>
			<wp:comment_author><![CDATA[Carl]]></wp:comment_author>
			<wp:comment_author_email>mr_stick2000@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.109.96.170</wp:comment_author_IP>
			<wp:comment_date>2009-10-20 07:01:04</wp:comment_date>
			<wp:comment_date_gmt>2009-10-20 13:01:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Bob: The only time I have seen the BadImageFormatException in the past has been on my x64 Windows7.

Are you deploy to your local IIS? If so, does using the Visual Studio Development Server make the problem go away?

If you are deploying to IIS 7 on a 64bit machine, there is a setting in the ApplicationPool called 'Enable 32-bit Applications' that is set to false by default. Try setting this to true and seeing if that fixes the issue. I found that this fixed my issue so I created a new application pool that was specifically for web apps that relied on 32bit components.

I seem to remember that there was an issue some time ago where the x64 SQLite dll wasn't actually x64.... I can't find a link about it so it was potentially a dream...

If the SQLite dll that you are using is actually x86 then this coupled with the default IIS setting could be the cause of your issue.

Hope this helps you or somebody else that may be googling the BadImageFormatException.

C]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>First Impressions: TekPub</title>
		<link>http://jasondentler.com/blog/2009/10/first-impressions-tekpub/</link>
		<pubDate>Sun, 25 Oct 2009 04:03:06 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=447</guid>
		<description></description>
		<content:encoded><![CDATA[<p>OK Folks. I don’t do endorsements. I especially dislike commercial / corporate training. The trainers aren’t really experts. They didn’t create this stuff. They don’t even use this stuff. They just *teach* this stuff – day after day, city after city. I can learn 95% of the material with my laptop and 15 minutes with the slide deck.</p>  <p>What’s the alternative? </p>  <p>Blogs? They’re fine for keeping up with trends and knowing what the cool kids are doing, but if you’re trying to learn something from scratch, you’ve got to dig for the good stuff. The worst part about web 2.0 is that any idiot can start a blog about stuff he doesn’t really understand – even me.</p>  <p>Books? While I could recommend a few, the honest truth is that I’ve had a dozen queued up on my bookshelf for nearly a year. Even if you do take the time to read, the information is out of date before the book even hits your shopping cart. On top of that, you have no guarantee that the author is really an expert.</p>  <p>Here’s something different.</p>  <p><img style="border-bottom: 0px; border-left: 0px; margin: 4px 10px 4px 0px; display: inline; border-top: 0px; border-right: 0px" border="0" alt="TekPub_logo " align="left" src="http://blog.tekpub.com/wp-content/uploads/2009/10/TekPub_logo.png" /><a href="http://blog.wekeroad.com/" target="_blank">Rob Connery</a> <a href="http://twitter.com/robconery" target="_blank">@robconery</a> and <a href="http://averyblog.com/" target="_blank">James Avery</a> <a href="http://twitter.com/averyj" target="_blank">@averyj</a> started <a href="http://tekpub.com" target="_blank">TekPub.com</a>. That’s <a href="http://twitter.com/tekpub" target="_blank">@tekpub</a> on Twitter. It’s a library of professional screencast series by Rob, James, and other subject experts with names you’ll recognize. They’re not little 30 minute channel 9 interviews with obscure Microsoft PMs. First, the message is not corporate in any way, shape, or form. Second, the quality is amazing. The audio is clear. The text is crisp and easily readable. The images are both humorous and relevant to the topic.</p>  <p>They just launched. Here’s what’s out there already:</p>  <ul>   <li>Mastering <a href="http://nhforge.org" target="_blank">NHibernate</a> – Oren Eini aka Ayende Rahien and Rob integrate NHibernate with Kona, an MVC storefront app. When it comes to NHibernate, Oren is a true master. </li>    <li>Building my own Blog – He’s Rob freakin’ Conery. He’s not setting up WordPress. He’s building a blog from scratch with MVC, lean techniques, AgileZen, BDD, MSpec, and a whole lot of other cool stuff – and taking you along for the ride. </li>    <li>Mastering Git – A full 3 hours dedicated to the ins and outs of Git. This will be the first one I watch.</li>    <li>Coder to Developer 2009 – Rob updates a classic book in screencast form. This one is free folks, so go watch.</li>    <li>Concepts – The first one covers IoC and DI with <a href="http://ninject.org/" target="_blank">Ninject</a>. Again, this one is free. The basics – stuff you should know - are free. This should be pretty awesome for training the new college grad on your team. When you need a break from the training pace, stick him in front of the conference room flat screen with a bucket of popcorn.</li> </ul>  <p>Even if you’re cheap, the previews and free stuff are worth a look. Personally, I hope they get Udi Dahan to talk about NServiceBus. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>447</wp:post_id>
		<wp:post_date>2009-10-24 22:03:06</wp:post_date>
		<wp:post_date_gmt>2009-10-25 04:03:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>first-impressions-tekpub</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="tekpub"><![CDATA[TekPub]]></category>
		<category domain="category" nicename="training"><![CDATA[Training]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>173</wp:comment_id>
			<wp:comment_author><![CDATA[James Avery]]></wp:comment_author>
			<wp:comment_author_email>javery@infozerk.com</wp:comment_author_email>
			<wp:comment_author_url>http://tekpub.com</wp:comment_author_url>
			<wp:comment_author_IP>32.177.184.157</wp:comment_author_IP>
			<wp:comment_date>2009-10-25 15:00:21</wp:comment_date>
			<wp:comment_date_gmt>2009-10-25 21:00:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the great feedback and glad you are enjoying the site. Udi would be great.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Simple Domain Events</title>
		<link>http://jasondentler.com/blog/2009/11/simple-domain-events/</link>
		<pubDate>Fri, 13 Nov 2009 03:31:16 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=449</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is my first attempt at the <a href="http://martinfowler.com/eaaDev/DomainEvent.html" target="_blank">domain event pattern</a>, so use at your own risk. A lot of this post was <strike>blatantly ripped off from</strike> inspired by <a href="http://www.udidahan.com/2009/06/14/domain-events-salvation/" target="_blank">Udi Dahan’s posts on the same subject</a>. Other bits and pieces come from around the ‘net. Sorry I’m not giving credit. At the time, I was researching a problem, not a blog post.</p>  <h4>Your Problem</h4>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" border="0" align="left" src="http://blog.lib.umn.edu/biomdoc/access_services/Lily_Tomlin_telephone_operator.jpg" width="223" height="246" />Let’s use the ever-popular “preferred customer” example. You’ve built this beautiful ecommerce application. You even implemented coupon code discounts and stuff. Customers put items in the carts, checkout, and magically get their stuff in 2 to 93.5 days. </p>  <p>Today, the sales director emails you about their new “Preferred customer” program. A preferred customer gets an automatic 2% discount on orders over $1000 (up to $20). This will be a piece of cake. You quickly write up a few new tests, slap an IsPreferred boolean property on your customer entity, and build a new order total strategy for this discount scenario. All the tests turn green. </p>  <p>Then you naively email him to ask how a customer becomes “preferred.” The sales director replies “After the 20th order over $1000, the customer automatically becomes preferred.” Simple enough. He continues “When that happens, we need to place an order for a complimentary gift basket and the sales rep needs an email about it. Also, any customer with a single order over $20,000 or two orders over $10,000 is automatically enrolled in the program. Next Tuesday, we’re meeting to discuss the new Gold preferred program. I want you there.” </p>  <p>Let’s step back and analyze what just happened here. Your beautiful application just got owned by Yet Another Tool With an MBA and you have to share oxygen with him for an hour next Tuesday. More importantly, you have a problem. Even though there are multiple ways to become a preferred customer, the customer only becomes preferred once. They only get one gift basket. Also, you need to do two entirely different actions based on the same event – place a gift basket order and send an email to the sales rep. On top of all that, there’s another mess of weird requirements in the works. How will you handle this without turning your beautiful application in to a pile of ugly hacks? Domain events. </p>  <h4>What’s is it?</h4>  <p>The domain events pattern is the code equivalent of the office gossip network. Whenever something interesting happens, the office gossip tells anyone and everyone who might care about the news. </p>  <p>You have a requirement: “When X happens, do Y1, Y2, Y3, and Y4.” X is the event. The Y’s are the resulting actions that your application should take. There may be one action. There may be 15. There may be none. It doesn’t matter really. Let’s say the event is “John B. Customer just ordered 2 widgets and a sprocket.” Obviously, one of your actions will be “Ship 2 widgets and a sprocket to John B. Customer” You’ll also want to email him a receipt of his order. If this is his first order, you’ll want to mail him a catalog and add him to the mailing list. </p>  <p>How would you handle this? Well, you could have your customer’s PlaceOrder method call the services directly. That creates all sorts of tight coupling that you don’t want. Plus the reference is going the wrong direction. You could inject the services and program to an interface, but a lot of people consider that a bad idea. Even with an interface, your entities know more than they need to about your services. </p>  <p>You’ll probably want to use domain events for this. Domain events are especially helpful when X could happen in many different places, or the Y’s change a lot. They keep your coupling down by keeping your domain blissfully ignorant.</p>  <p>The checkout code of your ecommerce site doesn’t need to know how to ship products, email receipts, or anything else. It just needs to tell some central event dispatcher – the office gossip - “Hey. John B. Customer just placed an order for 2 sprockets and a widget.”</p>  <h4>What’s the solution?</h4>  <p>Basically, if you understand Pub/Sub service bus, toss out the queue and the transactional stuff. Now you understand the layout of domain events. </p>  <p>You have a dispatcher. So that it’s easy to access from anywhere in your application, it’s a static class.</p>  <p>You also have some service that wants to know when some event happens. It tells the central dispatcher “Tell me when [particular type of event] happens.” It registers as a handler of that particular type of event.</p>  <p>Your domain tells the dispatcher “Hey! This just happened.” The dispatcher looks up the handler or handlers for that event and passes along the message. The handler(s) do some work based on the details of that event. </p>  <h4>Another Trio</h4>  <p>All of the really cool patterns have 3 parts… and singleton has thick glasses and bad acne. </p>  <ol>   <li>Events – CustomerBecomesPreferred, CustomerPlacedOrder, etc. Each of these classes will be immutable – they can’t be changed once they’re created. Even though we don’t have any common members, all of our domain events play a particular role in the application. Like Udi says in his post, define role explicitly. All of our event types will implement IDomainEvent. </li>    <li>Handlers - In Pub/Sub, these would be the subscribers. You can have multiple handlers for a single type of event. The order that these handlers execute is unknown. For this reason, your events should be immutable. Altering the state of an event during the execution of a handler could create unexpected side-effects in a subsequent handler, and the whole thing becomes a game of <a href="http://en.wikipedia.org/wiki/Chinese_whispers" target="_blank">Chinese Whispers</a>. Since handlers also play a role, we’ll have an interface for them. Each handler will implement IHandle&lt;T&gt; where T is the type of event to be handled. We’ll also define a void Handle(T Event); method so all our handlers have a common entry point for the dispatcher. </li>    <li>The dispatcher dispatches events to the various handlers. The internals can be implemented many different ways, but the result is the same. All of the event handlers are registered in the dispatcher. When the dispatcher raises an event, it gets all of the handlers for that type of event. One by one, it executes each handler’s Handle method. We’ll use a service locator internally. <a href="http://ninject.org/" target="_blank">Ninject</a> people will need to use v2.0. </li> </ol>  <p>Here’s the diagram:</p>  <p><a href="http://yuml.me/diagram/class/[&lt;&lt;IDomainEvent&gt;&gt;{bg:yellow}]^-.-[CustomerBecamePreferred|+Customer;{bg:orange}], [&lt;&lt;IHandle(T)&gt;&gt;{bg:yellow}]&lt;-&gt;[note:where T:IDomainEvent{bg:cornsilk}], [&lt;&lt;IHandle(T)&gt;&gt;]^-.-[&lt;&lt;IHandle(CustomerBecamePreferred)&gt;&gt;{bg:yellow}], [&lt;&lt;IHandle(CustomerBecamePreferred)&gt;&gt;]^-.-[SendPreferredGiftBasket|+Handle(CustomerBecamePreferred);{bg:orange}], [&lt;&lt;IHandle(CustomerBecamePreferred)&gt;&gt;]^-.-[SendMessageToSalesRep|+Handle(CustomerBecamePreferred);{bg:orange}], [Dispatcher|+Raise(T event) where T:IDomainEvent{bg:green}]." target="_blank"><img style="border-right-width: 0px; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" border="0" src="http://yuml.me/diagram/class/%5B%3C%3CIDomainEvent%3E%3E%7Bbg%3Ayellow%7D%5D%5E-.-%5BCustomerBecamePreferred%7C+Customer%3B%7Bbg%3Aorange%7D%5D%2C%20%5B%3C%3CIHandle%28T%29%3E%3E%7Bbg%3Ayellow%7D%5D%3C-%3E%5Bnote%3Awhere%20T%3AIDomainEvent%7Bbg%3Acornsilk%7D%5D%2C%20%5B%3C%3CIHandle%28T%29%3E%3E%5D%5E-.-%5B%3C%3CIHandle%28CustomerBecamePreferred%29%3E%3E%7Bbg%3Ayellow%7D%5D%2C%20%5B%3C%3CIHandle%28CustomerBecamePreferred%29%3E%3E%5D%5E-.-%5BSendPreferredGiftBasket%7C+Handle%28CustomerBecamePreferred%29%3B%7Bbg%3Aorange%7D%5D%2C%20%5B%3C%3CIHandle%28CustomerBecamePreferred%29%3E%3E%5D%5E-.-%5BSendMessageToSalesRep%7C+Handle%28CustomerBecamePreferred%29%3B%7Bbg%3Aorange%7D%5D%2C%20%5BDispatcher%7C+Raise%28T%20event%29%20where%20T%3AIDomainEvent%7Bbg%3Agreen%7D%5D" width="640" height="267" /></a></p>  <p></p>  <p>Here’s the code:</p>  <pre class="brush:csharp">namespace DomainEventsSample
{
    public interface IDomainEvent
    {
    }
}


namespace DomainEventsSample
{
    public interface IHandle&lt;T&gt; where T:IDomainEvent 
    {
        void Handle(T Event);
    }
}


using Microsoft.Practices.ServiceLocation;

namespace DomainEventsSample
{
    public static class Dispatcher
    {

        public static void Initialize(IServiceLocator ServiceLocator)
        {
            serviceLocator = ServiceLocator;
        }

        private static IServiceLocator serviceLocator;

        static void Raise&lt;T&gt;(T Event) where T : IDomainEvent
        {
            var handlers = serviceLocator.GetAllInstances&lt;IHandle&lt;T&gt;&gt;();
            foreach (var handler in handlers) 
            {
                handler.Handle(Event);
            }
        }

    }
}</pre>

<p>In our main program, we bind some event handlers to their implementations, then make a customer order a bunch of stuff. </p>

<pre class="brush:csharp">using System;
using Ninject;
using Microsoft.Practices.ServiceLocation;
using CommonServiceLocator.NinjectAdapter;

namespace DomainEventsSample
{
    class Program
    {
        static void Main(string[] args)
        {
            IKernel kernel = new StandardKernel();
            IServiceLocator sl = new NinjectServiceLocator(kernel);
            Dispatcher.Initialize(sl);

            kernel.Bind&lt;IHandle&lt;CustomerPlacedOrderEvent&gt;&gt;().To&lt;ShipOrder&gt;();
            kernel.Bind&lt;IHandle&lt;CustomerBecamePreferred&gt;&gt;().To&lt;SendPreferredGiftBasket&gt;();
            kernel.Bind&lt;IHandle&lt;CustomerBecamePreferred&gt;&gt;().To&lt;SendMessageToSalesRep&gt;();

            Customer c = new Customer();
            for (var i = 0; i &lt; 22; i++)
            {
                Order newOrder = new Order(1000.00 + i);
                c.PlaceOrder(newOrder);
                Console.WriteLine(&quot;------------------------------------&quot;);
            }
            Console.ReadLine();

        }
    }
}</pre>

<p>Our events are pretty simple. They just pass along the relevant information. When the event is about something that happened to a customer, we need to know which customer. When the event is about an order, we need to know which order.</p>

<pre class="brush:csharp">namespace DomainEventsSample
{
    public class CustomerPlacedOrder:IDomainEvent 
    {

        public CustomerPlacedOrder(Order Order)
        {
            order = Order;
        }

        private readonly Order order;

        public Order Order
        {
            get
            {
                return order;
            }
        }

    }
}</pre>

<p>Here’s a handler. Of course, this is just a stub for some real action you would implement. </p>

<pre class="brush:csharp">using System;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DomainEventsSample
{
    public class ShipOrder : IHandle&lt;CustomerPlacedOrderEvent&gt;
    {
        #region IHandle&lt;CustomerPlacedOrderEvent&gt; Members

        void IHandle&lt;CustomerPlacedOrderEvent&gt;.Handle(CustomerPlacedOrderEvent Event)
        {
            Console.WriteLine(&quot;Shipping order totalling {0:C}&quot;,Event.Order.Total);
        }

        #endregion
    }
}</pre>

<h4>Bidirectional Communication</h4>

<p>This is the real reason I’m posting. I had a situation where a domain event handler called in to another system to do some action and the log of that action needed to make its way back to the UI. </p>

<p>Just like with Pub/Sub, domain events are one way. I didn’t want to give up domain events, but I had a requirement I couldn’t fill with the pattern. So, after hacking at it for an afternoon and getting nowhere, I sent out a call for help. Ayende wrote me back. </p>

<blockquote>
  <p><font color="#000000">Publish a new event that the UI is listening to</font></p>
</blockquote>

<p>He explains in 10 words what takes me 3 paragraphs. There’s your answer folks. When your handler needs to respond, publish a response event. Simple. Elegant. </p>

<h4>Gimme the Code!</h4>

<p>I’m putting all of the code for this blog in SVN at <a href="http://basiclyeverything.googlecode.com/svn/trunk/" target="_blank">http://basiclyeverything.googlecode.com/svn/trunk/</a></p>

<p>The code for this particular post is in <a href="http://basiclyeverything.googlecode.com/svn/trunk/DomainEventsSample" target="_blank">http://basiclyeverything.googlecode.com/svn/trunk/DomainEventsSample</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>449</wp:post_id>
		<wp:post_date>2009-11-12 21:31:16</wp:post_date>
		<wp:post_date_gmt>2009-11-13 03:31:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>simple-domain-events</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="domain-events"><![CDATA[Domain Events]]></category>
		<category domain="category" nicename="patterns"><![CDATA[Patterns]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>174</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url>http://onegeekwithalife.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>71.164.217.207</wp:comment_author_IP>
			<wp:comment_date>2009-11-15 15:25:25</wp:comment_date>
			<wp:comment_date_gmt>2009-11-15 21:25:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So are we done with the NStack Example series?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>175</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-11-15 17:13:34</wp:comment_date>
			<wp:comment_date_gmt>2009-11-15 23:13:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nope. In fact, you could consider this part of the series. I plan to include heavy use of domain events in the final product. 

Part 11 is coded and 1/2 written. It'll cover controllers and views. Part 12 will cover validation. I'll be using a lot of stuff from Fabio and Jose's blogs for that one.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>174</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>176</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Hanna]]></wp:comment_author>
			<wp:comment_author_email>dave@infotouchsys.com</wp:comment_author_email>
			<wp:comment_author_url>http://onegeekwithalife.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>66.194.145.20</wp:comment_author_IP>
			<wp:comment_date>2009-11-16 14:29:33</wp:comment_date>
			<wp:comment_date_gmt>2009-11-16 20:29:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great!  Looking forward to it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>175</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Authentication, Impersonation, and Dynamic NHibernate Connection Strings</title>
		<link>http://jasondentler.com/blog/2009/11/authentication-impersonation-and-dynamic-nhibernate-connection-strings/</link>
		<pubDate>Thu, 19 Nov 2009 03:27:32 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2009/11/authentication-impersonation-and-dynamic-nhibernate-connection-strings/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>A web site I recently worked on has two major parts. The first is internet-facing and allows customers to create data records. The other is for internal use to allow office staff to alter data created by the customer. </p>  <h4>SQL Audit Setup</h4>  <p>The database uses MS SQL Server trigger-based audit logs to record data changes with a username and timestamp. They are literally for audit purposes, and not used in the application. Every database table has a matching Audit table with exactly the same fields plus a username, change type, and timestamp field. </p>  <p>Only updates and deletes trigger an entry in the audit log. The data recorded in the log represents the record prior to the change. The username field is defaulted to SYSTEM_USER, a SQL server specific variable that returns the current account name associated with the connection. This can be either a SQL server account or a windows account. Change type is a single character U or D depending on the action being performed. Timestamp is a datetime field defaulted to GETDATE(). </p>  <p>In order to associate audit log records with a particular username, all updates and deletes must run in the context of the user.</p>  <h4>Authentication and Impersonation</h4>  <p>Customers do not log in to the website. There is no authentication. When a customer interacts with the database, we used a generic SQL account specified in the connection string. All customer changes are recorded with the name of this generic account.</p>  <p>When the office staff uses the website, they are required to authenticate with their windows accounts. This account is impersonated all the way to the database so the audit log will record the specific user name. </p>  <p>There are several ways to achieve this impersonation. The option I chose to use is basic authentication. Over SSL (an https website) this is just as secure as any other data. The primary drawback is that users will get the standard, generic popup log in box. Since the username and password are transmitted to the web server, the web server can easily impersonate this user to any resource, including SQL, even on another server. </p>  <p>You can also run Windows authentication. This was referred to as NTLM back in the day. The benefit of this over basic authentication is that Internet Explorer will authenticate with the web server automatically using the current user’s windows credentials. Since this authentication is done with public keys instead of passwords, the web server can’t impersonate the user to resources (including SQL server) on other servers. This means it’s not really a working solution by itself. If you’re running SQL server on your production web server, stop reading now and go fix that. </p>  <p>Fortunately, windows authentication can take advantage of delegated Kerberos authentication. This is difficult to set up and well beyond the scope of this post. Basically, after trading some more public keys around, the SQL server knows that the web server is telling the truth about the current user and agrees to run the SQL statements in the context of that user. Internet Explorer users are still not prompted for their user names and passwords, and it just works.&#160; </p>  <p><em><font color="#ff0000">Warning: Impersonation, no matter which method you choose, is not recommended. It effectively disables connection pooling, which stops your application from scaling. In fact, this whole post is probably one bad idea after another. </font></em></p>  <p>In this particular case, I’m safe. We can’t physically fit more than a dozen “staff” users, and we’ll certainly never get approval to hire even that many. I’ve used this same architecture for hundreds of users before I knew any better – and the hardware was much slower. In short, it’ll work in this case. </p>  <h4>Dynamic Connection Strings</h4>  <p>This led to another small issue. Customers should log in with a generic SQL account. Staff should log in with their windows accounts. </p>  <p>Jose R. led me to <a href="http://nhforge.org/wikis/howtonh/dynamically-change-user-info-in-connection-string.aspx" target="_blank">this article on the NHForge wiki</a> from November 2008. Well, things have changed slightly in the last year. Also, I wanted something a little more pluggable. </p>  <p><a href="http://nhforge.org" target="_blank">NHibernate</a> uses a DriverConnectionProvider to supply it with a connection. To alter the connection string as needed, we only need to override the ConnectionString property of this class. </p>  <pre class="brush:csharp">using NHibernate.Connection;

namespace DynamicConnectionStringExample
{
    public class DynamicConnectionProvider : DriverConnectionProvider 
    {

        public static IConnectionStringProvider connectionStringProvider;

        protected override string ConnectionString
        {
            get
            {
                if (null!=connectionStringProvider)
                {
                    return connectionStringProvider.GetConnectionString();
                }
                return base.ConnectionString;
            }
        }

    }
}</pre>

<p>Note: The example I show here assumes you are using one of the standard bytecode providers such as NHibernate.Bytecode.Castle. However, you could very easily use an IoC bytecode provider (except <a href="http://ninject.org/" target="_blank">Ninject</a>) from uNHAddIns and use constructor dependency injection to inject the IConnectionStringProvider dependency. If not, you’ll need to manually set the ConnectionStringProvider.</p>

<p>To use this, just tell NHibernate about it:</p>

<pre class="brush:csharp">Environment.Properties[Environment.ConnectionProvider] = typeof(DynamicConnectionProvider).AssemblyQualifiedName;</pre>

<p>Of course, the “magic” really happens in the IConnectionStringProvider. If we have an authenticated user, GetConnectionString() returns a connection string with Integrated Security = true. If we don’t, we return one with a SQL username and password.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>465</wp:post_id>
		<wp:post_date>2009-11-18 21:27:32</wp:post_date>
		<wp:post_date_gmt>2009-11-19 03:27:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>authentication-impersonation-and-dynamic-nhibernate-connection-strings</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="authentication"><![CDATA[Authentication]]></category>
		<category domain="post_tag" nicename="impersonation"><![CDATA[Impersonation]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>177</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Authentication, Impersonation, and Dynamic NHibernate Connection Strings « BASICly everything -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/tb/bit.ly/nD1Zl</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2009-11-18 21:54:07</wp:comment_date>
			<wp:comment_date_gmt>2009-11-19 03:54:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Jason Dentler, DotNetTips. DotNetTips said: RT @jasondentler: Blogged: Authentication, Impersonation, and Dynamic NHibernate Connection Strings http://bit.ly/nD1Zl [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>178</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>mattio.valentino@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.88.146.206</wp:comment_author_IP>
			<wp:comment_date>2009-12-02 08:06:36</wp:comment_date>
			<wp:comment_date_gmt>2009-12-02 14:06:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is there any chance you could show how this would be used by the calling code to change the connection string at runtime?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>365</wp:comment_id>
			<wp:comment_author><![CDATA[Soe]]></wp:comment_author>
			<wp:comment_author_email>soelwinhtoo@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>175.144.250.85</wp:comment_author_IP>
			<wp:comment_date>2011-09-10 14:21:49</wp:comment_date>
			<wp:comment_date_gmt>2011-09-10 14:21:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If I return different connection string at run time, would it cause NHibernate to rebuild SessionFactory again? Bcoz it would be expensive to recreate SessionFactory. In my case, I need to read connectionstring from another dll. I'm afraid if NHibernate recreate SessionFactory everytime I return different connection string, it would cause performance issue.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1315664509.1289";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:128:{s:15:"comment_post_ID";s:3:"465";s:14:"comment_author";s:3:"Soe";s:20:"comment_author_email";s:21:"soelwinhtoo@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:359:"If I return different connection string at run time, would it cause NHibernate to rebuild SessionFactory again? Bcoz it would be expensive to recreate SessionFactory. In my case, I need to read connectionstring from another dll. I'm afraid if NHibernate recreate SessionFactory everytime I return different connection string, it would cause performance issue.";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:14:"175.144.250.85";s:10:"user_agent";s:90:"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.17) Gecko/20110420 Firefox/3.6.17";s:8:"referrer";s:108:"http://jasondentler.com/blog/2009/11/authentication-impersonation-and-dynamic-nhibernate-connection-strings/";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:108:"http://jasondentler.com/blog/2009/11/authentication-impersonation-and-dynamic-nhibernate-connection-strings/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:3:"Soe";s:10:"POST_email";s:21:"soelwinhtoo@gmail.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:359:"If I return different connection string at run time, would it cause NHibernate to rebuild SessionFactory again? Bcoz it would be expensive to recreate SessionFactory. In my case, I need to read connectionstring from another dll. I'm afraid if NHibernate recreate SessionFactory everytime I return different connection string, it would cause performance issue.";s:20:"POST_comment_post_ID";s:3:"465";s:19:"POST_comment_parent";s:1:"0";s:11:"POST_submit";s:14:"Submit Comment";s:14:"POST_formInput";s:0:"";s:26:"POST_akismet_comment_nonce";s:10:"fc96382279";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-50c32ba7-924f-45ae-a2cf-9070a6e14392";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG281";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg281.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:181:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.148";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31325";s:7:"SUBMASK";s:13:"255.255.255.0";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG281$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:15:"HTTP_KEEP_ALIVE";s:3:"115";s:19:"HTTP_CONTENT_LENGTH";s:3:"526";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.7";s:20:"HTTP_ACCEPT_ENCODING";s:12:"gzip,deflate";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-us,en;q=0.5";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:108:"http://jasondentler.com/blog/2009/11/authentication-impersonation-and-dynamic-nhibernate-connection-strings/";s:15:"HTTP_USER_AGENT";s:90:"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.17) Gecko/20110420 Firefox/3.6.17";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"526";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:14:"175.144.250.85";s:11:"REMOTE_HOST";s:14:"175.144.250.85";s:11:"REMOTE_PORT";s:5:"56201";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:26:"/blog/wp-comments-post.php";s:14:"ORIG_PATH_INFO";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1315664508";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1315665214.543";s:7:"message";s:44:"Jason changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>366</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2011-09-10 14:34:26</wp:comment_date>
			<wp:comment_date_gmt>2011-09-10 14:34:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It doesn't rebuild the session factory.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>365</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1315665266.1841";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:137:{s:15:"comment_post_ID";s:3:"465";s:14:"comment_author";s:5:"Jason";s:20:"comment_author_email";s:22:"jasondentler@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:39:"It doesn't rebuild the session factory.";s:14:"comment_parent";s:3:"365";s:7:"user_ID";s:1:"1";s:7:"user_ip";s:13:"70.139.36.133";s:10:"user_agent";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.220 Safari/535.1";s:8:"referrer";s:72:"http://jasondentler.com/blog/wp-admin/edit-comments.php?p=465&approved=1";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:108:"http://jasondentler.com/blog/2009/11/authentication-impersonation-and-dynamic-nhibernate-connection-strings/";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:22:"POST_newcomment_author";s:0:"";s:28:"POST_newcomment_author_email";s:0:"";s:26:"POST_newcomment_author_url";s:0:"";s:12:"POST_user_ID";s:1:"1";s:11:"POST_action";s:15:"replyto-comment";s:15:"POST_comment_ID";s:3:"365";s:20:"POST_comment_post_ID";s:3:"465";s:11:"POST_status";s:0:"";s:13:"POST_position";s:2:"-1";s:13:"POST_checkbox";s:1:"1";s:9:"POST_mode";s:6:"detail";s:32:"POST__ajax_nonce-replyto-comment";s:10:"5b502f4021";s:32:"POST__wp_unfiltered_html_comment";s:10:"3c261d771d";s:12:"POST_content";s:40:"It doesn't rebuild the session factory. ";s:7:"POST_id";s:3:"465";s:21:"POST_comments_listing";s:3:"all";s:6:"POST_p";s:3:"465";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:29:"/blog/wp-admin/admin-ajax.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-2bbbcd12-c8a1-4f33-b702-30478ecb51b4";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG280";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg280.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:181:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.147";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31324";s:7:"SUBMASK";s:13:"255.255.255.0";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG280$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:19:"HTTP_CONTENT_LENGTH";s:3:"338";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:3:"*/*";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.3";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:11:"HTTP_COOKIE";s:0:"";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:72:"http://jasondentler.com/blog/wp-admin/edit-comments.php?p=465&approved=1";s:15:"HTTP_USER_AGENT";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.220 Safari/535.1";s:11:"HTTP_ORIGIN";s:23:"http://jasondentler.com";s:21:"HTTP_X_REQUESTED_WITH";s:14:"XMLHttpRequest";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:46:"D:Hosting8214110htmlblogwp-adminadmin-ajax.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"338";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:46:"D:Hosting8214110htmlblogwp-adminadmin-ajax.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:13:"70.139.36.133";s:11:"REMOTE_HOST";s:13:"70.139.36.133";s:11:"REMOTE_PORT";s:4:"1439";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:29:"/blog/wp-admin/admin-ajax.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:29:"/blog/wp-admin/admin-ajax.php";s:14:"ORIG_PATH_INFO";s:29:"/blog/wp-admin/admin-ajax.php";s:8:"PHP_SELF";s:29:"/blog/wp-admin/admin-ajax.php";s:12:"REQUEST_TIME";s:10:"1315665265";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Views and Databases Don’t Mix</title>
		<link>http://jasondentler.com/blog/2009/12/views-and-databases-dont-mix/</link>
		<pubDate>Mon, 21 Dec 2009 19:22:38 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2009/12/views-and-databases-dont-mix/</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>The Problem</h2>  <p>In my MVC applications, I sometimes bind my views directly to NHibernate entities. a lot. like always. I also do session-per-request. </p>  <p>I don’t remember what prompted this thought – probably Twitter – but it seemed questionable to access the database from the view by loading a lazy collection. I knew you shouldn’t put database access <strong><em>code</em></strong> in the view, but this would just be a property, nothing complex at all. <a href="http://ayende.com/Blog/" target="_blank">Ayende</a> set me straight. </p>  <blockquote>   <p>You should avoid it. It is dangerous to do loading in the     <br />view, it is subject to too many changes.</p> </blockquote>  <p>How do we prevent it? Of course, the simple answer is “just don’t do it.” Anything more quickly falls in the category of protecting you from yourself, of which I’m usually not a fan. Still, this is easy to overlook. The <a href="http://haacked.com/archive/2005/08/03/DoesMortKnowWeAreTalkingSmackAboutHimBehindHisBack.aspx" target="_blank">Morts</a> of the world – and me - will fall in to this trap easily. </p>  <h2>ViewModel Solution</h2>  <p>What if we had some sort of model, but instead of being generic for the entire application, it only dealt with the concerns of a specific view. Oh, and what if we called it something weird like viewmodel. </p>  <p>This is the best way to avoid problems. Instead of binding directly to an entity, each view should have a corresponding viewmodel class, that contains all of the data being pushed down to the view as well as all the data collected by the view from the user. It’s a POCO specific to the view, with no association to the NHibernate session, so it can’t accidentally load up some data. </p>  <p>You can easily test your viewmodels. Since they also make your views pretty darn stupid, you can maybe skip some of that time-consuming UI testing. Well, skip it safely this time. ViewModels also work well for all that validation attribute markup. Just sayin’.</p>  <p>This isn’t the point of my post today, and what I’ve described isn’t the traditional Model-View-ViewModel. It’s some weird hybrid of separated presentation patterns. You can read more about view models <a href="http://jeffhandley.com/archive/2008/10/21/viewmodel-pattern.aspx" target="_blank">here</a> and <a href="http://jeffhandley.com/archive/2008/10/27/helloworld.viewmodel.aspx" target="_blank">here</a> and on <a href="http://jfromaniello.blogspot.com/2009/08/nhibernate-and-wpf-viewmodels-and-views.html" target="_blank">Jose’s Chinook Media Manager application series</a>. </p>  <h2>Exploding View Solution</h2>  <p><a href="http://jasondentler.com/blog/wp-content/uploads/2009/12/image.png"><img style="border-bottom: 0px; border-left: 0px; margin: 4px 20px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" align="left" src="http://jasondentler.com/blog/wp-content/uploads/2009/12/image_thumb.png" width="125" height="225" /></a> While I can’t say it’s worse than something silently breaking, I don’t like the idea of something bad silently working. Fragile code only works until the worst possible moment.</p>  <p>So, without going for a full ViewModel implementation, I thought it would be a good thing (or at least slightly better) to make NHibernate throw an exception when we hit the DB in the view so we have to fix it now while we’re debugging instead of later. I initially had thoughts about interceptors or connection providers and all sorts of craziness. Ayende’s answer is simply to close the session at the controller boundary. </p>  <p>How do we implement this? We close the session between the controller action and the view. So, instead of session per (the entire) request, we trim the scope at the end just a bit. </p>  <p>Let’s take a high-level look at a chunk of the <a href="http://www.asp.net/mvc/" target="_blank">ASP.NET MVC</a> lifecycle:</p>  <ol>   <li>A controller action is chosen based on the request and action filters like HttpGet or HttpPost.</li>    <li>The action (the actual controller method) executes, returning an action result – a ViewResult, RedirectToActionResult, ContentResult, or some other built-in or custom action result.</li>    <li>The action result executes. In the case of a ViewResult, the view is rendered down to actual HTML and written out to the response stream. </li> </ol>  <p>We need to close down the session between #2 and #3. Lucky for us, every controller has an overloadable / overridable method called OnResultExecuting. This method gets called just before the action result is executed. We can simply override this method in our application’s base controller class. You have one of those, right? They’re handy for all sorts of stuff.</p>  <p>Just close down any session we may have open inside OnResultExecuting. Considering the references, this takes a little bit of plumbing, but I’ll leave that up to you since it’s dependent on your method of opening and tracking NHibernate sessions through the request. </p>  <p></p>  <p></p>  <h4>One last thing</h4>  <p>Maybe in a later version of <a href="http://nhprof.com" target="_blank">NH Profiler</a>, the problem I described today will trigger an alert. Maybe not. </p>  <p>If you’re using <a href="http://nhforge.org" target="_blank">NHibernate</a> without NH Profiler, you’re either writing substandard code or wasting time – probably both. If you don’t believe me, download a trial and see what it tells you about your last NHibernate app.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>469</wp:post_id>
		<wp:post_date>2009-12-21 13:22:38</wp:post_date>
		<wp:post_date_gmt>2009-12-21 19:22:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>views-and-databases-dont-mix</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net-mvc"><![CDATA[ASP.NET MVC]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="post_tag" nicename="viewmodel"><![CDATA[ViewModel]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>179</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Views and Databases Don’t Mix « BASICly everything -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/tb/bit.ly/5hs4Kk</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2009-12-21 14:32:45</wp:comment_date>
			<wp:comment_date_gmt>2009-12-21 20:32:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Michael Stum and Jason Dentler, .NET Links. .NET Links said: Views and Databases Don’t Mix by @jasondentler http://bit.ly/69v0tM [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>180</wp:comment_id>
			<wp:comment_author><![CDATA[Neal Blomfield]]></wp:comment_author>
			<wp:comment_author_email>neal.blomfield@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://randomcode.net.nz</wp:comment_author_url>
			<wp:comment_author_IP>218.101.3.3</wp:comment_author_IP>
			<wp:comment_date>2009-12-21 14:37:32</wp:comment_date>
			<wp:comment_date_gmt>2009-12-21 20:37:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If you create an action filter to manage the scope of the session then you can open it before the action executes and close it after the action executes but before the result is executed.  

Using an action filter for this is cleaner and clearer than overriding OnResultExecuting as managing the scope of the unit of work is a cross cutting concern.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>181</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-12-22 04:24:30</wp:comment_date>
			<wp:comment_date_gmt>2009-12-22 10:24:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the feedback Neal. I enjoy reading your blog. That is cleaner and clearer. If I were a better programmer, I'd certainly go that route. 

However, my goal was to make this the default behavior and opt out where necessary. I want to highlight my mistakes without requiring a conscious decision over and over. I'm not sure if that's mistake-proofing or fool-proofing, but it's Jason-proofing. 

I think an AoP solution could be a great alternative with little or no repetitive markup. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>180</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>182</wp:comment_id>
			<wp:comment_author><![CDATA[Jan Willem B]]></wp:comment_author>
			<wp:comment_author_email>janwillem@jwenr.nl</wp:comment_author_email>
			<wp:comment_author_url>http://jwbs-blog.blogspot.com/2009/09/inheritance-and-nhibernatesearch.html</wp:comment_author_url>
			<wp:comment_author_IP>83.161.244.77</wp:comment_author_IP>
			<wp:comment_date>2009-12-23 15:13:04</wp:comment_date>
			<wp:comment_date_gmt>2009-12-23 21:13:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sometimes views include output from other actions in this way: 
Html.RenderAction(x =&gt; x.SomeAction())

If the "nested" action needs the session that was initiated by the request, you will be in trouble. Probably. I did not test it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>183</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>66.94.170.86</wp:comment_author_IP>
			<wp:comment_date>2009-12-24 19:00:03</wp:comment_date>
			<wp:comment_date_gmt>2009-12-25 01:00:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I consider that an exception to the default behavior. You could certainly turn off this behavior with an action filter.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>182</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>184</wp:comment_id>
			<wp:comment_author><![CDATA[ASP.NET MVC Archived Blog Posts, Page 1]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://aspdotnetmvc.com/blogs/default.aspx</wp:comment_author_url>
			<wp:comment_author_IP>64.55.113.203</wp:comment_author_IP>
			<wp:comment_date>2009-12-28 10:18:46</wp:comment_date>
			<wp:comment_date_gmt>2009-12-28 16:18:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] to VoteViews and Databases Don’t Mix (12/21/2009)Monday, December 21, 2009 from JasonThe Problem In my MVC applications, I sometimes bind my views [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Generate Audit Triggers From NHibernate</title>
		<link>http://jasondentler.com/blog/2009/12/generate-audit-triggers-from-nhibernate/</link>
		<pubDate>Wed, 23 Dec 2009 06:08:07 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=472</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Last week, <a href="http://fabiomaulo.blogspot.com/" target="_blank">Fabio</a> was showing me the <a href="http://martinfowler.com/eaaDev/ParallelModel.html" target="_blank">Parallel Models</a> pattern and explaining some of the work he’s doing with it. It is a VERY powerful concept.</p>  <p>What I’m going to show you today is the poor-mans version. It certainly doesn’t qualify as parallel model, but it’s pretty good audit logging if you meet the prerequisites.</p>  <h4>The Problem</h4>  <p>You need some audit logs for your current application, but you’re behind. In fact, you started the project already a month behind schedule. This needs to be quick and reliable. It’d be great if it didn’t intrude on the application, because you’ve got enough rattling around in your head already.</p>  <p>It sounds like you want SQL trigger audit logging. By the way, let’s say you’re using MS SQL Server. Let’s also say your application impersonates the user all the way down to the database level. That means your connection string says integrated security=SSPI or your dba enjoys the extra work of maintaining a sql login for each user. Those are prerequisites for this approach.</p>  <h4>What’s a trigger?</h4>  <blockquote>   <p>A trigger is a special kind of stored procedure that automatically executes when an event occurs in the database server.      <br />- <a href="http://msdn.microsoft.com/en-us/library/ms189799.aspx" target="_blank">CREATE TRIGGER, MSDN</a></p> </blockquote>  <p>If tables are the data structures in your database and stored procedures are the methods, then triggers are the event handlers. We’re concerned with three specific events – INSERT, UPDATE, and DELETE. We want to log each time those events happen to rows in our tables.</p>  <p>Trigger auditing has been around since at least the 1990s – since before SQL Server was even worth a damn. That’s MSSQL 6.5 folks. It’s sturdy and well-proven, although poorly implemented triggers will bring your server to a screeching halt. Fair warning – mine may be one of them.</p>  <p>We want to know what the data was before the change, what the data is now, who changed it, and when.</p>  <p>When you insert records in a table, the insert trigger for that table executes. The same goes for update and delete.</p>  <p>Triggers have two imaginary tables to help us with this task – inserted and deleted. Inside a trigger, <a href="http://msdn.microsoft.com/en-us/library/ms191300.aspx" target="_blank">they mostly work like real tables</a>. Inserted always has the new data. Deleted always has the old data (from before the change.) So, in the case of an INSERT trigger, deleted is empty. For a DELETE trigger, inserted is always empty, since there is no new data with a deletion. For an UPDATE trigger, they both have data.</p>  <p>How does this help us? Well, suppose we have want to audit a table called Person. Let’s make a table called Audit_Person with the exact same columns as Person. When we delete data from Person, our DELETE trigger on Person will run. Inside our trigger, the deleted table has all of the rows that were just deleted from Person. We can copy that data to our audit table so we have a record of it by doing INSERT INTO Audit_Person SELECT * FROM deleted. Since the columns match up exactly, it works.</p>  <p>Wait a minute though. We need to know who deleted that data and when. Oh, and we need some way to indicate the different events.</p>  <p>Lucky for us, there’s some easy functions in SQL. system_user will give us the login of the current user – either a sql account name or a windows account name. Of course, GetDate() will tell us the current time and we’ll just write that to the table.</p>  <p>Let’s go ahead and write out a full trigger.</p>  <pre class="brush:sql">CREATE TRIGGER Person_onInsert ON Person FOR INSERT AS 
SET NOCOUNT ON
INSERT INTO Audit_Person SELECT *, system_user, getdate(), 'I' FROM Inserted</pre>

<p>Oh yeah, we need to add some fields in Audit_Person to hold the extra stuff. system_user is a custom sql type called sysname. It’s really nvarchar(256). Of course, getdate() is a datetime. Finally, we’re passing a capital letter I (for Inserted) as the last field, so we’ll need to make that a char(1) type. </p>

<p>The SET NOCOUNT ON command is there to suppress the extra (X rows affected) messages that SQL spits out. You’ll know what I’m talking about if you’ve ever clicked on the Messages tab after running a query. </p>

<p>So, that’s the audit logging. Now we just need to create an audit table and 3 triggers for each table in your application.</p>

<h4>What does that get us?</h4>

<p>Suppose we set up the audit table and all 3 triggers, then ran these 5 SQL commands:</p>

<pre class="brush:sql">INSERT INTO [Person] VALUES (NEWID(), 'Jason 1')
INSERT INTO [Person] VALUES (NEWID(), 'Jason 2')
INSERT INTO [Person] VALUES (NEWID(), 'Jason 3')
UPDATE Person SET Name = 'Jason 4'
DELETE FROM Person </pre>

<p>Our Audit_Person table would have these rows: (click the picture for 100% size)</p>

<p><a href="http://jasondentler.com/blog/wp-content/uploads/2009/12/image3.png" target="_blank"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://jasondentler.com/blog/wp-content/uploads/2009/12/image_thumb3.png" width="554" height="156" /></a></p>

<p>&#160;</p>

<h4>Being Lazy</h4>

<p>You’ve got 200 tables? Well, you’d better get to typing then. </p>

<p></p>

<p>OK. Just like you can generate a SQL script using <a href="http://nhforge.org" target="_blank">NHibernate</a>.Tool.hbm2ddl.SchemaExport, we can generate a script to build our audit tables and triggers from the mappings.</p>

<p>Now, we’re not going to parse out the XML in the hbm files. We’re going to read the proposed table schema – what SchemaExport will give you – directly from the NHibernate configuration object. This is the same way SchemaExport does it’s magic.</p>

<p>Here’s the code:</p>

<pre class="brush:csharp">using System.IO;
using NHibernate.Cfg;
using NHibernate.Mapping;
using NHibernate.AdoNet.Util;

namespace AuditLogExample
{

    public class AuditScripter
    {

        public const string USER_DEFAULT = &quot;system_user&quot;;
        public const string TIMESTAMP_DEFAULT = &quot;getdate()&quot;;

        private enum Operations
        {
            Insert,
            Update,
            Delete
        }

        public AuditScripter(Configuration Configuration)
        {
            cfg = Configuration;
            mapping = cfg.BuildMapping();
            dialect = NHibernate.Dialect.Dialect.GetDialect(cfg.Properties);
            formatter = (NHibernate.Util.PropertiesHelper.GetBoolean(NHibernate.Cfg.Environment.FormatSql, cfg.Properties, true) ? FormatStyle.Ddl : FormatStyle.None).Formatter;
        }

        private readonly NHibernate.Dialect.Dialect dialect;
        private readonly Configuration cfg;
        private readonly NHibernate.Engine.IMapping mapping;
        private readonly IFormatter formatter;

        public void Execute(System.IO.TextWriter script)
        {
            var mappings = cfg.CreateMappings(dialect);
            ScriptObjectsForTables(mappings, script);
        }

        private void ScriptObjectsForTables(Mappings mappings, TextWriter script)
        {
            var tables = mappings.IterateTables;
            var auditTableBuilder = new AuditTableBuilder();
            foreach (Table table in tables)
            {
                if (table.IsPhysicalTable)
                {
                    var auditTable = auditTableBuilder.BuildAuditTable(table);
                    ScriptObjectsForTable(table, auditTable, script);
                }
            }
        }

        private void ScriptObjectsForTable(Table dataTable, Table auditTable, TextWriter script)
        {
            ScriptAuditTable(auditTable, script);
            ScriptInsertTrigger(dataTable, auditTable, script);
            ScriptUpdateTrigger(dataTable, auditTable, script);
            ScriptDeleteTrigger(dataTable, auditTable, script);
        }

        private void ScriptAuditTable(Table auditTable, TextWriter script)
        {
            string defaultCatalog = NHibernate.Util.PropertiesHelper.GetString(NHibernate.Cfg.Environment.DefaultCatalog, cfg.Properties, null);
            string defaultSchema = NHibernate.Util.PropertiesHelper.GetString(NHibernate.Cfg.Environment.DefaultSchema, cfg.Properties, null);

            string sqlCreateString = auditTable.SqlCreateString(dialect, mapping, defaultCatalog, defaultSchema);

            script.WriteLine(formatter.Format(sqlCreateString));

            var comments = auditTable.SqlCommentStrings(dialect, defaultCatalog, defaultSchema);

            foreach (string line in comments)
                script.Write(formatter.Format(line));

            script.WriteLine(formatter.Format(&quot;go&quot;)); // create trigger statements must in their own batch
        }

        private void ScriptInsertTrigger(Table dataTable, Table auditTable, TextWriter script)
        {
            ScriptTrigger(string.Format(&quot;{0}_onInsert&quot;, dataTable.Name), 
                &quot;insert&quot;, &quot;'I'&quot;, &quot;inserted&quot;,
                dataTable, auditTable, script);
        }

        private void ScriptUpdateTrigger(Table dataTable, Table auditTable, TextWriter script)
        {
            ScriptTrigger(string.Format(&quot;{0}_onUpdate&quot;, dataTable.Name),
                &quot;update&quot;, &quot;'U'&quot;, &quot;inserted&quot;,
                dataTable, auditTable, script);
        }

        private void ScriptDeleteTrigger(Table dataTable, Table auditTable, TextWriter script)
        {
            ScriptTrigger(string.Format(&quot;{0}_onDelete&quot;, dataTable.Name),
                &quot;delete&quot;, &quot;'D'&quot;, &quot;deleted&quot;,
                dataTable, auditTable, script);
        }


        /// &lt;summary&gt;
        /// Scripts out a create trigger sql statement 
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;triggerName&quot;&gt;The name of the trigger&lt;/param&gt;
        /// &lt;param name=&quot;triggerOperation&quot;&gt;insert, update, or delete&lt;/param&gt;
        /// &lt;param name=&quot;auditOperationValue&quot;&gt;Value to insert for AuditOperation field&lt;/param&gt;
        /// &lt;param name=&quot;triggerTable&quot;&gt;The &quot;built-in&quot; trigger table with affected data - inserted or deleted&lt;/param&gt;
        /// &lt;param name=&quot;dataTable&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;auditTable&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;script&quot;&gt;&lt;/param&gt;
        private void ScriptTrigger(string triggerName, string triggerOperation,
            string auditOperationValue, string triggerTable, 
            Table dataTable, Table auditTable, TextWriter script)
        {

            Table trigger; // Just to calculate the name of the trigger
            trigger = new Table(triggerName);
            trigger.Schema = dataTable.Schema;
            trigger.Catalog = dataTable.Catalog;
            trigger.IsQuoted = dataTable.IsQuoted;

            string dataTableName = dataTable.GetQualifiedName(dialect);
            string auditTableName = auditTable.GetQualifiedName(dialect);
            triggerName = trigger.GetQualifiedName(dialect);

            string triggerHeading;
            string triggerBody;

            triggerHeading = string.Format(&quot;create trigger {0} on {1} for {2} as&quot;, triggerName, dataTableName, triggerOperation);
            triggerBody = string.Format(&quot;insert into {0} select *, {1}, {2}, {3} from {4}&quot;, auditTableName, TIMESTAMP_DEFAULT, USER_DEFAULT, auditOperationValue, triggerTable);

            script.Write(formatter.Format(triggerHeading));
            script.Write(formatter.Format(&quot;set nocount on&quot;));
            script.Write(formatter.Format(triggerBody));
            script.WriteLine(formatter.Format(&quot;go&quot;)); // create trigger statements must in their own batch

        }

    }
}</pre>

<pre class="brush:csharp">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NHibernate.Mapping;

namespace AuditLogExample
{
    public class AuditTableBuilder
    {

        public Table BuildAuditTable(Table dataTable)
        {
            Table auditTable = new Table(string.Format(&quot;Audit_{0}&quot;,dataTable.Name));
            auditTable.Catalog = dataTable.Catalog;
            auditTable.Schema = dataTable.Schema;
            auditTable.IsQuoted = dataTable.IsQuoted;

            foreach(Column column in dataTable.ColumnIterator)
                CopyColumn(column, auditTable);

            CopyPrimaryKey(dataTable, auditTable);
            AddAuditColumns(auditTable);

            return auditTable;
        }

        private void CopyColumn(Column sourceColumn, Table auditTable)
        {
            Column newColumn = (Column)sourceColumn.Clone();
            auditTable.AddColumn(newColumn);
        }

        private void CopyPrimaryKey(Table dataTable, Table auditTable)
        {
            var pk = new PrimaryKey();
            foreach (Column sourceColumn in dataTable.PrimaryKey.ColumnIterator)
            {
                pk.AddColumn(auditTable.Column(sourceColumn.Name));
            }
            auditTable.PrimaryKey = pk;
        }

        private void AddAuditColumns(Table auditTable)
        {

            Column ts = new Column(&quot;AuditTimestamp&quot;);
            ts.SqlType = &quot;datetime&quot;;
            ts.IsNullable = false;
            ts.DefaultValue = AuditScripter.TIMESTAMP_DEFAULT;
            auditTable.AddColumn(ts);
            auditTable.PrimaryKey.AddColumn(ts);

            Column user = new Column(&quot;AuditUser&quot;);
            user.Length = 256; // system_user returns a sysname, which is really nvarchar(256)
            user.SqlType = &quot;sysname&quot;;
            user.IsNullable = false;
            user.DefaultValue = AuditScripter.USER_DEFAULT;
            auditTable.AddColumn(user);
            auditTable.PrimaryKey.AddColumn(user);

            Column op = new Column(&quot;AuditOperation&quot;);
            op.SqlType = &quot;char&quot;;
            op.Length = 1;
            op.IsNullable = false;
            auditTable.AddColumn(op);

        }

    }
}</pre>

<pre class="brush:csharp">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NHibernate.Mapping;

namespace NHibernate.Mapping
{
    public static class TableExtensions
    {

        public static Column Column(this Table Table, string ColumnName)
        {
            return Table.ColumnIterator.Where(c =&gt; c.Name == ColumnName).FirstOrDefault();
        }

    }
}</pre>

<p>I have a couple of gotchas and details to explain.</p>

<p>First, this works for me. I’m sure there are edge cases where everything goes horribly wrong. Please let me know when you find them.</p>

<p>Next, CREATE TRIGGER commands are VERY anti-social. They refuse to share a batch with any other statements. That’s why there’s a “go” between everything. In query analyzer (or the SSMS query window now), it starts a fresh batch. </p>

<p>If you know your SQL, this should look pretty simple. Pass an NHibernate configuration to the constructor of AuditScripter, then call Execute. The code loops through all of the physical tables in your configuration, first building a nearly-identical audit table, then creating the three triggers. </p>

<p>The primary key of the audit table has all the fields from the primary key of your data table, plus AuditUser and AuditTimestamp. A single user cannot alter the same record in two different ways at the exact same moment. In fact, I don’t think any two users could, but I’ll let it slide. </p>

<p>The code could probably be improved to automatically include some common indexes on the audit tables.</p>

<p>I’m sure this is the worst possible way to generate code, but I wanted something non-tool specific. I thought about T4 templates since everyone probably has Visual Studio, but this was quicker than figuring out how to get a full NHibernate configuration in to a T4 template. </p>

<h4>Expanding the idea</h4>

<p>You can definitely build on this idea to generate all sorts of repetitive code based on your NHibernate schema. For instance, if you’re unlucky enough to work in a shop with one of those stored-proc crazed database Nazis, this should help quite a bit. You can use this same idea to generate thousands of CRUD stored procedures in a few minutes. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>472</wp:post_id>
		<wp:post_date>2009-12-23 00:08:07</wp:post_date>
		<wp:post_date_gmt>2009-12-23 06:08:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>generate-audit-triggers-from-nhibernate</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ms-sql-server"><![CDATA[MS SQL Server]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>185</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Generate Audit Triggers From NHibernate « BASICly everything -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/tb/bit.ly/6gXpHP</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2009-12-23 03:03:30</wp:comment_date>
			<wp:comment_date_gmt>2009-12-23 09:03:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by james tryand, Jason Dentler. Jason Dentler said: Blogged: Generate Audit Triggers From NHibernate http://bit.ly/6gXpHP [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>186</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2009-12-23 09:02:22</wp:comment_date>
			<wp:comment_date_gmt>2009-12-23 15:02:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[After talking this over with Fabio, I think I can improve on this idea dramatically. Stay tuned.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>187</wp:comment_id>
			<wp:comment_author><![CDATA[Generate Audit Triggers from NHibernate v2 &laquo; BASICly everything]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jasondentler.com/blog/2009/12/generate-audit-triggers-from-nhibernate-v2/</wp:comment_author_url>
			<wp:comment_author_IP>208.109.181.13</wp:comment_author_IP>
			<wp:comment_date>2009-12-31 17:03:21</wp:comment_date>
			<wp:comment_date_gmt>2009-12-31 23:03:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] About                   &laquo; Generate Audit Triggers From NHibernate [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Generate Audit Triggers from NHibernate v2</title>
		<link>http://jasondentler.com/blog/2009/12/generate-audit-triggers-from-nhibernate-v2/</link>
		<pubDate>Thu, 31 Dec 2009 21:55:57 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=490</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In my <a href="http://jasondentler.com/blog/2009/12/generate-audit-triggers-from-nhibernate/" target="_blank">December 23rd post</a>, I showed you how to generate audit tables and triggers from your <a href="http://nhforge.org" target="_blank">NHibernate</a> mappings. Since then, I had an amazing conversation with <a href="http://fabiomaulo.blogspot.com/" target="_blank">Fabio Maulo</a>, NHibernate project owner, where among other things, he showed me a much better way to accomplish the same task.</p>  <p>In my last post, we used the NHibernate mapping as source data to create our script by hand. With this version, we’re going to take it a step further. When you add an IAuxilaryDatabaseObject to the mappings, it will be included in the ddl output of SchemaExport. These have no effect outside of SchemaExport. It’s a simple way to include additional items in your database setup scripts.</p>  <p>In our main program, we set up some additional columns to hold our audit data – user, timestamp, and action. These columns will be added to each audit table. Then, we use TriggerStrategy to add auxiliary database objects to our configuration.</p>  <pre class="brush:csharp">        static void AddAuditing(Configuration cfg)
        {
            var columns = new List&lt;auditcolumn&gt;();
            columns.Add(new AuditColumn() {
                Name = &quot;AuditUser&quot;,
                SqlType = &quot;sysname&quot;, 
                IsNullable = false, 
                ValueFunction = delegate(TriggerActions actions) 
                {
                    return &quot;system_user&quot;;
                }
            });

            columns.Add(new AuditColumn()
            {
                Name = &quot;AuditTimestamp&quot;,
                Value = new SimpleValue() { TypeName = NHibernate.NHibernateUtil.DateTime.Name },
                IsNullable = false,
                IncludeInPrimaryKey = true,
                ValueFunction = delegate(TriggerActions actions)
                {
                    return &quot;getdate()&quot;;
                }
            });

            columns.Add(new AuditColumn()
            {
                Name = &quot;AuditOperation&quot;,
                Value = new SimpleValue() { TypeName = NHibernate.NHibernateUtil.AnsiChar.Name },
                Length = 1,
                IsNullable = false,
                ValueFunction = delegate(TriggerActions actions)
                {
                    switch (actions)
                    {
                        case TriggerActions.Insert:
                            return &quot;'I'&quot;;
                        case TriggerActions.Update:
                            return &quot;'U'&quot;;
                        case TriggerActions.Delete:
                            return &quot;'D'&quot;;
                        default:
                            throw new ApplicationException(&quot;Triggers handling multiple event types (INSERT, UPDATE, DELETE) are unsupported. &quot;);
                    }
                }
            });
                

            new NHibernate.Audit.TriggerStrategy(
                new NHibernate.Audit.AuditTableBuilder(),
                new NHibernate.Audit.MsSqlTriggerBuilder(), 
                columns).Configure(cfg);
	}</pre>

<p>Trigger strategy simply hands off the work of audit table builder and trigger builder.</p>

<p>Audit table builder creates an audit table object for each table already in your mapping. It is also responsible for calculating the name of each audit table. Yes, the naming should probably be pulled in to a separate class, but oh well.</p>

<p>Audit table uses NHibernate's table object internally to create a duplicate of each table, plus the additional audit columns, then exposes the drop/create scripts for this table object as an IAuxilaryDatabaseObject. I've ommitted some of the name-related static below.</p>

<pre class="brush:csharp">using System.Collections.Generic;
using NHibernate.Mapping;

namespace NHibernate.Mapping
{
    
    public class AuditTable : AbstractAuxiliaryDatabaseObject 
    {

        public AuditTable(string Name, Table DataTable, IEnumerable&lt;AuditColumn&gt; AuditColumns)
        {
            dataTable = DataTable;
            auditTable = new Table();
            auditColumns = AuditColumns;
            BuildAuditTable(Name);
        }

        protected readonly Table dataTable;
        protected readonly Table auditTable;
        protected readonly IEnumerable&lt;AuditColumn&gt; auditColumns;

        protected virtual void BuildAuditTable(string Name)
        {
            auditTable.Catalog = dataTable.Catalog;
            auditTable.Schema = dataTable.GetQuotedSchema();
            auditTable.Name = Name;

            foreach (Column column in dataTable.ColumnIterator)
                CopyColumn(column);

            CopyPrimaryKey(dataTable);

            AddAuditColumns();
        }

        protected virtual void CopyColumn(Column column)
        {
            auditTable.AddColumn((Column)column.Clone());
        }

        protected virtual void CopyPrimaryKey(Table dataTable)
        {
            if (dataTable.PrimaryKey != null)
            {
                var pk = new PrimaryKey();
                auditTable.PrimaryKey = pk;
                foreach (Column c in dataTable.PrimaryKey.ColumnIterator)
                {
                    Column auditTableColumn = auditTable.ColumnIterator.WithName(c.Name);
                    pk.AddColumn(auditTableColumn);
                }
            }
            else
            {
                throw new System.NotSupportedException(&quot;Tables without primary keys are not supported.&quot;);
            }
        }

        protected virtual void AddAuditColumns()
        {
            foreach (AuditColumn source in auditColumns)
            {
                Column dest = (Column)source.Clone();
                auditTable.AddColumn(dest);
                if (source.IncludeInPrimaryKey)
                    auditTable.PrimaryKey.AddColumn(dest);
            }
        }


        public override string SqlCreateString(NHibernate.Dialect.Dialect dialect, NHibernate.Engine.IMapping p, string defaultCatalog, string defaultSchema)
        {
            return auditTable.SqlCreateString(dialect, p, defaultCatalog, defaultSchema);
        }

        public override string SqlDropString(NHibernate.Dialect.Dialect dialect, string defaultCatalog, string defaultSchema)
        {
            return auditTable.SqlDropString(dialect, defaultCatalog, defaultSchema);
        }
    }

}</pre>

<p>That handles our audit tables. Now let’s look at the triggers.</p>

<p>Abstract trigger builder builds insert, update, and delete triggers for each table. You should override BuildTriggerBody to customize the body of your trigger. I’ve created MsSqlTriggerBuilder to output my preferred trigger code. </p>

<p>NHibernate dialects have no concept of triggers and lack the required strings to build a DBMS-specific CREATE TRIGGER statements. Instead, you specify a trigger type inherited from AbstractTrigger specific to your database to build the CREATE TRIGGER statement. I’ve included MsSqlTrigger.</p>

<p>&#160;</p>

<p><a href="http://jasondentler.com/blog/wp-content/uploads/2009/12/Triggers1.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" title="Triggers" border="0" alt="Triggers" src="http://jasondentler.com/blog/wp-content/uploads/2009/12/Triggers_thumb1.png" width="578" height="821" /></a></p>

<p>&#160;</p>

<p>That’s all folks. You can grab the code from my SVN repository at <a href="http://basiclyeverything.googlecode.com/svn/trunk/AuditLogExample/">http://basiclyeverything.googlecode.com/svn/trunk/AuditLogExample/</a></p>

<p>Since I’m still using the system_user function to get the current user, you will still need to impersonate the user all the way down to the database level. I’ve found a way around this, and I will show it to you next time. Until then, Happy New Year.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>490</wp:post_id>
		<wp:post_date>2009-12-31 15:55:57</wp:post_date>
		<wp:post_date_gmt>2009-12-31 21:55:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>generate-audit-triggers-from-nhibernate-v2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ms-sql-server"><![CDATA[MS SQL Server]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<wp:comment>
			<wp:comment_id>188</wp:comment_id>
			<wp:comment_author><![CDATA[flynn like]]></wp:comment_author>
			<wp:comment_author_email>flynnlike@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>95.17.170.30</wp:comment_author_IP>
			<wp:comment_date>2010-01-01 01:23:04</wp:comment_date>
			<wp:comment_date_gmt>2010-01-01 07:23:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[happy new year to you as well dude!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Exploiting Context_Info for Fun and Audit</title>
		<link>http://jasondentler.com/blog/2010/01/exploiting-context_info-for-fun-and-audit/</link>
		<pubDate>Sat, 02 Jan 2010 17:05:22 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=505</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is a continuation of my posts about auditing with triggers. </p>  <h3>The Problem</h3>  <p>My previous examples have used system_user as the source of user information in the audit log, which required you to impersonate users down to the database level, that is to open the connection in the context of the application user, not some shared generic account. There are several reasons why this is not a good idea:</p>  <ol>   <li>You either don’t have per-user credentials appropriate to create SQL server accounts (typical in public-facing web applications), or are unable to do so for various reasons ranging from security concerns to account management workload. </li>    <li>When each user authenticates with their own credentials, this effectively disables connection pooling. Especially in high-volume web scenarios, this will kill performance and put a strain on server resources. </li>    <li>I believe the loss of connection pooling will also burn through your license pool with per-user licensed SQL servers. I may be mistaken on this point, as I haven’t worked with a per-user licensed SQL server for the better part of a decade. </li>    <li>If you are unwilling to use SQL server authentication, you will most likely have to set up Kerberos constrained delegation so that your database server trusts your web server to authenticate users. This is a royal PITA to implement. </li> </ol>  <h3>The Trouble With Triggers</h3>  <p>As far as input inside a trigger, you only have access to the data being manipulated, system functions, and very little else. You can’t use SELECT statements in triggers either, at least not against normal tables and views. </p>  <h3>SQL Context Info</h3>  <p>Starting with MS SQL Server 2000, you can associate up to 128 bytes of data with the current connection using the SET CONTEXT_INFO command. Starting with SQL 2005, you can use the CONTEXT_INFO function to retrieve this data. This data is available everywhere, including triggers. </p>  <p>If you use connection pooling (and you probably are), this data is not reset when the connection is reused. </p>  <p>To set your context info data, use the <a href="http://msdn.microsoft.com/en-us/library/aa259199(SQL.80).aspx" target="_blank">SET CONTEXT_INFO</a> command like so:</p>  <pre class="brush:sql">DECLARE @Ctx varbinary(128)
SELECT @Ctx = CONVERT(varbinary(128), 'My context data goes here.')
SET CONTEXT_INFO @Ctx</pre>

<p>SET CONTEXT_INFO can only be used with variables and constants, meaning you can’t CONVERT data types or concatenate strings or any other calculation in the same command. </p>

<p>To retrieve the context data, use the <a href="http://msdn.microsoft.com/en-us/library/ms180125(SQL.90).aspx" target="_blank">CONTEXT_INFO</a> function:</p>

<pre class="brush:sql">DECLARE @CtxData varchar(128)
SELECT @CtxData = CONVERT(VarChar(128), CONTEXT_INFO())
PRINT @CtxData</pre>

<p>This will output ‘My context data goes here.                   ’ etc. Note – The   is ASCII character 0 (NULL). Why? We’re converting the string to fixed-length binary and then converting it back.</p>

<h3>Know Your Roots</h3>

<p><a href="http://jasondentler.com/blog/wp-content/uploads/2010/01/image.png"><img style="border-right-width: 0px; margin: 4px 10px 4px 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" align="left" src="http://jasondentler.com/blog/wp-content/uploads/2010/01/image_thumb.png" width="137" height="59" /></a> There was a time when programmers weren’t protected from the fact that strings are just chunks of memory. Just like programmers in the old days, you have two options: Pascal strings or C strings. You can stuff a length byte at the beginning of your context as in Pascal, or you can search for the null termination of your string as in the C language. </p>

<p>Also, because nchar and nvarchar are UNICODE UCS-2 strings, they use two bytes (of your 128 maximum) per character. char and varchar only use one byte per character, but the character set is limited. It’s a trade-off. </p>

<h3>How does this help me?</h3>

<p>We can use context info data to get information from our application in to our audit triggers. For example, we can get the current user name from our application or evem some identifying information about the location in our application, such as the name of the controller and action that triggered the event. Just be conscious of the 128 byte limitation. It's probably better to store an id for more information such as the id of the user account, or an id that references some lookup table with application locations.</p>

<h3>The Code, Sir. </h3>

<p>We will override the GetConntion() method of DriverConnectionProvider so that every NHibernate connection will have the current username stored in the context.</p>

<pre class="brush:csharp">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NHibernate.Connection;
using System.Data;

namespace NHibernate.Connection
{
    public class ContextDriverConnectionProvider : DriverConnectionProvider 
    {

        public override System.Data.IDbConnection GetConnection()
        {
            var conn = base.GetConnection();
            SetContext(conn);
            return conn;
        }

        private const string CONTEXT_SQL = &quot;declare @Length tinyintndeclare @Ctx varbinary(128)nselect @Length = len(@username)nselect @Ctx = convert(binary(1), @Length) + convert(varbinary(127), @username)nset context_info @Ctx&quot;;

        protected virtual void SetContext(IDbConnection conn)
        {
            IDbCommand cmd = conn.CreateCommand();
            IDbDataParameter param = cmd.CreateParameter();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = CONTEXT_SQL;

            param.ParameterName = &quot;@username&quot;;
            param.DbType = DbType.AnsiString;
            param.Size = 127;
            param.Value = System.Environmnt.UserName;
            cmd.Parameters.Add(param);

            cmd.ExecuteNonQuery();
        }

    }
}</pre>

<p>This will run the following SQL code when NHibernate opens a SQL connection. Note that @username is a variable defined as a parameter on our IDbCommand. Also, I chose to use Pascal strings with the length stored in the first byte.</p>

<pre class="brush:sql">declare @Length tinyint
declare @Ctx varbinary(128)
select @Length = len(@username)
select @Ctx = convert(binary(1), @Length) + convert(varbinary(127), @username)
set context_info @Ctx</pre>

<p>We'll alter our trigger code to get the username from the context instead of system_user.</p>

<pre class="brush:sql">set nocount on
declare @Username varchar(127)
declare @Length tinyint
declare @Ctx varbinary(128)
select @Ctx = CONTEXT_INFO()
select @Length = convert(tinyint, substring(@Ctx, 1, 1))
select @Username = convert(varchar(127), substring(@Ctx, 2, 1 + @Length))
if (@Username is null) select @Username = SYSTEM_USER</pre>

<h3>Security Implications</h3>

<p>I am not a security expert. I am certainly not a SQL security expert. However, I believe this method is secure for most scenarios. In my opinion, this is at least as secure as auditing through NHibernate interceptors and events. </p>

<p>Here’s a few ways to circumvent the system, and how you can prevent that from happening:</p>

<ul>
  <li><strong>Manipulate the audit logs directly.</strong> Obviously, in any audit scenario, you should set permission on your audit tables to make them select and insert only. </li>

  <li><strong>Alter the context_info data directly.</strong> A user overwrites their own context_info with that of another user, effectively blaming their actions on someone else. This can be done through a SQL injection attack some other security breach. If you go on vacation with the front door open, don’t be surprised when your house is robbed. </li>

  <li><strong>Fail to set context_info.</strong> Again, this requires some other security breach. You may also change your trigger code to ROLLBACK TRANSACTION and RAISERROR when context_info is not set. This will force a rollback of the transaction (or in the case of no explicit transaction, the SQL statement that caused the trigger), abort the remainder of the SQL batch, and report an error. The approach requires everyone, including your DBA, to set an appropriate context_info before altering any audited data. </li>
</ul>

<p>This is certainly my worst blog post this year, but don’t worry. I can do worse. </p>

<p>- Jason</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>505</wp:post_id>
		<wp:post_date>2010-01-02 11:05:22</wp:post_date>
		<wp:post_date_gmt>2010-01-02 17:05:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>exploiting-context_info-for-fun-and-audit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ms-sql-server"><![CDATA[MS SQL Server]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<wp:comment>
			<wp:comment_id>437</wp:comment_id>
			<wp:comment_author><![CDATA[Thomas Laresch]]></wp:comment_author>
			<wp:comment_author_email>expendible@laresch.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.9.102.2</wp:comment_author_IP>
			<wp:comment_date>2011-09-14 13:15:13</wp:comment_date>
			<wp:comment_date_gmt>2011-09-14 13:15:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jason,

Thanks for the article.  I've decided to go forward with Pascal strings as in your example.

There seems to be an error in your last use of substring:
substring(@Ctx, 2, 1 + @Length)) 
In T-SQL, the third parameter should be the length:
substring(@Ctx, 2, @Length)

For my code, I converted NVARCHAR, so I had to double the length:
substring(@Ctx, 2, (2*@Length))]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1316006113.436";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:127:{s:15:"comment_post_ID";s:3:"505";s:14:"comment_author";s:14:"Thomas Laresch";s:20:"comment_author_email";s:22:"expendible@laresch.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:381:"Jason,

Thanks for the article.  I've decided to go forward with Pascal strings as in your example.

There seems to be an error in your last use of substring:
substring(@Ctx, 2, 1 + @Length)) 
In T-SQL, the third parameter should be the length:
substring(@Ctx, 2, @Length)

For my code, I converted NVARCHAR, so I had to double the length:
substring(@Ctx, 2, (2*@Length))";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:10:"74.9.102.2";s:10:"user_agent";s:170:"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Tablet PC 2.0; InfoPath.2; MS-RTC LM 8)";s:8:"referrer";s:79:"http://jasondentler.com/blog/2010/01/exploiting-context_info-for-fun-and-audit/";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:79:"http://jasondentler.com/blog/2010/01/exploiting-context_info-for-fun-and-audit/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:14:"Thomas Laresch";s:10:"POST_email";s:22:"expendible@laresch.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:382:"Jason,

Thanks for the article.  I've decided to go forward with Pascal strings as in your example.

There seems to be an error in your last use of substring:
substring(@Ctx, 2, 1 + @Length)) 
In T-SQL, the third parameter should be the length:
substring(@Ctx, 2, @Length)

For my code, I converted NVARCHAR, so I had to double the length:
substring(@Ctx, 2, (2*@Length)) ";s:20:"POST_comment_post_ID";s:3:"505";s:19:"POST_comment_parent";s:1:"0";s:11:"POST_submit";s:14:"Submit Comment";s:14:"POST_formInput";s:0:"";s:26:"POST_akismet_comment_nonce";s:10:"17bd229ac9";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-a4d419d4-d88e-48e1-8603-867457fea1d5";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG280";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg280.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:181:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.147";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31324";s:7:"SUBMASK";s:13:"255.255.255.0";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG280$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:18:"HTTP_CACHE_CONTROL";s:8:"no-cache";s:15:"HTTP_CONNECTION";s:10:"Keep-Alive";s:19:"HTTP_CONTENT_LENGTH";s:3:"637";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:222:"image/jpeg, application/x-ms-application, image/gif, application/xaml+xml, image/pjpeg, application/x-ms-xbap, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, application/x-shockwave-flash, */*";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:20:"HTTP_ACCEPT_LANGUAGE";s:5:"en-US";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:79:"http://jasondentler.com/blog/2010/01/exploiting-context_info-for-fun-and-audit/";s:15:"HTTP_USER_AGENT";s:170:"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Tablet PC 2.0; InfoPath.2; MS-RTC LM 8)";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"637";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:10:"74.9.102.2";s:11:"REMOTE_HOST";s:10:"74.9.102.2";s:11:"REMOTE_PORT";s:5:"16516";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:26:"/blog/wp-comments-post.php";s:14:"ORIG_PATH_INFO";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1316006111";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316950857.9112";s:7:"message";s:44:"Jason changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4561</wp:comment_id>
			<wp:comment_author><![CDATA[Context_Info ili gde da smestim podatke o konekciji &laquo; SQLServer.iz.rs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sqlserver.iz.rs/?p=87</wp:comment_author_url>
			<wp:comment_author_IP>64.22.117.28</wp:comment_author_IP>
			<wp:comment_date>2011-12-29 15:46:24</wp:comment_date>
			<wp:comment_date_gmt>2011-12-29 15:46:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://jasondentler.com/blog/2010/01/exploiting-context_info-for-fun-and-audit/ i naravno, Microsoft Books OnLine.  Tagovi: Context_info, Login, Trigger Leave a comment     Comments (0) Trackbacks (0) ( subscribe to comments on this post ) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1325173584.9413";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:115:{s:15:"comment_post_ID";s:3:"505";s:14:"comment_author";s:75:"Context_Info ili gde da smestim podatke o konekciji &laquo; SQLServer.iz.rs";s:18:"comment_author_url";s:28:"http://sqlserver.iz.rs/?p=87";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:251:"[...] http://jasondentler.com/blog/2010/01/exploiting-context_info-for-fun-and-audit/ i naravno, Microsoft Books OnLine.  Tagovi: Context_info, Login, Trigger Leave a comment     Comments (0) Trackbacks (0) ( subscribe to comments on this post ) [...]";s:12:"comment_type";s:8:"pingback";s:7:"user_ip";s:12:"64.22.117.28";s:10:"user_agent";s:48:"The Incutio XML-RPC PHP Library -- WordPress/3.2";s:8:"referrer";s:0:"";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:79:"http://jasondentler.com/blog/2010/01/exploiting-context_info-for-fun-and-audit/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"failed";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:16:"/blog/xmlrpc.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-22018c95-06e9-4142-8f83-90208f8750d5";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:11:"commonfiles";s:27:"C:Program FilesCommon Files";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG279";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg279.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:241:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools;C:Program Files (x86)Microsoft ASP.NETASP.NET Web Pagesv1.0";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.146";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:9:"progfiles";s:15:"C:Program Files";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31323";s:7:"SUBMASK";s:13:"255.255.255.0";s:9:"systemdir";s:17:"C:Windowssystem32";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG279$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:19:"HTTP_CONTENT_LENGTH";s:3:"308";s:17:"HTTP_CONTENT_TYPE";s:8:"text/xml";s:11:"HTTP_ACCEPT";s:3:"*/*";s:20:"HTTP_ACCEPT_ENCODING";s:29:"deflate;q=1.0, compress;q=0.5";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:15:"HTTP_USER_AGENT";s:48:"The Incutio XML-RPC PHP Library -- WordPress/3.2";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:34:"D:Hosting8214110htmlblogxmlrpc.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"308";s:12:"CONTENT_TYPE";s:8:"text/xml";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:34:"D:Hosting8214110htmlblogxmlrpc.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:12:"64.22.117.28";s:11:"REMOTE_HOST";s:12:"64.22.117.28";s:11:"REMOTE_PORT";s:5:"41781";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:16:"/blog/xmlrpc.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:3:"URL";s:16:"/blog/xmlrpc.php";s:14:"ORIG_PATH_INFO";s:16:"/blog/xmlrpc.php";s:8:"PHP_SELF";s:16:"/blog/xmlrpc.php";s:12:"REQUEST_TIME";s:10:"1325173581";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1325184922.8519";s:7:"message";s:44:"Jason changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Sharpening My C# Skills</title>
		<link>http://jasondentler.com/blog/2010/01/sharpening-my-c-skills/</link>
		<pubDate>Wed, 13 Jan 2010 03:34:26 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2010/01/sharpening-my-c-skills/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>You may have noticed a lack of VB.NET source code on my blog recently. There’s a reason. I’ve always been able to read and write C#. at least enough to order off the menu or ask for directions to the Men’s room. </p>  <p>The ALT.NET crowd is almost exclusively C#, except where they’ve moved beyond it.&#160; If I’m going to participate, it’s past time for me to become fluent. Until at least April, I won’t write a single line of VB.NET outside of work. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>508</wp:post_id>
		<wp:post_date>2010-01-12 21:34:26</wp:post_date>
		<wp:post_date_gmt>2010-01-13 03:34:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sharpening-my-c-skills</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>February Updates</title>
		<link>http://jasondentler.com/blog/2010/02/february-updates/</link>
		<pubDate>Fri, 05 Feb 2010 02:49:37 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2010/02/february-updates/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I have a few quick announcements.</p>  <ul>   <li><a href="http://fabiomaulo.blogspot.com/" target="_blank">Fabio</a> has been busy on some really amazing <a href="http://fabiomaulo.blogspot.com/2010/01/map-nhibernate-using-your-api.html" target="_blank">mapping</a> <a href="http://fabiomaulo.blogspot.com/2010/02/conform-nhibernate-un-mapping.html" target="_blank">magic</a>.</li>    <li>Aaron Cure’s <a href="http://www.packtpub.com/nhibernate-2-x-beginners-guide/book" target="_blank">NHibernate 2.x Beginners Guide</a> from Packt Publishing will be out in May.</li>    <li>I’m making progress on Project <a href="http://code.google.com/p/nenverse/" target="_blank">Nenverse</a>. The concept is similar to Hibernate’s Envers. I’m not ready to announce it to the world just yet, but you want to look over the code or even contribute, it’s out there.</li>    <li>In an effort to avoid meta-blogging at all cost, I won’t mention the cool new stuff over on the right, or the new text up above.</li> </ul>  <p>That’s it for now.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>510</wp:post_id>
		<wp:post_date>2010-02-04 20:49:37</wp:post_date>
		<wp:post_date_gmt>2010-02-05 02:49:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>february-updates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nenverse"><![CDATA[Nenverse]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
	</item>
	<item>
		<title>Big hairy bugs and other weird looking stuff.</title>
		<link>http://jasondentler.com/blog/2010/02/big-hairy-bugs-and-other-weird-looking-stuff/</link>
		<pubDate>Thu, 18 Feb 2010 00:52:25 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2010/02/big-hairy-bugs-and-other-weird-looking-stuff/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Yesterday, I spent an embarrassing amount of time searching for a bug. I’m sure this is well-documented somewhere on MSDN. It even generates a compiler warning in some cases. Still, it’s not the behavior one would expect from C#.</p>  <p>When creating lambdas (including LINQ expressions) inside a for each loop, don’t use the iterator variable in your lambda. Let me explain with some code:</p>  <pre class="brush:csharp">foreach (Type controllerType in controllerTypes)
{
     kernel.Bind(controllerType).ToSelf().InRequestScope();
     kernel.Bind&lt;IController&gt;().ToMethod(ctx =&gt; ctx.kernel.Get(controllerType)).Named(GetName(controllerType));
}</pre>

<p>Why am I using a method to get the controller? It just so happens that my AccountController is also a <a href="http://jasondentler.com/blog/2009/11/simple-domain-events/" target="_blank">domain event handler</a> for my AccountNameAlreadyUsed event. This goes back to Ayende's tip in my <a href="http://jasondentler.com/blog/2009/11/simple-domain-events/" target="_blank">domain events post</a>: To get a message back to the UI, fire a new event and have the UI listen for it. In this case, I need the UI to complain when the account name they selected is already being used. </p>

<p>In case your mind has wandered to the dark side, throwing exceptions is not an acceptable way of passing messages in an application.</p>

<p>Now, why the odd mappings? Let's say I bind IController and IHandle&lt;AccountNameAlreadyUsed&gt; to AccountController in the request scope. It doesn't quite work like you would first expect. You will have one instance of AccountController returned for IController and a separate instance for IHandle&lt;AccountNameAlreadyUsed&gt;. </p>

<p>Instead, I’m saying that for each request for an IController, go get an AccountController, essentially delegating the request to the ToSelf() binding. I have a similar ToMethod() lambda binding for IHandle&lt;AccountNameAlreadyUsed&gt;. Since both interface bindings are fulfilled by the ToSelf binding, only one instance of AccountController is created for the request, instead of two.</p>

<p>So, this explains why I need the lambda in the first place. Why didn’t the code above work?</p>

<p>As it turns out, there was some funny business going on underneath the covers between the foreach iterator and the lambda. Here’s the symptom: No matter which “instance” of the lambda was being referenced, inside the lambda, the iterator variable (controllerType) was always the first value that was iterated. No matter which controller I requested, I always got an instance of AccountController, since it happens to be first alphabetically.</p>

<p>Once you realize what’s going on, the fix is simple. Create another variable and use it inside the lambda instead. So, instead of the code above, we get this:</p>

<pre class="brush:csharp">foreach (Type controllerType in controllerTypes)
{
     var controllerType2 = controllerType;
     kernel.Bind(controllerType).ToSelf().InRequestScope();
     kernel.Bind&lt;IController&gt;().ToMethod(ctx =&gt; ctx.kernel.Get(controllerType2)).Named(GetName(controllerType));
}</pre>

<p>If, instead of a lambda, we had a LINQ expression, the compiler would generate a warning about this issue – at least in VB.NET. If I hadn’t already seen that warning from LINQ expressions, I would probably still be bug hunting.</p>

<p>Jason</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>511</wp:post_id>
		<wp:post_date>2010-02-17 18:52:25</wp:post_date>
		<wp:post_date_gmt>2010-02-18 00:52:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>big-hairy-bugs-and-other-weird-looking-stuff</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>189</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Stum]]></wp:comment_author>
			<wp:comment_author_email>blog@stum.de</wp:comment_author_email>
			<wp:comment_author_url>http://www.Stum.de</wp:comment_author_url>
			<wp:comment_author_IP>98.164.213.215</wp:comment_author_IP>
			<wp:comment_date>2010-02-17 23:50:12</wp:comment_date>
			<wp:comment_date_gmt>2010-02-18 05:50:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Eric Lippert (who else?) has two important posts about this. Basically you are only capturing the reference to the loop variable as it's delay executed:

Closing over the loop variable considered harmful:
http://blogs.msdn.com/ericlippert/archive/2009/11/12/closing-over-the-loop-variable-considered-harmful.aspx

Closing over the loop variable, part two:
http://blogs.msdn.com/ericlippert/archive/2009/11/16/closing-over-the-loop-variable-part-two.aspx

As a C# dev, I really recommend subscribing to his blog. He is one of the Language Designers and his postings are really insightful, as he has the gift of being able to explain stuff clearly.

HTH!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>190</wp:comment_id>
			<wp:comment_author><![CDATA[Simon]]></wp:comment_author>
			<wp:comment_author_email>smartin@ifslearning.ac.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.194.62.194</wp:comment_author_IP>
			<wp:comment_date>2010-02-24 08:14:07</wp:comment_date>
			<wp:comment_date_gmt>2010-02-24 14:14:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I know this is off topic here but I couldn't find any other way of geting in touch with you about the N* Stack project.
I am trying to follow along as a way to learn more about MVC and have got all the way to the end of part 10 and the project does not run. I tried the download you provided but even when I fix hard coded paths the website does not work. Do you have a finished solution I could download?
Do you have any plans to finish the series off?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>191</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2010-02-25 04:44:41</wp:comment_date>
			<wp:comment_date_gmt>2010-02-25 10:44:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Simon - It's on hold for while. You can always find me on twitter: @jasondentler]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>190</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>192</wp:comment_id>
			<wp:comment_author><![CDATA[Simon]]></wp:comment_author>
			<wp:comment_author_email>simonjmartin@btinternet.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>86.179.105.9</wp:comment_author_IP>
			<wp:comment_date>2010-02-27 10:14:20</wp:comment_date>
			<wp:comment_date_gmt>2010-02-27 16:14:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Jason - thanks for getting back to me.

Sorry I haven't got into twitter yet (I haven't made the jump from msn) Do you have a download that runs a basic site or high level details of what needs doing so I can finish things off on my own. 
I've managed to get a homepage to run by adding it back into the .web project in views - but you said to delete the views in the 1st post so I guess they don't belong there now?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>193</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2010-02-28 07:09:05</wp:comment_date>
			<wp:comment_date_gmt>2010-02-28 13:09:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[We deleted them because the views that come with the project template don't match up with the controllers I have planned.

I always keep my views in the standard WebProject  Views  ControllerName  View.aspx location.

All of the NHibernate stuff is basically done. You shouldn't have much trouble finishing up this project on your own.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>March Updates</title>
		<link>http://jasondentler.com/blog/2010/03/march-updates/</link>
		<pubDate>Thu, 18 Mar 2010 14:43:51 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2010/03/march-updates/</guid>
		<description></description>
		<content:encoded><![CDATA[<h5>Some news from the month of March. </h5>  <p>Simon Duduica of Bucharest, Romania and his team are porting Hibernate Envers to .NET / <a href="http://nhforge.org" target="_blank">NHibernate</a>. </p>  <p>Michele Minorello is working on NHibernate Search to add Loquacious configuration and Linq2Lucene. </p>  <p>I have a book deal with Packt Publishing. <u>NHibernate 3.0 Cookbook</u> will cover existing and new 3.0 features of NHibernate, as a series of short, easy to follow recipes that can be combined to build great NHibernate applications. In addition to NHibernate 3, the book also covers NHContrib projects, some ideas from uNHAddIns, fluent &amp; auto-mapping with Fluent NHibernate, and ConfORM.</p>
<p>I'd like to send a HUGE thank you to my technical reviewers, including Fabio Maulo, Jose Romaniello, and Tuna Toksoz.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>513</wp:post_id>
		<wp:post_date>2010-03-18 08:43:51</wp:post_date>
		<wp:post_date_gmt>2010-03-18 14:43:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>march-updates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nenverse"><![CDATA[Nenverse]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="category" nicename="nhibernate-cookbook"><![CDATA[NHibernate Cookbook]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>194</wp:comment_id>
			<wp:comment_author><![CDATA[Paulo Quicoli]]></wp:comment_author>
			<wp:comment_author_email>pauloquicoli@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nhibernatebrasil.net/</wp:comment_author_url>
			<wp:comment_author_IP>201.92.125.14</wp:comment_author_IP>
			<wp:comment_date>2010-03-19 05:06:13</wp:comment_date>
			<wp:comment_date_gmt>2010-03-19 11:06:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[WOW]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>195</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jason.irwin@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://irwinj.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>63.87.19.226</wp:comment_author_IP>
			<wp:comment_date>2010-03-29 12:14:45</wp:comment_date>
			<wp:comment_date_gmt>2010-03-29 18:14:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sweet - I'm looking forward to your book. The community is lacking a good 2.0 book, let alone 3.0. When is it due out?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>196</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jason.irwin@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://irwinj.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>63.87.19.226</wp:comment_author_IP>
			<wp:comment_date>2010-03-29 15:09:15</wp:comment_date>
			<wp:comment_date_gmt>2010-03-29 21:09:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great news about your book. My bookshelf is lacking a good 2.0 book, let alone 3.0. Any estimate on a release date?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>197</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2010-06-13 07:33:16</wp:comment_date>
			<wp:comment_date_gmt>2010-06-13 13:33:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry. These comments got trapped in a black hole. 

My book will be out in the fall, hopefully around the same time as NH 3 GA.  The book should be available for pre-order on the Packt website in a few weeks. I will absolutely make a new post once it's out.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>195</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Reviewed: NHibernate 2 Beginner’s Guide</title>
		<link>http://jasondentler.com/blog/2010/06/review-nhibernate-2-beginners-guide/</link>
		<pubDate>Fri, 11 Jun 2010 16:22:09 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2010/06/review-nhibernate-2-beginners-guide/</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://jasondentler.com/blog/wp-content/uploads/2010/06/8907OS_MockupCover_Beginersguide2.jpg"><img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" title="8907OS_MockupCover_Beginers guide(2)" border="0" alt="8907OS_MockupCover_Beginers guide(2)" align="left" src="http://jasondentler.com/blog/wp-content/uploads/2010/06/8907OS_MockupCover_Beginersguide2_thumb.jpg" width="198" height="244" /></a> </p>  <p><a href="https://www.packtpub.com/nhibernate-2-x-beginners-guide/book" target="_blank">NHibernate 2 Beginner’s Guide</a> by Aaron Cure is the 3rd published <a href="http://nhforge.org/content/Books.aspx" target="_blank">book about NHibernate</a>. Each example in this book is presented in both C# and VB.NET, and some knowledge of these languages, as well as some basic understanding of ASP.NET WebForms is assumed. </p>  <p>Overall, for OR/M beginners and Entity Framework refugees, it provides a good foundation of NHibernate knowledge. The examples are simple enough to understand, and can easily be applied to real-world scenarios. There are, however, a few points of concern, such as the database-first approach, and the prescription of code generation.</p>  <p>Here’s a quick summary of what’s covered in each chapter:</p>  <p>As you might expect, chapter 1 gives a general overview of <a href="http://nhforge.org" target="_blank">NHibernate</a>, along with some code listings. </p>  <p>Chapter 2 sets up the database and table structure for the example model. </p>  <p>In chapter 3, the author takes us in to the world of POCO model design. He shows us NHibernate data types and their corresponding .NET data types, as well as setting up a collection for a one-to-many relationship. </p>  <p>In chapter 4, we begin the mapping process. After just a few pages, we have a completed NHibernate xml mapping. The chapter ends with a nice, quick example of a Fluent NHibernate code mapping. <a href="https://www.packtpub.com/sites/default/files/8907-chapter-4-data-cartography.pdf" target="_blank">Chapter 4 is available for preview on the Packt Website</a>.</p>  <p>In chapter 5, we start to get in to true NHibernate territory. The author shows us how to build a session factory, open a session, and then explains the proper use of transactions (Yes!). I would have preferred an example of session-per-request over the session provider singleton. Folks, save a kitten. Don’t use singletons. </p>  <p>Chapter 6 shows off all the log4net goodness baked in to NHibernate. </p>  <p>Chapter 7 explains the ins and outs of NHibernate configuration, with code and xml examples. </p>  <p>Chapter 8 shows us an example Data Access Object and how to build some Criteria queries with projections, paging, and sorting, It’s good stuff for beginners, but it doesn’t cover HQL. </p>  <p>In Chapter 9, the author shows us how to use NHibernate with ASP.NET WebForms data binding. No beginner’s book would be complete without showing the Microsoft way. </p>  <p>Chapter 10 deals with ASP.NET security and authorization, including a membership provider based on NHibernate.</p>  <p>Chapter 11 shows off several code generation tools. While this is the logical destination for anyone using a database-first approach, with a model-first approach, its unnecessary for all but the largest projects. </p>  <p><em>Disclosure: In exchange for </em><a href="http://www.packtpub.com/article/author_reviewing_for_packt" target="_blank"><em>non-monetary compensation</em></a><em>, I worked as one of two technical reviewers on this book, and I am currently writing </em><em><u>NHibernate</u></em><em><u> 3 Cookbook</u>, to be published by Packt later this year. </em></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>516</wp:post_id>
		<wp:post_date>2010-06-11 10:22:09</wp:post_date>
		<wp:post_date_gmt>2010-06-11 16:22:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>review-nhibernate-2-beginners-guide</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="books"><![CDATA[Books]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<wp:comment>
			<wp:comment_id>198</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Reviewed: NHibernate 2 Beginner’s Guide « Jason Dentler -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/jasondentler.com/blog/2010/06/review-nhibernate-2-beginners-guide/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>74.112.128.46</wp:comment_author_IP>
			<wp:comment_date>2010-06-13 09:48:05</wp:comment_date>
			<wp:comment_date_gmt>2010-06-13 15:48:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by fabiomaulo and Jorge Gamba, Jason Dentler. Jason Dentler said: Reviewed: NHibernate 2 Beginners Guide by Aaron Cure http://bit.ly/9zwv3J For OR/M beginners and Entity Framework refugees, it provides ... [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>NHibernate Auditing v3 – Poor Man’s Envers</title>
		<link>http://jasondentler.com/blog/2010/07/nhibernate-auditing-v3-poor-mans-envers/</link>
		<pubDate>Sun, 04 Jul 2010 19:40:41 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2010/07/nhibernate-auditing-v3-poor-mans-envers/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>First, let me explain the title of this post. The Hibernate folks – you know, that <a href="http://nhforge.org" target="_blank">NHibernate</a> knock off written in the Java (pronounced “ex em el”) programming language – have a project called Envers. Among other things, It audits changes to entities, then allows you to easily retrieve the entity as it was at any previous point in time. </p>  <p>Well, Simon Duduica is porting this over to .NET and NHibernate, and he’s making some AMAZING progress. On June 28th, he shared this news with us on the NH Contrib development group:</p>  <blockquote>   <p>Hi everybody,</p>    <p>I have news regarding Envers.NET. I've commited a version that works in basic tests for CUD operations, with entities that have relationships between them, also with entities that are not audited. To make things work I had to make two small modifications of NHibernate, both modifications were tested running all NHibernate unit tests and they all passed. I already sent the first modification to Fabio and the second I will send this evening. I would like to thank Tuna for helping me out with good advices when I was stuck :)</p> </blockquote>  <p>&#160;</p>  <p>So, on to the topic of this post. For <u>NHibernate 3.0 Cookbook</u>, I’ve included a section that explains how to use NHibernate to generate audit triggers. Originally, I had planned to use the code from <a href="http://jasondentler.com/blog/2009/12/generate-audit-triggers-from-nhibernate-v2/" target="_blank">my previous blog post on the topic</a>, but I didn’t like its structure. I also didn’t want to include all that plumbing code in the printed book. Instead, I’ve rewritten and contributed the “framework” code to <a href="http://code.google.com/p/unhaddins/" target="_blank">uNHAddIns</a>. The “how-to use it” is explained in the book, so I won’t explain it here.</p>  <p>Today, I was writing an integration test for this contribution, and thought the idea was worth sharing. I have a simple Cat class:</p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="ClassDiagram1" border="0" alt="ClassDiagram1" src="http://jasondentler.com/blog/wp-content/uploads/2010/07/ClassDiagram1.png" width="163" height="143" /> </p>  <p>When I do anything to this cat, in addition to the normal INSERT, UPDATE, or DELETE, a database trigger records that action in a table called CatAudit:</p>  <p><a href="http://jasondentler.com/blog/wp-content/uploads/2010/07/image.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://jasondentler.com/blog/wp-content/uploads/2010/07/image_thumb.png" width="206" height="159" /></a> </p>  <p>I wanted an easy way to investigate the contents of this table to prove that my audit triggers worked. Here’s what I came up with, along with help from Jose Romaniello (@jfroma). First, I created a class to match this table:</p>  <p><a href="http://jasondentler.com/blog/wp-content/uploads/2010/07/ClassDiagram11.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="ClassDiagram1" border="0" alt="ClassDiagram1" src="http://jasondentler.com/blog/wp-content/uploads/2010/07/ClassDiagram1_thumb.png" width="150" height="240" /></a> </p>  <p>Next, I mapped it, made it readonly and excluded it from hbm2ddl with this mapping:</p>  <pre class="brush:xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;hibernate-mapping xmlns=&quot;urn:nhibernate-mapping-2.2&quot;
				   assembly=&quot;uNhAddIns.Test&quot;
				   namespace=&quot;uNhAddIns.Test.Audit.TriggerGenerator&quot;&gt;
  &lt;typedef class=&quot;NHibernate.Type.EnumStringType`1[[uNhAddIns.Audit.TriggerGenerator.TriggerActions, uNhAddIns]], NHibernate&quot;
           name=&quot;triggerActions&quot; /&gt;
  &lt;class name=&quot;CatAudit&quot; 
         mutable=&quot;false&quot;
         schema-action=&quot;none&quot;&gt;
    &lt;composite-id&gt;
      &lt;key-property name=&quot;Id&quot; /&gt;
      &lt;key-property name=&quot;AuditUser&quot; /&gt;
      &lt;key-property name=&quot;AuditTimestamp&quot; /&gt;
    &lt;/composite-id&gt;
    &lt;property name=&quot;Color&quot;/&gt;
    &lt;property name=&quot;AuditOperation&quot; type=&quot;triggerActions&quot; /&gt;
  &lt;/class&gt;
	
&lt;/hibernate-mapping&gt;</pre>

<p>I made it readonly by setting mutable=&quot;false&quot; and excluded it from hbm2ddl with schema-action=&quot;none&quot;. That’s it!</p>

<p>By the way, the &lt;typedef&gt; along with type=&quot;triggerActions&quot; just tells NHibernate I've stored my TriggerActions enum values as strings, not numbers.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>527</wp:post_id>
		<wp:post_date>2010-07-04 13:40:41</wp:post_date>
		<wp:post_date_gmt>2010-07-04 19:40:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nhibernate-auditing-v3-poor-mans-envers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>199</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention NHibernate Auditing v3 – Poor Man’s Envers « Jason Dentler -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/jasondentler.com/blog/2010/07/nhibernate-auditing-v3-poor-mans-envers/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2010-07-04 15:00:15</wp:comment_date>
			<wp:comment_date_gmt>2010-07-04 21:00:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by José F. Romaniello. José F. Romaniello said: RT @jasondentler: Blogged: NHibernate Auditing v3 - Poor Man&#39;s Envers http://bit.ly/c2fAvg Thanks to @jfroma [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>200</wp:comment_id>
			<wp:comment_author><![CDATA[marek]]></wp:comment_author>
			<wp:comment_author_email>marek.stachura@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.dedico.pl</wp:comment_author_url>
			<wp:comment_author_IP>212.244.112.51</wp:comment_author_IP>
			<wp:comment_date>2010-07-05 02:22:06</wp:comment_date>
			<wp:comment_date_gmt>2010-07-05 08:22:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

interesting... 
I don't know Envers concept, but I'm afraid that the amount of extra tables (additional audit table per entity) can be disadvantage of the solution.
I think there should be a way to do it using two tables.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>201</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2010-07-05 04:51:00</wp:comment_date>
			<wp:comment_date_gmt>2010-07-05 10:51:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the comment Marek. 

Would you store your model in a single table with only 3 columns (EntityId, Key, Value). Why not? It's not relational.

I've seen many systems where there is only one Audit table for everything. They tend to be black holes where information goes in and nothing ever escapes.

The point of this exercise is to make this audit data just as available and accessible as the real application data.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>202</wp:comment_id>
			<wp:comment_author><![CDATA[marek]]></wp:comment_author>
			<wp:comment_author_email>marek.stachura@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.dedico.pl</wp:comment_author_url>
			<wp:comment_author_IP>212.244.112.51</wp:comment_author_IP>
			<wp:comment_date>2010-07-06 01:30:06</wp:comment_date>
			<wp:comment_date_gmt>2010-07-06 07:30:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Jason,

well, yes, the approach I'm talking about is maybe not 100% relational, but, I think it could be tuned to be so.
Please see following solution:
http://www.matthidinger.com/archive/2008/05/08/linq-to-sql-audit-trail.aspx
It is using Linq To Sql but we implemented this idea using NHibernate.
Please note in Audit table TableKey and TableName, using polymorphism you could make relation to your entity.

Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>203</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2010-07-06 07:13:37</wp:comment_date>
			<wp:comment_date_gmt>2010-07-06 13:13:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's a pretty slick solution, but I don't see the benefit of saving a few tables over the additional application complexity.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3515</wp:comment_id>
			<wp:comment_author><![CDATA[Steve]]></wp:comment_author>
			<wp:comment_author_email>steveu64@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>86.21.254.65</wp:comment_author_IP>
			<wp:comment_date>2011-12-13 11:38:45</wp:comment_date>
			<wp:comment_date_gmt>2011-12-13 11:38:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Jason,

I'm currently using fluent nhibernate for my configuration and wondered if the auditing can be setup with it. I cant seem to get it to work and there arent any examples of a fluent configuration in your book]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1323776325.4955";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:128:{s:15:"comment_post_ID";s:3:"527";s:14:"comment_author";s:5:"Steve";s:20:"comment_author_email";s:18:"steveu64@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:220:"Hi Jason,

I'm currently using fluent nhibernate for my configuration and wondered if the auditing can be setup with it. I cant seem to get it to work and there arent any examples of a fluent configuration in your book";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:12:"86.21.254.65";s:10:"user_agent";s:90:"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.24) Gecko/20111103 Firefox/3.6.24";s:8:"referrer";s:77:"http://jasondentler.com/blog/2010/07/nhibernate-auditing-v3-poor-mans-envers/";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:77:"http://jasondentler.com/blog/2010/07/nhibernate-auditing-v3-poor-mans-envers/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:5:"Steve";s:10:"POST_email";s:18:"steveu64@gmail.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:220:"Hi Jason,

I'm currently using fluent nhibernate for my configuration and wondered if the auditing can be setup with it. I cant seem to get it to work and there arent any examples of a fluent configuration in your book";s:20:"POST_comment_post_ID";s:3:"527";s:19:"POST_comment_parent";s:1:"0";s:11:"POST_submit";s:14:"Submit Comment";s:14:"POST_formInput";s:0:"";s:26:"POST_akismet_comment_nonce";s:10:"e7d6ab0e58";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-d6ce1f86-2e69-44b3-8ac2-0440a4fee4e9";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG281";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg281.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:241:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools;C:Program Files (x86)Microsoft ASP.NETASP.NET Web Pagesv1.0";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.148";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31325";s:7:"SUBMASK";s:13:"255.255.255.0";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG281$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:15:"HTTP_KEEP_ALIVE";s:3:"115";s:19:"HTTP_CONTENT_LENGTH";s:3:"388";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.7";s:20:"HTTP_ACCEPT_ENCODING";s:12:"gzip,deflate";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-gb,en;q=0.5";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:77:"http://jasondentler.com/blog/2010/07/nhibernate-auditing-v3-poor-mans-envers/";s:15:"HTTP_USER_AGENT";s:90:"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.24) Gecko/20111103 Firefox/3.6.24";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"388";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:12:"86.21.254.65";s:11:"REMOTE_HOST";s:12:"86.21.254.65";s:11:"REMOTE_PORT";s:5:"57169";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:26:"/blog/wp-comments-post.php";s:14:"ORIG_PATH_INFO";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1323776324";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1323898158.3649";s:7:"message";s:44:"Jason changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3273</wp:comment_id>
			<wp:comment_author><![CDATA[Mariusz]]></wp:comment_author>
			<wp:comment_author_email>maya@post.pl</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>79.188.25.145</wp:comment_author_IP>
			<wp:comment_date>2011-12-09 08:18:41</wp:comment_date>
			<wp:comment_date_gmt>2011-12-09 08:18:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Jason,

Really nice solution. What thing that concerns me though - how could I remove some objects from the Auditing? I've got some tables that I just don't need to be auditablem, but for now the auditing stuff seems to add everything. And - is there some way to get the historical data for a given object without really creating separate classes for them?
btw: I'm using fluent.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1323721023.1313";s:7:"message";s:44:"Jason changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1323418721.2196";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:127:{s:15:"comment_post_ID";s:3:"527";s:14:"comment_author";s:7:"Mariusz";s:20:"comment_author_email";s:12:"maya@post.pl";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:385:"Hi Jason,

Really nice solution. What thing that concerns me though - how could I remove some objects from the Auditing? I've got some tables that I just don't need to be auditablem, but for now the auditing stuff seems to add everything. And - is there some way to get the historical data for a given object without really creating separate classes for them?
btw: I'm using fluent.";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:13:"79.188.25.145";s:10:"user_agent";s:70:"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:8.0) Gecko/20100101 Firefox/8.0";s:8:"referrer";s:77:"http://jasondentler.com/blog/2010/07/nhibernate-auditing-v3-poor-mans-envers/";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:77:"http://jasondentler.com/blog/2010/07/nhibernate-auditing-v3-poor-mans-envers/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:7:"Mariusz";s:10:"POST_email";s:12:"maya@post.pl";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:385:"Hi Jason,

Really nice solution. What thing that concerns me though - how could I remove some objects from the Auditing? I've got some tables that I just don't need to be auditablem, but for now the auditing stuff seems to add everything. And - is there some way to get the historical data for a given object without really creating separate classes for them?
btw: I'm using fluent.";s:20:"POST_comment_post_ID";s:3:"527";s:19:"POST_comment_parent";s:1:"0";s:11:"POST_submit";s:14:"Submit Comment";s:14:"POST_formInput";s:0:"";s:26:"POST_akismet_comment_nonce";s:10:"1fe63e6c61";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-c0f52579-3f22-4790-88f7-57675d9946f4";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG279";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg279.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:241:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools;C:Program Files (x86)Microsoft ASP.NETASP.NET Web Pagesv1.0";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.146";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31323";s:7:"SUBMASK";s:13:"255.255.255.0";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG279$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:19:"HTTP_CONTENT_LENGTH";s:3:"565";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-2,utf-8;q=0.7,*;q=0.7";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:20:"HTTP_ACCEPT_LANGUAGE";s:23:"pl,en-us;q=0.7,en;q=0.3";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:77:"http://jasondentler.com/blog/2010/07/nhibernate-auditing-v3-poor-mans-envers/";s:15:"HTTP_USER_AGENT";s:70:"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:8.0) Gecko/20100101 Firefox/8.0";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"565";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:13:"79.188.25.145";s:11:"REMOTE_HOST";s:13:"79.188.25.145";s:11:"REMOTE_PORT";s:5:"63291";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:26:"/blog/wp-comments-post.php";s:14:"ORIG_PATH_INFO";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1323418720";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Visual Studio 2010 publish / web.config conflict</title>
		<link>http://jasondentler.com/blog/2010/07/visual-studio-2010-publish-web-config-conflict/</link>
		<pubDate>Tue, 20 Jul 2010 17:55:04 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2010/07/visual-studio-2010-publish-web-config-conflict/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Yesterday, I suddenly and mysteriously started getting this error message when trying to build my ASP.NET MVC 2 application. </p>  <blockquote>   <p>It is an error to use a section registered as allowDefinition='MachineToApplication' beyond application level</p> </blockquote>  <p>It’s mysterious because I didn’t change my .configs. Double-clicking on the error took me to the &lt;authentication&gt; section of the web.config at the root of my app. It’s legal to define it there. Strange.</p>  <p>After trying a few different things, I started commenting out larger and larger chunks of my config, until it looked like this:</p>  <pre class="brush:xml">&lt;configuration&gt;&lt;!-- ... --&gt;&lt;/configuration&gt;</pre>

<p>Clearly, the error message was wrong.</p>

<p>As it turns out, this was my first time to build the app after using VS 2010’s Publish feature to throw it up on a server for a demo &amp; user testing. Publishing packages up the website under .objReleasePackage, and it doesn’t clean up after itself. The next time I built my application, the compiler barked because I had a web.config hidden a few layers deep under .obj with an &lt;authentication&gt; element. </p>

<p>I discovered the issue when I compiled my app at the command line and saw the full path on the error message. So, kill the .obj folder after each publish, and you’ll never have this trouble.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>540</wp:post_id>
		<wp:post_date>2010-07-20 11:55:04</wp:post_date>
		<wp:post_date_gmt>2010-07-20 17:55:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>visual-studio-2010-publish-web-config-conflict</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net-mvc"><![CDATA[ASP.NET MVC]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<wp:comment>
			<wp:comment_id>204</wp:comment_id>
			<wp:comment_author><![CDATA[Simon Lomax]]></wp:comment_author>
			<wp:comment_author_email>simon.lomax@ntlworld.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.23.238.158</wp:comment_author_IP>
			<wp:comment_date>2010-07-20 12:11:09</wp:comment_date>
			<wp:comment_date_gmt>2010-07-20 18:11:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jason, I was getting exactly the same issue last week. I posted this question on StackOverflow but got no replies.

http://stackoverflow.com/questions/3204747/problem-after-publishing-web-application-from-vs-2010

Its a real pain to have to remember to delete the obj folder all the time, which is what I've been doing too. Be great if someone knows a fix for this.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>205</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2010-07-20 17:25:49</wp:comment_date>
			<wp:comment_date_gmt>2010-07-20 23:25:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yep. It's especially annoying because a person can google around for hours and find nothing but advice about IIS settings.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>204</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>206</wp:comment_id>
			<wp:comment_author><![CDATA[Steve Evans]]></wp:comment_author>
			<wp:comment_author_email>kopelli@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://sleeplessmonkey.com</wp:comment_author_url>
			<wp:comment_author_IP>96.230.227.108</wp:comment_author_IP>
			<wp:comment_date>2010-07-21 15:50:37</wp:comment_date>
			<wp:comment_date_gmt>2010-07-21 21:50:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I came across the same issue, but I figured it out by clicking into the error and looking at the file it had opened up.  The give away was the fact that by default it's "Web.config" and when I double clicked the error it opened "web.config"  The casing of the "w" seemed odd, but thanks to Visual Studio showing you the full path of the file when you over over the document's tab it helped figure out what was going on.  In my case I modified the BeforeBuild target of the project file to include the following:

    
      
    
    
    ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>207</wp:comment_id>
			<wp:comment_author><![CDATA[Steve Evans]]></wp:comment_author>
			<wp:comment_author_email>kopelli@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://sleeplessmonkey.com</wp:comment_author_url>
			<wp:comment_author_IP>96.230.227.108</wp:comment_author_IP>
			<wp:comment_date>2010-07-21 15:51:41</wp:comment_date>
			<wp:comment_date_gmt>2010-07-21 21:51:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bah...forget to escape the tags:


    &lt;ItemGroup&gt;
      &lt;BadPackageFiles Include="$(MSBuildProjectDirectory)obj**PackagePackageTmp*.*" /&gt;
    &lt;/ItemGroup&gt;
    &lt;Message Text="Removing the invalid Package files" /&gt;
    &lt;Delete Files="@(BadPackageFiles)" /&gt;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>206</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>208</wp:comment_id>
			<wp:comment_author><![CDATA[Simon Lomax]]></wp:comment_author>
			<wp:comment_author_email>simon.lomax@ntlworld.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.23.238.158</wp:comment_author_IP>
			<wp:comment_date>2010-07-22 06:16:51</wp:comment_date>
			<wp:comment_date_gmt>2010-07-22 12:16:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Steve, thanks, that solved the problem.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>NHibernate 3.0 Alpha 1 released.</title>
		<link>http://jasondentler.com/blog/2010/07/nhibernate-3-0-alpha-1-released/</link>
		<pubDate>Sat, 24 Jul 2010 12:22:29 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2010/07/nhibernate-3-0-alpha-1-released/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This morning, <a href="http://fabiomaulo.blogspot.com/" target="_blank">Fabio</a> released the <a href="http://sourceforge.net/projects/nhibernate/files/" target="_blank">official NH 3 Alpha 1 binaries and source</a> on SourceForge. Go play! </p>  <p>&#160;</p>  <p>Oh, yeah. Frist!!!!!1!!!!one!!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>542</wp:post_id>
		<wp:post_date>2010-07-24 06:22:29</wp:post_date>
		<wp:post_date_gmt>2010-07-24 12:22:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nhibernate-3-0-alpha-1-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>I’m on Hanselminutes talking about NH 3</title>
		<link>http://jasondentler.com/blog/2010/07/im-on-hanselminutes-talking-about-nh-3/</link>
		<pubDate>Fri, 30 Jul 2010 22:49:05 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2010/07/im-on-hanselminutes-talking-about-nh-3/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Our friend <a href="http://fabiomaulo.blogspot.com/" target="_blank">Fabio</a> was up to no good earlier this week, and as a result, I ended up on <a href="http://www.hanselminutes.com" target="_blank">Hanselminutes</a> talking about NHibernate 3 with <a href="http://www.hanselman.com/blog/" target="_blank">Scott Hanselman</a>. </p>  <p>We talk about where to get <a href="http://nhforge.org" target="_blank">NHibernate</a>, a quick overview of starting an NH app, the state of NHForge, tooling and commercial support, the NHibernate ecosystem, and we compare the new EF “unicorn” features to features in NHibernate.</p>  <p>So, <a href="http://hanselminutes.com/default.aspx?showID=243" target="_blank">go listen now</a>. </p>  <p>Thank you Scott, Fabio, and the guys at Pwop! I think the show turned out great, despite my nerves.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>543</wp:post_id>
		<wp:post_date>2010-07-30 16:49:05</wp:post_date>
		<wp:post_date_gmt>2010-07-30 22:49:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>im-on-hanselminutes-talking-about-nh-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hanselminutes"><![CDATA[Hanselminutes]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="category" nicename="nhibernate-cookbook"><![CDATA[NHibernate Cookbook]]></category>
		<category domain="post_tag" nicename="podcast"><![CDATA[Podcast]]></category>
	</item>
	<item>
		<title>Pre-order NHibernate 3.0 Cookbook Today!</title>
		<link>http://jasondentler.com/blog/2010/09/pre-order-nhibernate-3-0-cookbook-today/</link>
		<pubDate>Sun, 05 Sep 2010 22:07:47 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2010/09/pre-order-nhibernate-3-0-cookbook-today/</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="https://www.packtpub.com/nhibernate-3-0-cookbook/book"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="NHibernate 3.0 Cookbook" border="0" alt="NHibernate 3.0 Cookbook" align="right" src="http://jasondentler.com/blog/wp-content/uploads/2010/09/NH3CookbookCover.png" width="199" height="244" /></a> <a href="https://www.packtpub.com/nhibernate-3-0-cookbook/book">NHibernate 3.0 Cookbook is available for pre-order today!</a> We are working hard to have the book out in time for <a href="http://nhday.eu" target="_blank">NHibernate Day</a> on October 8th.</p>  <p>Thank you to the awesome team at Packt Publishing and my <strong>amazing</strong> technical reviewers, <a href="http://fabiomaulo.blogspot.com/" target="_blank">Fabio Maulo,</a> <a href="http://jfromaniello.blogspot.com/" target="_blank">Jose Romaniello</a>, <a href="http://devlicio.us/blogs/tuna_toksoz" target="_blank">Tuna Toksoz,</a> and <a href="http://www.lostechies.com/blogs/gabrielschenker/default.aspx" target="_blank">Gabriel Schenker</a>, for all the support and guidance. We made a great book! </p>  <h5>Overview of NHibernate 3.0 Cookbook</h5>  <ul></ul>  <ul>   <li>Master the full range of NHibernate features </li>    <li>Reduce hours of application development time and get better application architecture and performance </li>    <li>Create, maintain, and update your database structure automatically with the help of NHibernate </li>    <li>Written and tested for NHibernate 3.0 with input from the development team distilled in to easily accessible concepts and examples </li>    <li>Part of Packt's Cookbook series: each recipe is a carefully organized sequence of instructions to complete the task as efficiently as possible </li> </ul>  <p>The NHibernate Cookbook explains each feature of NHibernate 3.0 in detail through example recipes that you can quickly apply to your applications. Set yourself free from stored procedures and inline SQL. Quite simply, if you build .NET applications that use databases, this book is for you.</p>  <p>The book will take you from the absolute basics of NHibernate through its most advanced features and beyond, showing you how to take full advantage of each concept to quickly create amazing database applications. Beginners will learn several techniques for each of the 4 core NHibernate tasks – mapping, configuration, session &amp; transaction management, and querying – and which techniques fit best with various types of applications. In short, you will be able to build an application using NHibernate. Intermediate level readers will learn how to best implement enterprise application architecture patterns using NHibernate, leading to clean, easy-to-understand code, and increased productivity. In addition to new v3.0 features, advanced readers will learn creative ways to extend NHibernate core, as well as techniques using the NHibernate search, shards, spatial, and validation projects.</p>  <p>Get solutions to common NHibernate problems to develop high-quality performance-critical data access applications</p>  <h5><b>What you will learn from this book :</b></h5>  <ul></ul>  <ul>   <li>Create a persistent object model for moving data in and out of your database </li>    <li>Build the database from your model automatically </li>    <li>Configure NHibernate for use with WebForms, MVC, WPF, and WinForms applications </li>    <li>Create database queries using a variety of methods, including the new LINQ to NHibernate and QueryOver APIs </li>    <li>Build an enterprise-level data access layer </li>    <li>Improve the performance of your applications using a variety of techniques </li>    <li>Build an infrastructure for fast, easy test-driven development of your data access layer </li>    <li>Extend NHibernate to add data encryption and auditing </li>    <li>Implement entity validation, full-text search, horizontal partitioning (sharding), and spatial queries using NHibernate Contrib projects </li> </ul>  <h5><b>Approach</b></h5>  <p>This book contains quick-paced self-explanatory recipes organized in progressive skill levels and functional areas. Each recipe contains step-by-step instructions about everything necessary to execute a particular task. The book is designed so that you can read it from start to end or just open up any chapter and start following the recipes. In short this book is meant to be the ultimate &quot;how-to&quot; reference for NHibernate 3.0, covering every major feature of NHibernate for all experience levels.</p>  <h5><b>Who this book is written for</b></h5>  <p>This book is written for NHibernate users at all levels of experience. Examples are written in C# and XML. Some basic knowledge of SQL is assumed.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>545</wp:post_id>
		<wp:post_date>2010-09-05 16:07:47</wp:post_date>
		<wp:post_date_gmt>2010-09-05 22:07:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pre-order-nhibernate-3-0-cookbook-today</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nhibernate-cookbook"><![CDATA[NHibernate Cookbook]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>209</wp:comment_id>
			<wp:comment_author><![CDATA[YJingLee]]></wp:comment_author>
			<wp:comment_author_email>leeyongjing@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://lyj.cnblogs.com</wp:comment_author_url>
			<wp:comment_author_IP>65.49.2.182</wp:comment_author_IP>
			<wp:comment_date>2010-09-05 19:02:50</wp:comment_date>
			<wp:comment_date_gmt>2010-09-06 01:02:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congratulations!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>210</wp:comment_id>
			<wp:comment_author><![CDATA[Mikael Henriksson]]></wp:comment_author>
			<wp:comment_author_email>mikael@zoolutions.se</wp:comment_author_email>
			<wp:comment_author_url>http://blog.zoolutions.se/</wp:comment_author_url>
			<wp:comment_author_IP>193.13.73.210</wp:comment_author_IP>
			<wp:comment_date>2010-09-06 00:00:22</wp:comment_date>
			<wp:comment_date_gmt>2010-09-06 06:00:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for sharing, I ordered a copy! :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>211</wp:comment_id>
			<wp:comment_author><![CDATA[marek]]></wp:comment_author>
			<wp:comment_author_email>marek.stachura@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.dedico.pl</wp:comment_author_url>
			<wp:comment_author_IP>212.244.112.51</wp:comment_author_IP>
			<wp:comment_date>2010-09-06 00:15:08</wp:comment_date>
			<wp:comment_date_gmt>2010-09-06 06:15:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

where can I find the "Table of Contents" of your book?

Thanks,
Marek]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>212</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2010-09-06 06:19:00</wp:comment_date>
			<wp:comment_date_gmt>2010-09-06 12:19:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Marek,

We're putting the final touches on the book, so the official table of contents is still a work in progress. I'll keep an eye out for it and let you know. In the mean time, if you have specific questions, I'd be glad to answer them.

Thanks,
Jason]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>211</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>213</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2010-09-06 06:21:16</wp:comment_date>
			<wp:comment_date_gmt>2010-09-06 12:21:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>210</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>214</wp:comment_id>
			<wp:comment_author><![CDATA[Mocte]]></wp:comment_author>
			<wp:comment_author_email>mocte.lince@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>148.233.25.227</wp:comment_author_IP>
			<wp:comment_date>2010-09-08 08:52:22</wp:comment_date>
			<wp:comment_date_gmt>2010-09-08 14:52:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Book preordered !!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>215</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2010-09-08 09:39:36</wp:comment_date>
			<wp:comment_date_gmt>2010-09-08 15:39:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome! Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>214</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>September NHibernate News</title>
		<link>http://jasondentler.com/blog/2010/09/september-nhibernate-news/</link>
		<pubDate>Tue, 28 Sep 2010 04:36:35 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2010/09/september-nhibernate-news/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Here’s some recent news highlights:</p>  <ul>   <li><a href="http://nhforge.org" target="_blank">NHibernate</a> 3.0 Alpha 3 is out. As the release approaches, expect a new build every couple of weeks.</li>    <li>Roger Kratz has joined the NH Contrib team and is helping Simon with Envers. </li>    <li><a href="https://www.packtpub.com/nhibernate-3-0-cookbook/book" target="_blank">My book</a> will be shipping very soon, perhaps as soon as next week. Packt Publishing will release the table of contents and sample chapter on their website very soon.</li>    <li><a href="http://nhday.eu" target="_blank">NHDay</a> is less than two weeks away. </li>    <li>Fabio’s most recent estimate for the release of NHibernate 3.0 GA is around December 9th. </li> </ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>547</wp:post_id>
		<wp:post_date>2010-09-27 22:36:35</wp:post_date>
		<wp:post_date_gmt>2010-09-28 04:36:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>september-nhibernate-news</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nenverse"><![CDATA[Nenverse]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="category" nicename="nhibernate-cookbook"><![CDATA[NHibernate Cookbook]]></category>
	</item>
	<item>
		<title>NHibernate 3.0 Cookbook released</title>
		<link>http://jasondentler.com/blog/2010/10/nhibernate-3-0-cookbook-released/</link>
		<pubDate>Tue, 05 Oct 2010 00:01:22 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2010/10/nhibernate-3-0-cookbook-released/</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="https://www.packtpub.com/nhibernate-3-0-cookbook/book" target="_blank">My book is out today!</a> The publisher’s website has the full table of contents, as well as a sample chapter. </p>  <p><a href="https://www.packtpub.com/nhibernate-3-0-cookbook/book">https://www.packtpub.com/nhibernate-3-0-cookbook/book</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>549</wp:post_id>
		<wp:post_date>2010-10-04 18:01:22</wp:post_date>
		<wp:post_date_gmt>2010-10-05 00:01:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nhibernate-3-0-cookbook-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="books"><![CDATA[Books]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="category" nicename="nhibernate-cookbook"><![CDATA[NHibernate Cookbook]]></category>
		<wp:comment>
			<wp:comment_id>216</wp:comment_id>
			<wp:comment_author><![CDATA[YJingLee]]></wp:comment_author>
			<wp:comment_author_email>lyj@cnblogs.com</wp:comment_author_email>
			<wp:comment_author_url>http://lyj.cnblogs.com</wp:comment_author_url>
			<wp:comment_author_IP>65.49.68.151</wp:comment_author_IP>
			<wp:comment_date>2010-10-04 22:39:29</wp:comment_date>
			<wp:comment_date_gmt>2010-10-05 04:39:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congratulations!!!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>217</wp:comment_id>
			<wp:comment_author><![CDATA[Simon Lomax]]></wp:comment_author>
			<wp:comment_author_email>simon.lomax@ntlworld.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.23.238.158</wp:comment_author_IP>
			<wp:comment_date>2010-10-08 04:56:13</wp:comment_date>
			<wp:comment_date_gmt>2010-10-08 10:56:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Jason

I got your book the other day (in eBook form). I'm fairly new to nHibernate and I was a bit confused about the table per class heirarchy models. On Page 27 there is a heading that states "Table per class" but then underneath it there is a diagram that I believe illustates the "Table per subclass" model which confused me.

Great book by the way, crammed full of nuggets of information. I also like the "cookbook" style format.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>222</wp:comment_id>
			<wp:comment_author><![CDATA[Casper]]></wp:comment_author>
			<wp:comment_author_email>halcwb@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>213.93.117.37</wp:comment_author_IP>
			<wp:comment_date>2011-08-11 21:18:21</wp:comment_date>
			<wp:comment_date_gmt>2011-08-11 21:18:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have bought your book through Amazon as an ebook. Excellent book, but the code is unreadable the way it is rendered. Is there a way to get the source code. Amazon does not offer a download as your other Packt publisher does.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1313097501.2051";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:127:{s:15:"comment_post_ID";s:3:"549";s:14:"comment_author";s:6:"Casper";s:20:"comment_author_email";s:16:"halcwb@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:226:"I have bought your book through Amazon as an ebook. Excellent book, but the code is unreadable the way it is rendered. Is there a way to get the source code. Amazon does not offer a download as your other Packt publisher does.";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:13:"213.93.117.37";s:10:"user_agent";s:139:"Mozilla/5.0 (iPad; U; CPU OS 4_3_5 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8L1 Safari/6533.18.5";s:8:"referrer";s:35:"http://jasondentler.com/blog/?p=549";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:35:"http://jasondentler.com/blog/?p=549";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:6:"Casper";s:10:"POST_email";s:16:"halcwb@gmail.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:226:"I have bought your book through Amazon as an ebook. Excellent book, but the code is unreadable the way it is rendered. Is there a way to get the source code. Amazon does not offer a download as your other Packt publisher does.";s:20:"POST_comment_post_ID";s:3:"549";s:19:"POST_comment_parent";s:1:"0";s:11:"POST_submit";s:14:"Submit Comment";s:14:"POST_formInput";s:0:"";s:26:"POST_akismet_comment_nonce";s:10:"38a7792d9c";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-b2112660-2bec-4f05-9ee0-7ceabf66461f";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG281";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg281.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:181:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.148";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31325";s:7:"SUBMASK";s:13:"255.255.255.0";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG281$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:19:"HTTP_CONTENT_LENGTH";s:3:"383";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:90:"application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:20:"HTTP_ACCEPT_LANGUAGE";s:5:"en-us";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:35:"http://jasondentler.com/blog/?p=549";s:15:"HTTP_USER_AGENT";s:139:"Mozilla/5.0 (iPad; U; CPU OS 4_3_5 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8L1 Safari/6533.18.5";s:11:"HTTP_ORIGIN";s:23:"http://jasondentler.com";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"383";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:13:"213.93.117.37";s:11:"REMOTE_HOST";s:13:"213.93.117.37";s:11:"REMOTE_PORT";s:5:"50823";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:26:"/blog/wp-comments-post.php";s:14:"ORIG_PATH_INFO";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1313097500";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1313102015.9174";s:7:"message";s:44:"Jason changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>223</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2011-08-11 22:34:45</wp:comment_date>
			<wp:comment_date_gmt>2011-08-11 22:34:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The code is available to the public from the Packt website. You should also contact the publisher directly regarding the problems with your eBook. Someone else has reported similar problems. I've tried to correct this issue from my end and gone nowhere. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>222</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1313102085.3022";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:137:{s:15:"comment_post_ID";s:3:"549";s:14:"comment_author";s:5:"Jason";s:20:"comment_author_email";s:22:"jasondentler@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:59:"The code is available to the public from the Packt website.";s:14:"comment_parent";s:3:"222";s:7:"user_ID";s:1:"1";s:7:"user_ip";s:13:"70.139.36.133";s:10:"user_agent";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1";s:8:"referrer";s:72:"http://jasondentler.com/blog/wp-admin/edit-comments.php?p=549&approved=1";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:35:"http://jasondentler.com/blog/?p=549";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:22:"POST_newcomment_author";s:0:"";s:28:"POST_newcomment_author_email";s:0:"";s:26:"POST_newcomment_author_url";s:0:"";s:12:"POST_user_ID";s:1:"1";s:11:"POST_action";s:15:"replyto-comment";s:15:"POST_comment_ID";s:3:"222";s:20:"POST_comment_post_ID";s:3:"549";s:11:"POST_status";s:0:"";s:13:"POST_position";s:2:"-1";s:13:"POST_checkbox";s:1:"1";s:9:"POST_mode";s:6:"detail";s:32:"POST__ajax_nonce-replyto-comment";s:10:"5f3ee41f98";s:32:"POST__wp_unfiltered_html_comment";s:10:"938fc76602";s:12:"POST_content";s:59:"The code is available to the public from the Packt website.";s:7:"POST_id";s:3:"549";s:21:"POST_comments_listing";s:3:"all";s:6:"POST_p";s:3:"549";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:29:"/blog/wp-admin/admin-ajax.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-08a332b7-39e8-4a5b-a28d-37ebfe3efabb";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG281";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg281.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:181:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.148";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31325";s:7:"SUBMASK";s:13:"255.255.255.0";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG281$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:19:"HTTP_CONTENT_LENGTH";s:3:"357";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:3:"*/*";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.3";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:11:"HTTP_COOKIE";s:0:"";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:72:"http://jasondentler.com/blog/wp-admin/edit-comments.php?p=549&approved=1";s:15:"HTTP_USER_AGENT";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1";s:11:"HTTP_ORIGIN";s:23:"http://jasondentler.com";s:21:"HTTP_X_REQUESTED_WITH";s:14:"XMLHttpRequest";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:46:"D:Hosting8214110htmlblogwp-adminadmin-ajax.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"357";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:46:"D:Hosting8214110htmlblogwp-adminadmin-ajax.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:13:"70.139.36.133";s:11:"REMOTE_HOST";s:13:"70.139.36.133";s:11:"REMOTE_PORT";s:5:"21107";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:29:"/blog/wp-admin/admin-ajax.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:29:"/blog/wp-admin/admin-ajax.php";s:14:"ORIG_PATH_INFO";s:29:"/blog/wp-admin/admin-ajax.php";s:8:"PHP_SELF";s:29:"/blog/wp-admin/admin-ajax.php";s:12:"REQUEST_TIME";s:10:"1313102078";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>247</wp:comment_id>
			<wp:comment_author><![CDATA[Casper]]></wp:comment_author>
			<wp:comment_author_email>halcwb@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>213.93.117.37</wp:comment_author_IP>
			<wp:comment_date>2011-08-26 09:06:56</wp:comment_date>
			<wp:comment_date_gmt>2011-08-26 09:06:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[From your book I implemented a (modified) version of your entity base class. However, I found out that the GetHashCode() method caused problems after saving an entity. The problem, Id is changed, so is the return value from the GetHashCode. But entities were stored in a hashed collection set with an empty Id. Problem: entities could not be found anymore in the collection. I had to cache the hashcode in a field of the entity class. That solved my problem. Is this a bug in your code or did I miss something??]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314349616.5262";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:130:{s:15:"comment_post_ID";s:3:"549";s:14:"comment_author";s:6:"Casper";s:20:"comment_author_email";s:16:"halcwb@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:511:"From your book I implemented a (modified) version of your entity base class. However, I found out that the GetHashCode() method caused problems after saving an entity. The problem, Id is changed, so is the return value from the GetHashCode. But entities were stored in a hashed collection set with an empty Id. Problem: entities could not be found anymore in the collection. I had to cache the hashcode in a field of the entity class. That solved my problem. Is this a bug in your code or did I miss something??";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:13:"213.93.117.37";s:10:"user_agent";s:117:"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.215 Safari/535.1";s:8:"referrer";s:70:"http://jasondentler.com/blog/2010/10/nhibernate-3-0-cookbook-released/";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:70:"http://jasondentler.com/blog/2010/10/nhibernate-3-0-cookbook-released/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:6:"Casper";s:10:"POST_email";s:16:"halcwb@gmail.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:511:"From your book I implemented a (modified) version of your entity base class. However, I found out that the GetHashCode() method caused problems after saving an entity. The problem, Id is changed, so is the return value from the GetHashCode. But entities were stored in a hashed collection set with an empty Id. Problem: entities could not be found anymore in the collection. I had to cache the hashcode in a field of the entity class. That solved my problem. Is this a bug in your code or did I miss something??";s:20:"POST_comment_post_ID";s:3:"549";s:19:"POST_comment_parent";s:1:"0";s:11:"POST_submit";s:14:"Submit Comment";s:14:"POST_formInput";s:0:"";s:26:"POST_akismet_comment_nonce";s:10:"26a005dd5f";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-74fbabc9-48ec-4695-b252-ce34368212d5";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG281";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg281.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:181:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.148";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31325";s:7:"SUBMASK";s:13:"255.255.255.0";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG281$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:19:"HTTP_CONTENT_LENGTH";s:3:"686";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.3";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:11:"HTTP_COOKIE";s:0:"";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:70:"http://jasondentler.com/blog/2010/10/nhibernate-3-0-cookbook-released/";s:15:"HTTP_USER_AGENT";s:117:"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.215 Safari/535.1";s:11:"HTTP_ORIGIN";s:23:"http://jasondentler.com";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"686";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:13:"213.93.117.37";s:11:"REMOTE_HOST";s:13:"213.93.117.37";s:11:"REMOTE_PORT";s:5:"59585";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:26:"/blog/wp-comments-post.php";s:14:"ORIG_PATH_INFO";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1314349615";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>249</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.80.104.200</wp:comment_author_IP>
			<wp:comment_date>2011-08-26 14:25:48</wp:comment_date>
			<wp:comment_date_gmt>2011-08-26 14:25:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Casper, 
The components used in GetHashCode are expected to be immutable. It's a trade off. Either your instances will get lost in the collection when the Id changes, or you will find that two equivalent instances aren't equal when one uses the cached value and one is pulled from the database.
Thanks,
Jason]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>247</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314368748.7796";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:136:{s:15:"comment_post_ID";s:3:"549";s:14:"comment_author";s:5:"Jason";s:20:"comment_author_email";s:22:"jasondentler@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:308:"Casper, 
The components used in GetHashCode are expected to be immutable. It's a trade off. Either your instances will get lost in the collection when the Id changes, or you will find that two equivalent instances aren't equal when one uses the cached value and one is pulled from the database.
Thanks,
Jason";s:14:"comment_parent";s:3:"247";s:7:"user_ID";s:1:"1";s:7:"user_ip";s:14:"207.80.104.200";s:10:"user_agent";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.215 Safari/535.1";s:8:"referrer";s:79:"http://jasondentler.com/blog/wp-admin/edit-comments.php?comment_status=approved";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:70:"http://jasondentler.com/blog/2010/10/nhibernate-3-0-cookbook-released/";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:22:"POST_newcomment_author";s:0:"";s:28:"POST_newcomment_author_email";s:0:"";s:26:"POST_newcomment_author_url";s:0:"";s:12:"POST_user_ID";s:1:"1";s:11:"POST_action";s:15:"replyto-comment";s:15:"POST_comment_ID";s:3:"247";s:20:"POST_comment_post_ID";s:3:"549";s:11:"POST_status";s:0:"";s:13:"POST_position";s:2:"-1";s:13:"POST_checkbox";s:1:"1";s:9:"POST_mode";s:6:"detail";s:32:"POST__ajax_nonce-replyto-comment";s:10:"5d7200f0c9";s:32:"POST__wp_unfiltered_html_comment";s:10:"e320fe81b8";s:12:"POST_content";s:308:"Casper, 
The components used in GetHashCode are expected to be immutable. It's a trade off. Either your instances will get lost in the collection when the Id changes, or you will find that two equivalent instances aren't equal when one uses the cached value and one is pulled from the database.
Thanks,
Jason";s:7:"POST_id";s:3:"549";s:21:"POST_comments_listing";s:8:"approved";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:29:"/blog/wp-admin/admin-ajax.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-4598bf20-67f7-45cc-99a0-a78637331e99";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG280";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg280.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:181:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.147";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31324";s:7:"SUBMASK";s:13:"255.255.255.0";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG280$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:19:"HTTP_CONTENT_LENGTH";s:3:"617";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:3:"*/*";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.3";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:11:"HTTP_COOKIE";s:0:"";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:79:"http://jasondentler.com/blog/wp-admin/edit-comments.php?comment_status=approved";s:15:"HTTP_USER_AGENT";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.215 Safari/535.1";s:11:"HTTP_ORIGIN";s:23:"http://jasondentler.com";s:21:"HTTP_X_REQUESTED_WITH";s:14:"XMLHttpRequest";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:46:"D:Hosting8214110htmlblogwp-adminadmin-ajax.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"617";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:46:"D:Hosting8214110htmlblogwp-adminadmin-ajax.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:14:"207.80.104.200";s:11:"REMOTE_HOST";s:14:"207.80.104.200";s:11:"REMOTE_PORT";s:5:"48393";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:29:"/blog/wp-admin/admin-ajax.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:29:"/blog/wp-admin/admin-ajax.php";s:14:"ORIG_PATH_INFO";s:29:"/blog/wp-admin/admin-ajax.php";s:8:"PHP_SELF";s:29:"/blog/wp-admin/admin-ajax.php";s:12:"REQUEST_TIME";s:10:"1314368747";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4681</wp:comment_id>
			<wp:comment_author><![CDATA[Someone]]></wp:comment_author>
			<wp:comment_author_email>ivan.gk@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>87.97.217.37</wp:comment_author_IP>
			<wp:comment_date>2011-12-31 16:59:40</wp:comment_date>
			<wp:comment_date_gmt>2011-12-31 16:59:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This book is ABSOLUTELY SHIT !!!!!]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1325350780.976";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:127:{s:15:"comment_post_ID";s:3:"549";s:14:"comment_author";s:7:"Someone";s:20:"comment_author_email";s:17:"ivan.gk@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:34:"This book is ABSOLUTELY SHIT !!!!!";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:12:"87.97.217.37";s:10:"user_agent";s:74:"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:9.0.1) Gecko/20100101 Firefox/9.0.1";s:8:"referrer";s:70:"http://jasondentler.com/blog/2010/10/nhibernate-3-0-cookbook-released/";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:70:"http://jasondentler.com/blog/2010/10/nhibernate-3-0-cookbook-released/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:7:"Someone";s:10:"POST_email";s:17:"ivan.gk@gmail.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:35:"This book is ABSOLUTELY SHIT !!!!! ";s:20:"POST_comment_post_ID";s:3:"549";s:19:"POST_comment_parent";s:1:"0";s:11:"POST_submit";s:14:"Submit Comment";s:14:"POST_formInput";s:0:"";s:26:"POST_akismet_comment_nonce";s:10:"42ac949dce";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-b05db7ca-e152-41b1-b9e2-67831bbbbd73";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG281";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg281.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:241:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools;C:Program Files (x86)Microsoft ASP.NETASP.NET Web Pagesv1.0";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.148";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31325";s:7:"SUBMASK";s:13:"255.255.255.0";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG281$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:19:"HTTP_CONTENT_LENGTH";s:3:"202";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.7";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-us,en;q=0.5";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:70:"http://jasondentler.com/blog/2010/10/nhibernate-3-0-cookbook-released/";s:15:"HTTP_USER_AGENT";s:74:"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:9.0.1) Gecko/20100101 Firefox/9.0.1";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"202";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:12:"87.97.217.37";s:11:"REMOTE_HOST";s:12:"87.97.217.37";s:11:"REMOTE_PORT";s:5:"53458";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:26:"/blog/wp-comments-post.php";s:14:"ORIG_PATH_INFO";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1325350780";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1325382340.9526";s:7:"message";s:41:"Jason changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1325382340]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1481</wp:comment_id>
			<wp:comment_author><![CDATA[Nico]]></wp:comment_author>
			<wp:comment_author_email>nicolameloni77@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>84.221.164.227</wp:comment_author_IP>
			<wp:comment_date>2011-10-22 14:13:01</wp:comment_date>
			<wp:comment_date_gmt>2011-10-22 14:13:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Jason,
congrats for your book, It's really excellent. I have some problem to generate the database schema from the NST command line tool. Is it possible to have the script for creating the tables into the Sql Server 2008 NHCookbook database that I have already created? Thank you.

Nico]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1319292781.6294";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:127:{s:15:"comment_post_ID";s:3:"549";s:14:"comment_author";s:4:"Nico";s:20:"comment_author_email";s:24:"nicolameloni77@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:292:"Hi Jason,
congrats for your book, It's really excellent. I have some problem to generate the database schema from the NST command line tool. Is it possible to have the script for creating the tables into the Sql Server 2008 NHCookbook database that I have already created? Thank you.

Nico";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:14:"84.221.164.227";s:10:"user_agent";s:74:"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1";s:8:"referrer";s:70:"http://jasondentler.com/blog/2010/10/nhibernate-3-0-cookbook-released/";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:70:"http://jasondentler.com/blog/2010/10/nhibernate-3-0-cookbook-released/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:4:"Nico";s:10:"POST_email";s:24:"nicolameloni77@gmail.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:292:"Hi Jason,
congrats for your book, It's really excellent. I have some problem to generate the database schema from the NST command line tool. Is it possible to have the script for creating the tables into the Sql Server 2008 NHCookbook database that I have already created? Thank you.

Nico";s:20:"POST_comment_post_ID";s:3:"549";s:19:"POST_comment_parent";s:1:"0";s:11:"POST_submit";s:14:"Submit Comment";s:14:"POST_formInput";s:0:"";s:26:"POST_akismet_comment_nonce";s:10:"d64ee8eb6e";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-7e06ad48-2f9e-4331-9ab8-7efd40f7037b";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG281";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg281.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:241:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools;C:Program Files (x86)Microsoft ASP.NETASP.NET Web Pagesv1.0";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.148";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31325";s:7:"SUBMASK";s:13:"255.255.255.0";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG281$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:19:"HTTP_CONTENT_LENGTH";s:3:"473";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.7";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:20:"HTTP_ACCEPT_LANGUAGE";s:35:"it-it,it;q=0.8,en-us;q=0.5,en;q=0.3";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:70:"http://jasondentler.com/blog/2010/10/nhibernate-3-0-cookbook-released/";s:15:"HTTP_USER_AGENT";s:74:"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"473";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:14:"84.221.164.227";s:11:"REMOTE_HOST";s:14:"84.221.164.227";s:11:"REMOTE_PORT";s:4:"3045";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:26:"/blog/wp-comments-post.php";s:14:"ORIG_PATH_INFO";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1319292778";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1323898169.3783";s:7:"message";s:44:"Jason changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>We’re hiring!</title>
		<link>http://jasondentler.com/blog/2010/10/were-hiring/</link>
		<pubDate>Thu, 07 Oct 2010 20:08:12 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=551</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Alvin Community College is seeking a great .NET developer to add to our team of three. We are quickly bringing applications online to better serve our students over the web. We need a good general programmer with web application development experience and solid user interface design skills. </p>  <h2>We are seeking someone with:</h2>  <ul>   <li>A curious mind, eager to learn and willing to teach </li>   <li>Professional experience with HTML, CSS, JavaScript, and .NET</li>   <li>An associate degree or equivalent work experience in a related field</li> </ul>  <h2>What you can expect:</h2>  <p>You can expect a great place to work with a fantastic team, meaningful projects and great on-going opportunities to learn. </p>  <p>For us, a typical application is built with C#, ASP.NET MVC 2, NHibernate 3 on SQL Server, AutoMapper, and jQuery. Our applications integrate with a large educational ERP, Datatel Colleague.</p>  <p>Our campus provides all of the standard college amenities, including a gym, cafeteria, coffee bar, library, and college store. We offer a number of amazing benefits including full medical and dental insurance, and teacher’s retirement. In addition to paid sick leave and vacation time, we are off for spring break, winter break, a number of regular holidays, and about 14 Fridays during the summer.</p>  <p>$50 - 60k, dependent on experience.  <p>Applicants must consent to a standard background check. </p>  <h2>Where are we?</h2>  <p>Alvin Community College is located at 3110 Mustang Road, Alvin, TX 77511, just 30 minutes South of Houston, TX. </p>  <p><iframe width="425" height="350" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="http://maps.google.com/maps?f=q&amp;source=s_q&amp;hl=en&amp;q=Alvin+Community+College,&amp;sll=29.398011,-95.239406&amp;sspn=0.006917,0.009645&amp;ie=UTF8&amp;t=h&amp;radius=0.35&amp;split=1&amp;rq=1&amp;ev=zi&amp;hq=Alvin+Community+College,&amp;hnear=&amp;ll=29.398113,-95.239406&amp;spn=0.006917,0.009645&amp;output=embed"></iframe><br /><small><a href="http://maps.google.com/maps?f=q&amp;source=embed&amp;hl=en&amp;q=Alvin+Community+College,&amp;sll=29.398011,-95.239406&amp;sspn=0.006917,0.009645&amp;ie=UTF8&amp;t=h&amp;radius=0.35&amp;split=1&amp;rq=1&amp;ev=zi&amp;hq=Alvin+Community+College,&amp;hnear=&amp;ll=29.398113,-95.239406&amp;spn=0.006917,0.009645" style="color:#0000FF;text-align:left">View Larger Map</a></small></p>  <h2>How to apply:</h2>  <p>Visit <a href="https://jobs.alvincollege.edu/applicants/Central?quickFind=50488">https://jobs.alvincollege.edu/applicants/Central?quickFind=50488</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>551</wp:post_id>
		<wp:post_date>2010-10-07 14:08:12</wp:post_date>
		<wp:post_date_gmt>2010-10-07 20:08:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>were-hiring</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>218</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention We’re hiring! « Jason Dentler -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/jasondentler.com/blog/2010/10/were-hiring/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2010-10-07 14:51:28</wp:comment_date>
			<wp:comment_date_gmt>2010-10-07 20:51:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by José F. Romaniello, Jason Dentler. Jason Dentler said: We&#39;re hiring a .NET dev in the Houston / Pearland area: http://bit.ly/9Cdoxc Please RT #dotnet #job #hiring #asp #csharp [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Simple CQRS + NHibernate event store</title>
		<link>http://jasondentler.com/blog/2010/10/simple-cqrs-nhibernate-event-store/</link>
		<pubDate>Sun, 10 Oct 2010 21:24:38 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=553</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I had hoped to include a CQRS-related recipe in the Data Access Layer chapter of <a href="http://www.packtpub.com/nhibernate-3-0-cookbook/book?utm_source=jasondentler.com&amp;utm_medium=blog&amp;utm_content=authorsite&amp;utm_campaign=mdb_004974" target="_blank">my book</a>. Of course, not having any real world CQRS experience myself, I couldn't offer any authoritative guidance. Now that I have some free time, I'm determined to remedy that situation. </p>  <p>I won't go in to the specifics of CQRS or even event sourcing. The internet already has plenty of people explaining it better than I ever could. If you're like me, you need code to learn. You need to hack away at something for a few days before you really get it. </p>  <p>In the spirit of &quot;learning in the open,&quot; I'm sharing this weekend's effort to fix up <a href="http://github.com/gregoryyoung/m-r" target="_blank">Greg Young's Simple CQRS example</a>. His solution is called &quot;SimplestPossibleThing.sln&quot; which describes it perfectly. It's a great learning tool, but it's all built on top of in-memory collections, not persistent storage. </p>  <p>In this post, I'm going to make his event store persistent. With some luck, I'll move on to the read model and bring it full circle in a later post. </p> Before we dive in, take a look at <a href="http://github.com/gregoryyoung/m-r/blob/master/SimpleCQRS/EventStore.cs" target="_blank">Greg's in-memory implementation</a>. There's a few things to note:   <ol>   <li>Rather than persisting the actual events, he’s “persisting” EventDescriptor structs with references to the Events. I’m going to steal this idea to make our NHibernate code easier. </li>    <li>The expectedVersion parameter should match the version of the most recent event. When it doesn’t, we know we have a concurrency violation. </li> </ol>  <h4>A persistent event store</h4>  <p>First, let's do a little refactoring of the EventStore implementation:</p>  <pre class="brush:csharp">public abstract class BaseEventStore : IEventStore
{
  private readonly IEventPublisher _publisher;

  protected BaseEventStore(IEventPublisher publisher)
  {
    _publisher = publisher;
  }

  public void SaveEvents(Guid aggregateId, 
    IEnumerable&lt;Event&gt; events, 
    int expectedVersion)
  {
    var eventDescriptors = new List&lt;EventDescriptor&gt;();
    var i = expectedVersion;
    foreach (var @event in events)
    {
      i++;
      @event.Version = i;
      eventDescriptors.Add(new EventDescriptor(aggregateId, @event, i));
    }

    AddEvents(eventDescriptors, aggregateId, expectedVersion);

    foreach (var @event in events)
    {
      _publisher.Publish(@event);
    }
  }

  public List&lt;Event&gt; GetEventsForAggregate(Guid aggregateId)
  {
    var eventDescriptors = GetEventDescriptorsForAggregate(aggregateId);
    if (null == eventDescriptors || !eventDescriptors.Any())
    {
      throw new AggregateNotFoundException();
    }
    return eventDescriptors.Select(desc =&gt; desc.EventData).ToList();
  }

  protected abstract IEnumerable&lt;EventDescriptor&gt;
    LoadEventDescriptorsForAggregate(Guid aggregateId);

  protected abstract void PersistEventDescriptors(
    IEnumerable&lt;EventDescriptor&gt; newEventDescriptors,
    Guid aggregateId,
    int expectedVersion);

}</pre>

<h4>Concurrency violation checking</h4>

<p>Greg's implementation explicitly checked for concurrency violations before persisting. Since he's working in memory, it's a simple check and a cheap operation. With a database, it gets more complicated. We could lock and query for the max version, but that's extreme and unnecessary. </p>

<p>We assume that the expectedVersion value is not greater than the actual current version. Since we're not deleting events from the event stream, I think this is a safe assumption. Essentially, while there's a small chance someone may have done something to our aggregate, they'll never undo something from our aggregate. </p>

<p>We can rely on our database for the check. If we insert an event with version 2 after events 0, 1, 2, and 3 are written, we'll get a primary key constraint violation. Since this is the only PK in our database, we know exactly why this happened. We'll convert this to a ConcurrencyException.</p>

<h4>Persistence implementation</h4>

<p>Now we have a base class that handles the transformation and event publishing and lets us implement our own persistence. </p>

<pre class="brush:csharp">public class NHibernateEventStore : BaseEventStore
{
  private readonly IStatelessSession _session;

  public NHibernateEventStore(
    IEventPublisher publisher,
    IStatelessSession session)
    : base(publisher)
  {
    _session = session;
  }

  protected override IEnumerable&lt;EventDescriptor&gt; 
    LoadEventDescriptorsForAggregate(Guid aggregateId)
  {
    var query = _session.GetNamedQuery(&quot;LoadEventDescriptors&quot;)
      .SetGuid(&quot;aggregateId&quot;, aggregateId);
    return Transact(() =&gt; query.List&lt;EventDescriptor&gt;());
  }

  protected override void PersistEventDescriptors(
    IEnumerable&lt;EventDescriptor&gt; newEventDescriptors, 
    Guid aggregateId, int expectedVersion)
  {
    // Don't bother to check expectedVersion. Since we can't delete 
    // events, we won't skip a version. If we do have a true concurrency 
    // violation, we'll get a PK violation exception. 
    // SqlExceptionConverter will change it to a ConcurrencyViolation.
    Transact(() =&gt;
                {
                  foreach (var ed in newEventDescriptors)
                    _session.Insert(ed);
                });
  }

  protected virtual TResult Transact&lt;TResult&gt;(Func&lt;TResult&gt; func)
  {
    if (!_session.Transaction.IsActive)
    {
      // Wrap in transaction
      TResult result;
      using (var tx = _session.BeginTransaction())
      {
        result = func.Invoke();
        tx.Commit();
      }
      return result;
    }

    // Don't wrap;
    return func.Invoke();
  }

  protected virtual void Transact(Action action)
  {
    Transact&lt;bool&gt;(() =&gt;
    {
      action.Invoke();
      return false;
    });
  }

}</pre>

<p>We’re using stateless sessions because they’re quick and easy. We don’t need a big unit of work implementation, automatic dirty checking, lazy loading, or any of that other stuff we rely on for traditional applications. We’re just stuffing rows in to a table. </p>

<p>For those of you who’ve read <a href="http://www.packtpub.com/nhibernate-3-0-cookbook/book?utm_source=jasondentler.com&amp;utm_medium=blog&amp;utm_content=authorsite&amp;utm_campaign=mdb_004974" target="_blank">my book</a>, the Transact methods are taken right from the first section of my Data Access Layer chapter. They let us manage the <a href="http://nhforge.org" target="_blank">NHibernate</a> transaction when we need to, and handle it for us when we don’t. </p>

<h4>Query and Model</h4>

<p>The LoadEventDescriptors query is dead simple:</p>

<pre class="brush:xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;hibernate-mapping xmlns=&quot;urn:nhibernate-mapping-2.2&quot;&gt;
  &lt;query name=&quot;LoadEventDescriptors&quot;&gt;
    &lt;![CDATA[
    from EventDescriptor ed
    where ed.Id = :aggregateId
    order by ed.Version
    ]]&gt;
  &lt;/query&gt;
&lt;/hibernate-mapping&gt;</pre>

<p>Next, we redesign the EventDescriptor for use with NHibernate.</p>

<pre class="brush:csharp">public class EventDescriptor
{

  public Event EventData { get; private set; }
  public Guid Id { get; private set; }
  public int Version { get; private set; }

  public EventDescriptor(Guid id, Event eventData, int version)
  {
    EventData = eventData;
    Version = version;
    Id = id;
  }

  private EventDescriptor()
  {
  }

  public override bool Equals(object obj)
  {
    return Equals(obj as EventDescriptor);
  }

  public bool Equals(EventDescriptor other)
  {
    return null == other
              ? false
              : other.Id == Id &amp;&amp; other.Version == Version;
  }

  public override int GetHashCode()
  {
    return Id.GetHashCode() ^ Version.GetHashCode();
  }

}</pre>

<p>We've switched from a struct to a class, converted the readonly fields to properties with private setters, added a private constructor, and implemented Equals and GetHashCode. We did all of this to make NHibernate happy. We won't be doing any lazy loading, so we don't need to make our properties virtual. Because we'll use a composite key (Id and Version), we need to override Equals and GetHashCode. </p>

<p>Here’s our mapping for EventDescriptor:</p>

<pre class="brush:xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;hibernate-mapping xmlns=&quot;urn:nhibernate-mapping-2.2&quot;
                   assembly=&quot;SimpleCQRS&quot;
                   namespace=&quot;SimpleCQRS.EventStore&quot;&gt;
  &lt;typedef class=&quot;SimpleCQRS.EventStore.NHibernate.JsonType, SimpleCQRS.EventStore.NHibernate&quot;
           name=&quot;json&quot; /&gt;
  &lt;class name=&quot;EventDescriptor&quot; table=&quot;Events&quot;
         mutable=&quot;false&quot; lazy=&quot;false&quot;&gt;
    &lt;composite-id&gt;
      &lt;key-property name=&quot;Id&quot; /&gt;
      &lt;key-property name=&quot;Version&quot; /&gt;
    &lt;/composite-id&gt;
    &lt;property name=&quot;EventData&quot; type=&quot;json&quot; &gt;
      &lt;column name=&quot;Type&quot;/&gt;
      &lt;column name=&quot;Data&quot;/&gt;
    &lt;/property&gt;
  &lt;/class&gt;
&lt;/hibernate-mapping&gt;</pre>

<p>EventDescriptor is immutable. We’ve disabled lazy loading. Our primary key is a composite of the Id and Version. Our EventData is stored in two columns. The first stores the assembly qualified name of the .NET type. The second column stores the event as json serialized data. We use the JsonType IUserType to handle the serialization and deserialization transparently. Newtonsoft json.Net does all of the heavy lifting.</p>

<pre class="brush:csharp">[Serializable]
public class JsonType : IUserType
{

  private static object Deserialize(string data, string type)
  {
    return Deserialize(data, TypeNameHelper.GetType(type));
  }

  private static object Deserialize(string data, Type type)
  {
    return JsonConvert.DeserializeObject(data, type);
  }

  private static string Serialize(object value)
  {
    return null == value
              ? null
              : JsonConvert.SerializeObject(value);
  }

  private static string GetType(object value)
  {
    return null == value
              ? null
              : TypeNameHelper.GetSimpleTypeName(value);
  }

  public object NullSafeGet(IDataReader rs, string[] names, object owner)
  {
    int typeIndex = rs.GetOrdinal(names[0]);
    int dataIndex = rs.GetOrdinal(names[1]);
    if (rs.IsDBNull(typeIndex) || rs.IsDBNull(dataIndex))
    {
      return null;
    }

    var type = (string) rs.GetValue(typeIndex);
    var data = (string) rs.GetValue(dataIndex);
    return Deserialize(data, type);
  }

  public void NullSafeSet(IDbCommand cmd, object value, int index)
  {
    if (value == null)
    {
      NHibernateUtil.String.NullSafeSet(cmd, null, index);
      NHibernateUtil.String.NullSafeSet(cmd, null, index + 1);
      return;
    }

    var type = GetType(value);
    var data = Serialize(value);
    NHibernateUtil.String.NullSafeSet(cmd, type, index);
    NHibernateUtil.String.NullSafeSet(cmd, data, index + 1);
  }

  public object DeepCopy(object value)
  {
    return value == null
              ? null
              : Deserialize(Serialize(value), GetType(value));
  }

  public object Replace(object original, object target, object owner)
  {
    return original;
  }

  public object Assemble(object cached, object owner)
  {
    var parts = cached as string[];
    return parts == null
              ? null
              : Deserialize(parts[1], parts[0]);
  }

  public object Disassemble(object value)
  {
    return (value == null)
              ? null
              : new string[]
                  {
                    GetType(value),
                    Serialize(value)
                  };
  }

  public SqlType[] SqlTypes
  {
    get
    {
      return new[]
                {
                  SqlTypeFactory.GetString(10000), // Type
                  SqlTypeFactory.GetStringClob(10000) // Data
                };
    }
  }

  public Type ReturnedType
  {
    get { return typeof(Event); }
  }

  public bool IsMutable
  {
    get { return false; }
  }

  public new bool Equals(object x, object y)
  {
    if (ReferenceEquals(x, y))
    {
      return true;
    }
    if (ReferenceEquals(null, x) || ReferenceEquals(null, y))
    {
      return false;
    }

    return x.Equals(y);
  }

  public int GetHashCode(object x)
  {
    return (x == null) ? 0 : x.GetHashCode();
  }
}</pre>
TypeNameHelper still needs some work. GetSimpleTypeName should strip out the version, public key, processor architecture, and all that goo from the assembly qualified name. 

<pre class="brush:csharp">public static class TypeNameHelper
{
    
  public static string GetSimpleTypeName(object obj)
  {
    return null == obj
              ? null
              : obj.GetType().AssemblyQualifiedName;
  }

  public static Type GetType(string simpleTypeName)
  {
    return Type.GetType(simpleTypeName);
  }

}</pre>

<p>Finally, we need a bit of NHibernate magic to convert to primary key constraint violations in to ConcurrencyExceptions. I probably could have made this simpler, but it works.</p>

<pre class="brush:csharp">public class SqlExceptionConverter : ISQLExceptionConverter 
{

  public Exception Convert(AdoExceptionContextInfo exInfo)
  {
    var dbException = ADOExceptionHelper.ExtractDbException(exInfo.SqlException);

    var ns = dbException.GetType().Namespace ?? string.Empty;
    if (ns.ToLowerInvariant().StartsWith(&quot;system.data.sqlite&quot;))
    {
      // SQLite exception
      switch (dbException.ErrorCode)
      {
        case -2147467259: // Abort due to constraint violation
          throw new ConcurrencyException();
      }
    }

    if (ns.ToLowerInvariant().StartsWith(&quot;system.data.sqlclient&quot;))
    {
      // MS SQL Server
      switch (dbException.ErrorCode)
      {
        case -2146232060:
          throw new ConcurrencyException();
      }
    }

    return SQLStateConverter.HandledNonSpecificException(exInfo.SqlException,
        exInfo.Message, exInfo.Sql);
  }

}</pre>

<p>Fabio has a <a href="http://fabiomaulo.blogspot.com/2009/06/improving-ado-exception-management-in.html" target="_blank">blog post</a> all about NHibernate’s SQLExceptionConverter. To turn this on, just set the sql_exception_converter property in your NHibernate configuration. </p>

<p>While I was working on this, I ran in to <a href="http://216.121.112.228/browse/NH-2020" target="_blank">NH-2020</a>, despite being closed. Basically, batching and the SQL exception converter don’t mix, so turn off batching. I told <a href="http://fabiomaulo.blogspot.com/" target="_blank">Fabio</a> about it. I’ll do what I can to get it fixed for good in NH 3 GA. </p>

<p>Thanks to Greg Young for all his efforts to teach the world CQRS through <a href="http://cqrsinfo.com" target="_blank">CQRSInfo.com</a>, including his 6 1/2 hour screen cast. Also, thank you Fabio for sharing your json user type with me and answering my questions. </p>

<p><a href="http://code.google.com/p/jasondentler/source/browse/#svn/trunk/SimpleCQRS" target="_blank">Get yer codez here.</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>553</wp:post_id>
		<wp:post_date>2010-10-10 15:24:38</wp:post_date>
		<wp:post_date_gmt>2010-10-10 21:24:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>simple-cqrs-nhibernate-event-store</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cqrs"><![CDATA[CQRS]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<wp:comment>
			<wp:comment_id>219</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Simple CQRS + NHibernate event store « Jason Dentler -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/jasondentler.com/blog/2010/10/simple-cqrs-nhibernate-event-store/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2010-10-10 16:48:50</wp:comment_date>
			<wp:comment_date_gmt>2010-10-10 22:48:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by ajlopez, fabiomaulo, Adam Dymitruk, Jose Fabricio Rojas, John McDowall and others. John McDowall said: Blogged: Simple CQRS + NHibernate event store http://bit.ly/c0b2Lt /cc: @gregyoung &amp; @fabiomaulo (via @jasondentler) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>220</wp:comment_id>
			<wp:comment_author><![CDATA[Roland]]></wp:comment_author>
			<wp:comment_author_email>roland_civet@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>87.66.149.22</wp:comment_author_IP>
			<wp:comment_date>2010-10-11 01:30:59</wp:comment_date>
			<wp:comment_date_gmt>2010-10-11 07:30:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for sharing. 
Could you share your solution please?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>221</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jasondentler.com</wp:comment_author_url>
			<wp:comment_author_IP>70.139.36.133</wp:comment_author_IP>
			<wp:comment_date>2010-10-11 05:15:42</wp:comment_date>
			<wp:comment_date_gmt>2010-10-11 11:15:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Roland. The source code is up on Google code. I added a link to the end of the post.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>220</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1404</wp:comment_id>
			<wp:comment_author><![CDATA[Robert Stackhouse (@rstackhouse)]]></wp:comment_author>
			<wp:comment_author_email>robertstackhouse@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://robertstackhouse.com</wp:comment_author_url>
			<wp:comment_author_IP>128.194.93.57</wp:comment_author_IP>
			<wp:comment_date>2011-10-18 17:08:41</wp:comment_date>
			<wp:comment_date_gmt>2011-10-18 17:08:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have seen a bunch of talk lately about CQS and CQRS, but what I haven't seen is an implementation for producing a query results page. I'm specifically interested in paging and sorting. Have you seen any implementations for this. Event sourcing is interesting, but for now, I'm mainly trying to avoid mixing querying (or UI) concerns with command (or persistence) concerns.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1318957721.7225";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:129:{s:15:"comment_post_ID";s:3:"553";s:14:"comment_author";s:32:"Robert Stackhouse (@rstackhouse)";s:20:"comment_author_email";s:26:"robertstackhouse@gmail.com";s:18:"comment_author_url";s:27:"http://robertstackhouse.com";s:15:"comment_content";s:374:"I have seen a bunch of talk lately about CQS and CQRS, but what I haven't seen is an implementation for producing a query results page. I'm specifically interested in paging and sorting. Have you seen any implementations for this. Event sourcing is interesting, but for now, I'm mainly trying to avoid mixing querying (or UI) concerns with command (or persistence) concerns.";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:13:"128.194.93.57";s:10:"user_agent";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1";s:8:"referrer";s:72:"http://jasondentler.com/blog/2010/10/simple-cqrs-nhibernate-event-store/";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:72:"http://jasondentler.com/blog/2010/10/simple-cqrs-nhibernate-event-store/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:32:"Robert Stackhouse (@rstackhouse)";s:10:"POST_email";s:26:"robertstackhouse@gmail.com";s:8:"POST_url";s:27:"http://robertstackhouse.com";s:12:"POST_comment";s:374:"I have seen a bunch of talk lately about CQS and CQRS, but what I haven't seen is an implementation for producing a query results page. I'm specifically interested in paging and sorting. Have you seen any implementations for this. Event sourcing is interesting, but for now, I'm mainly trying to avoid mixing querying (or UI) concerns with command (or persistence) concerns.";s:20:"POST_comment_post_ID";s:3:"553";s:19:"POST_comment_parent";s:1:"0";s:11:"POST_submit";s:14:"Submit Comment";s:14:"POST_formInput";s:0:"";s:26:"POST_akismet_comment_nonce";s:10:"c48924ecf7";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-ccde3892-af31-4024-9d86-a206112bebfb";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG280";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg280.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:241:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools;C:Program Files (x86)Microsoft ASP.NETASP.NET Web Pagesv1.0";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.147";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31324";s:7:"SUBMASK";s:13:"255.255.255.0";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG280$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:19:"HTTP_CONTENT_LENGTH";s:3:"624";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.3";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:72:"http://jasondentler.com/blog/2010/10/simple-cqrs-nhibernate-event-store/";s:15:"HTTP_USER_AGENT";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1";s:11:"HTTP_ORIGIN";s:23:"http://jasondentler.com";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"624";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:13:"128.194.93.57";s:11:"REMOTE_HOST";s:13:"128.194.93.57";s:11:"REMOTE_PORT";s:5:"26266";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:26:"/blog/wp-comments-post.php";s:14:"ORIG_PATH_INFO";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1318957720";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1323898175.4223";s:7:"message";s:44:"Jason changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>NHibernate 3.0 released</title>
		<link>http://jasondentler.com/blog/2010/12/nhibernate-3-0-released/</link>
		<pubDate>Sun, 05 Dec 2010 13:41:47 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=562</guid>
		<description></description>
		<content:encoded><![CDATA[<p>First, <a href="http://www.packtpub.com/nhibernate-3-0-cookbook/book?utm_source=jasondentler.com&amp;utm_medium=blog&amp;utm_content=authorsite&amp;utm_campaign=mdb_004974">NHibernate 3.0 Cookbook</a> is now a Packt Publishing best seller. Thank you everyone who bought a copy. The NHibernate project gets a portion of each and every sale.</p>  <p>Yesterday, <a href="http://fabiomaulo.blogspot.com/">Fabio</a> announced the release of <a href="http://nhforge.org/">NHibernate</a> 3.0 General Availability. Go get it! </p>  <p>The previous official release of NHibernate was version 2.1.2, just over 1 year ago. Since then, the team has made a ton of improvements and bug fixes.</p>  <p>Most importantly, NHibernate now targets .NET 3.5, allowing us to use lambda expressions and LINQ. This has led to an explosion of new ways to configure and query. </p>  <p>There are a few very minor breaking changes mentioned in the release notes:</p>  <ul>   <li><a href="http://216.121.112.228/browse/NH-2392" target="_blank">[NH-2392]</a> ICompositeUserType.NullSafeSet method signature has changed</li>    <li><a href="http://216.121.112.228/browse/NH-2199" target="_blank">[NH-2199]</a> null values in maps/dictionaries are no longer silently ignored/deleted</li>    <li><a href="http://216.121.112.228/browse/NH-1894" target="_blank">[NH-1894]</a> SybaseAnywhereDialect has been removed, and replaced with SybaseASA9Dialect. Sybase Adaptive Server Enterprise (ASE) dialects removed.</li>    <li><a href="http://216.121.112.228/browse/NH-2251" target="_blank">[NH-2251]</a> Signature change for GetLimitString in Dialect</li>    <li><a href="http://216.121.112.228/browse/NH-2284" target="_blank">[NH-2284]</a> Obsolete members removed</li>    <li><a href="http://216.121.112.228/browse/NH-2358" target="_blank">[NH-2358]</a> DateTimeOffset type now works as a DateTimeOffset instead a &quot;surrogate&quot; of DateTime</li> </ul>  <p>Plans for version 3.1 include additional bug fixes and patches, as well as enhancements for the new LINQ provider.</p>  <p>As Fabio says, Happy Persisting!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>562</wp:post_id>
		<wp:post_date>2010-12-05 07:41:47</wp:post_date>
		<wp:post_date_gmt>2010-12-05 13:41:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nhibernate-3-0-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="category" nicename="nhibernate-cookbook"><![CDATA[NHibernate Cookbook]]></category>
	</item>
	<item>
		<title>Did you mean CarsBucks?</title>
		<link>http://jasondentler.com/blog/2011/07/did-you-mean-carsbucks/</link>
		<pubDate>Tue, 05 Jul 2011 22:34:42 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=628</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://www.flickr.com/photos/xfer/4124684/" target="_blank"><img style="margin: 4px 10px; display: inline; float: left" align="left" src="http://farm1.static.flickr.com/4/4124684_2eb7b898b8_z_d.jpg?zz=1" width="240" height="181" /></a>I’ve been working on a little hobby project for ASP.NET MVC / CQRS apps, and I showed it off to my friend <a href="http://joseoncode.com/" target="_blank">Jose</a>. I asked if I could recreate his Chinook Media Manager app with MVC and CQRS as an example for this new project. As usual, he pointed me to something even better: Restbucks, the example from the <a href="http://restinpractice.com/default.aspx" target="_blank">REST in Practice</a> book. </p>  <p>Jose has <a href="http://restbuckson.net/" target="_blank">already implemented this</a> example in .NET as a full REST (HATEOAS) service using WCF over a traditional <a href="http://nhforge.org/">NHibernate</a> model.</p>  <p>I set off to build it over using CQRS. I started with nCQRS, but they’ve had string of bad pull requests applied recently. After 2 days of hacking at the framework to get a build and all-green tests, I switched to Greg Young’s 100-line SimpleCQRS. From there, it was smooth sailing again.</p>  <p>So, I give you the <a href="https://github.com/jasondentler/cqrs#readme" target="_blank">“Did you mean CarsBucks?” example</a>, Restbucks reimagined as a CQRS domain.</p>  <p>I may not know exactly what I’m doing, but I’m doing it anyway. Constructive feedback is always welcome. Also, this may deviate from Restbucks slightly. I’m not finished with the book.</p>  <p><font size="1">(Coffee cup image licensed under CC BY-SA 2.0 by Marcelo Alves)</font></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>628</wp:post_id>
		<wp:post_date>2011-07-05 16:34:42</wp:post_date>
		<wp:post_date_gmt>2011-07-05 22:34:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>did-you-mean-carsbucks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cqrs"><![CDATA[CQRS]]></category>
	</item>
	<item>
		<title>Hermes: Pub/Sub for the web</title>
		<link>http://jasondentler.com/blog/2011/07/hermes-pubsub-for-the-web/</link>
		<pubDate>Tue, 19 Jul 2011 13:00:00 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=654</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://farm1.static.flickr.com/108/311690195_00a12b6bac_o.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; float: left; border-top: 0px; border-right: 0px; padding-top: 0px" title="HermesSandal" border="0" alt="HermesSandal" align="left" src="http://jasondentler.com/blog/wp-content/uploads/2011/07/HermesSandal1.jpg" width="240" height="180" /></a></p>  <p>Once in a while, some new disruptive technology comes along that unseats the established giants. <a href="https://github.com/TellagoDevLabs/Hermes" target="_blank">Hermes</a> is a new open source Pub/Sub library from <a href="http://www.tellago.com/" target="_blank">Tellago</a> DevLabs. This little REST service could unseat a giant or two.</p>  <p>Here are a few reasons you should give it a try.</p>  <p><strong>Hermes is standard</strong>. It’s a <a href="http://martinfowler.com/articles/richardsonMaturityModel.html#level3" target="_blank">RMM level 3</a> REST service and speaks standard HTTP and XML. JSON support is planned. </p>  <p><strong>Hermes is scalable.</strong> Hermes doesn’t waste resources tracking subscriptions, maintaining connections to transactional message queues, and fighting the web’s nature to push data around the globe. Instead, messages are stored in Mongo DB and published to atom feeds. Clients poll these feeds for new messages. The web is built on polling. In fact…</p>  <p><strong>Hermes is web scale</strong>. Obviously, I don’t mean it could host Twitter on your old laptop. Hermes takes advantage of the web to scale. A Squid reverse proxy server will solve any scalability problems most of us could encounter. If subscribers are overwhelming your server, cache the atom feeds for a fraction of a second. If new messages are streaming in too fast, distribute the load across several Hermes servers. Or even better, let <a href="http://www.mongodb.org/display/DOCS/Amazon+EC2" target="_blank">Amazon</a> or <a href="http://www.mongodb.org/display/DOCS/MongoDB+on+Azure" target="_blank">Microsoft</a> worry about it all. This isn’t your father’s enterprise middleware style pub/sub.</p>  <p><strong>Hermes is simple.</strong> The REST service really pushes you where you need to go. I’ve got big plans for Hermes in a project at work, so I’ve been working on the Javascript client library. Even with my limited understanding of the language, it was pretty easy. </p>  <p><strong>Give it a try.</strong> Hermes uses the BSD license. </p>  <p>Here’s a chat example:in 17 lines of Javascript:</p>  <p>[gist id=1087550 file=ChatClient.js] </p>  <p>Hermes sandal photo © <a href="http://www.flickr.com/photos/ecastro/">ecastro</a> and licensed under <a href="http://creativecommons.org/licenses/by/2.0/">Creative Commons Attribution 2.0</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>654</wp:post_id>
		<wp:post_date>2011-07-19 07:00:00</wp:post_date>
		<wp:post_date_gmt>2011-07-19 13:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hermes-pubsub-for-the-web</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="hermes"><![CDATA[Hermes]]></category>
		<category domain="post_tag" nicename="hermes"><![CDATA[Hermes]]></category>
		<category domain="category" nicename="pubsub"><![CDATA[Pub/Sub]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Back to Reality</title>
		<link>http://jasondentler.com/blog/2011/08/back-to-reality/</link>
		<pubDate>Thu, 18 Aug 2011 00:00:36 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/?p=676</guid>
		<description></description>
		<content:encoded><![CDATA[<p><strong>CONTAINS 0% CODE. WARNING: MAY CONTAIN FEELINGS.</strong></p>  <p>Ryan Hartzog has been trying to recruit me for the past 8 months. As he put it, he wore me down. At the end of the month, I leave the college to go to work for David Weekley Homes. </p>  <p>Here’s a few things that stuck with me:</p>  <ol>   <li>It’s not “Human Resources” it’s “People.”</li>    <li>When I arrived, the receptionist greeted me by name, knew exactly who I was to meet, where I should be, and when I should be there.</li>    <li>The interview &amp; assessment process began at 9am and lasted well in to the afternoon. If they go through all this effort for everyone, they must be picky about who they select.</li>    <li>The all-day interview process never felt grueling. I lost count of the number of times I was offered a beverage or asked if I needed a break.</li>    <li>The team invited me in. We cut up and had a good time. I found a fellow Sci-Fi fan. Someone on the team has an aversion to Asian cuisine, and another to glitter. I was introduced to “Evil Donna,” who, it turns out, is not evil after all.</li>    <li>By the end of the day, it was pretty clear these people enjoy their jobs and each other. I didn’t hear a grumble or see a frown all day, even in passing. </li>    <li>They pushed through the process as quickly as possible (at my request), always set clear expectations, and were prompt in making an offer.</li> </ol>  <p>I’m heading back to “the real world.”</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>676</wp:post_id>
		<wp:post_date>2011-08-18 00:00:36</wp:post_date>
		<wp:post_date_gmt>2011-08-18 00:00:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>back-to-reality</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>262</wp:comment_id>
			<wp:comment_author><![CDATA[Ryan Hartzog]]></wp:comment_author>
			<wp:comment_author_email>rhartzog@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.246.16.103</wp:comment_author_IP>
			<wp:comment_date>2011-08-29 02:53:39</wp:comment_date>
			<wp:comment_date_gmt>2011-08-29 02:53:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It's a great company for sure. I look forward to working with you and am glad you finally gave in.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314586419.5483";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:130:{s:15:"comment_post_ID";s:3:"676";s:14:"comment_author";s:12:"Ryan Hartzog";s:20:"comment_author_email";s:18:"rhartzog@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:98:"It's a great company for sure. I look forward to working with you and am glad you finally gave in.";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:13:"70.246.16.103";s:10:"user_agent";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.215 Safari/535.1";s:8:"referrer";s:53:"http://jasondentler.com/blog/2011/08/back-to-reality/";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:53:"http://jasondentler.com/blog/2011/08/back-to-reality/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:12:"Ryan Hartzog";s:10:"POST_email";s:18:"rhartzog@gmail.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:99:"It's a great company for sure. I look forward to working with you and am glad you finally gave in. ";s:20:"POST_comment_post_ID";s:3:"676";s:19:"POST_comment_parent";s:1:"0";s:11:"POST_submit";s:14:"Submit Comment";s:14:"POST_formInput";s:0:"";s:26:"POST_akismet_comment_nonce";s:10:"b238bf0358";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-aa1d92c8-8c9f-4ea5-9bc5-3f1a188a2fe7";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG280";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg280.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:181:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.147";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31324";s:7:"SUBMASK";s:13:"255.255.255.0";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG280$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:19:"HTTP_CONTENT_LENGTH";s:3:"264";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.3";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:11:"HTTP_COOKIE";s:0:"";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:53:"http://jasondentler.com/blog/2011/08/back-to-reality/";s:15:"HTTP_USER_AGENT";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.215 Safari/535.1";s:11:"HTTP_ORIGIN";s:23:"http://jasondentler.com";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"264";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:13:"70.246.16.103";s:11:"REMOTE_HOST";s:13:"70.246.16.103";s:11:"REMOTE_PORT";s:5:"53412";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:26:"/blog/wp-comments-post.php";s:14:"ORIG_PATH_INFO";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1314586418";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314610504.6346";s:7:"message";s:44:"Jason changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>NHibernate 3 Beginner&#8217;s Guide published</title>
		<link>http://jasondentler.com/blog/2011/08/nhibernate-3-beginners-guide-published/</link>
		<pubDate>Tue, 30 Aug 2011 03:25:37 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2011/08/nhibernate-3-beginners-guide-published/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Gabriel Schener’s new book, <a href="http://lostechies.com/gabrielschenker/2011/08/29/nhibernate-3-beginners-guide-published/" target="_blank">NHibernate 3 Beginner’s Guide</a> was published today. Go check it out. Gabriel knows NHibernate inside and out – certainly better than me – and worked hard to give the community the best book possible. For technical reviewers, he was backed up by two of the best:Fabio Maulo and Jose Romaniello.</p>  <p>Disclosure: Gabriel was an amazing technical reviewer on my book, NHibernate 3.0 Cookbook, along with Jose, <a href="http://fabiomaulo.blogspot.com/">Fabio</a>, and Tuna Toksoz. Packt Publishing published both NHibernate 3 Beginner’s Guide and <a href="http://www.packtpub.com/nhibernate-3-0-cookbook/book?utm_source=jasondentler.com&amp;utm_medium=blog&amp;utm_content=authorsite&amp;utm_campaign=mdb_004974">NHibernate 3.0 Cookbook</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>702</wp:post_id>
		<wp:post_date>2011-08-30 03:25:37</wp:post_date>
		<wp:post_date_gmt>2011-08-30 03:25:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nhibernate-3-beginners-guide-published</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Review: NHibernate 3 Beginner&#8217;s Guide</title>
		<link>http://jasondentler.com/blog/2011/09/review-nhibernate-3-beginners-guide/</link>
		<pubDate>Wed, 28 Sep 2011 00:16:12 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2011/09/review-nhibernate-3-beginners-guide/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>There’s a new <a href="http://nhforge.org/">NHibernate</a> book on the market: <a href="http://lostechies.com/gabrielschenker/2011/08/29/nhibernate-3-beginners-guide-published/" target="_blank">NHibernate 3 Beginner’s Guide</a> by Gabriel Schenker. Gabriel is the guy behind the now-offline NHibernate FAQ site. For years, it was one of the best sites on the subject.</p>  <p>His style is straight forward and simple. It’s a surprisingly quick read, with all the right information to get up to speed on NHibernate quickly. He’s careful not to leave the reader wondering about key terms or jumping ahead to understand concepts. </p>  <p>It’s more than just an update to the 2.x version. Gabriel has rewritten this book <strong>from scratch</strong> and avoided all of the issues of the previous book. Most importantly, he takes a <strong>model-first approach</strong>. This is the beginner’s guide I would share with my coworkers, and, in fact, I have. You should absolutely buy this book for your team.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>704</wp:post_id>
		<wp:post_date>2011-09-28 00:16:12</wp:post_date>
		<wp:post_date_gmt>2011-09-28 00:16:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>review-nhibernate-3-beginners-guide</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>NHibernate Read Models: An Elephant in the Elevator</title>
		<link>http://jasondentler.com/blog/2011/12/nhibernate-read-models-an-elephant-in-the-elevator/</link>
		<pubDate>Sat, 03 Dec 2011 15:47:22 +0000</pubDate>
		<dc:creator>Jason</dc:creator>
		<guid isPermaLink="false">http://jasondentler.com/blog/2011/12/nhibernate-read-models-an-elephant-in-the-elevator/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Our company website is a mostly well-architected <a href="http://nhforge.org/">NHibernate</a> web application. There’s a few data access related performance problems, like ghost writes. I’m confident these issues account for most of the slowness, but the site is still pretty snappy considering we just set debug=”false” and hit publish. </p>  <p>Entities were modeled after the business and mapped on to a proper 3rd normal form database with no aggregate boundaries. The object graph for a given query can easily be 5 or 6 layers deep. Translated in to SQL, this means an explosion of joins. The vast majority of the database is populated nightly from SSIS packages and otherwise completely read-only.</p>  <p>I’ve seen this movie before. Hell, I’ve directed, starred in, and won an Oscar for this movie. Haven’t we all? The database is modeled after the business, and then pinched and pulled and squished to service a query-heavy application or query-only web site. By the time you’ve finally pushed that NHibernate elephant in to the elevator, you and your app are bruised and brittle.</p>  <p>We did all that work to get to a point where we’re murdering our SQL database with the same joins over and over. It would require MUCH less processing power to pre-calculate each view model and make it easy to fetch quickly.</p>  <p>This past week, I attended the <a href="http://www.headspring.com/services/developer-training/nservicebus-boot-camp" target="_blank">NServiceBus Boot Camp</a>. What an amazing Christmas gift! I can’t recommend it enough. I wish we’d had time to dig in to CQRS read models more, but here’s a few points on the topic:</p>  <ol>   <li>The read model SQL database lives on the web server. Think of it as a cache, just more explicit. </li>    <li>Domain processing happens elsewhere and publishes events. </li>    <li>Handlers on the web server handle those events and update the read model accordingly. NHibernate feels heavy here. Consider a Micro-ORM. </li>    <li>Reads go directly to the local database. Query with something really light, then bind the result to the page. </li> </ol>  <p>Though I haven’t tried it, I suspect <a href="http://ayende.com/blog/136196/when-should-you-use-ravendb" target="_blank">RavenDB would be a good alternative to SQL on the web server</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>705</wp:post_id>
		<wp:post_date>2011-12-03 15:47:22</wp:post_date>
		<wp:post_date_gmt>2011-12-03 15:47:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nhibernate-read-models-an-elephant-in-the-elevator</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>3463</wp:comment_id>
			<wp:comment_author><![CDATA[Jimmy Bogard]]></wp:comment_author>
			<wp:comment_author_email>jimmy.bogard@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://jimmybogard.lostechies.com</wp:comment_author_url>
			<wp:comment_author_IP>71.42.225.130</wp:comment_author_IP>
			<wp:comment_date>2011-12-12 19:32:15</wp:comment_date>
			<wp:comment_date_gmt>2011-12-12 19:32:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for attending last week! It must seem really bizarre to have the creator of AutoMapper basically suggest not using it for Domain Model -&gt; DTO flattening :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1323721053.547";s:7:"message";s:44:"Jason changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1323718335.9078";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:132:{s:15:"comment_post_ID";s:3:"705";s:14:"comment_author";s:12:"Jimmy Bogard";s:20:"comment_author_email";s:22:"jimmy.bogard@gmail.com";s:18:"comment_author_url";s:33:"http://jimmybogard.lostechies.com";s:15:"comment_content";s:162:"Thanks for attending last week! It must seem really bizarre to have the creator of AutoMapper basically suggest not using it for Domain Model -> DTO flattening :)";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:13:"71.42.225.130";s:10:"user_agent";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2";s:8:"referrer";s:88:"http://jasondentler.com/blog/2011/12/nhibernate-read-models-an-elephant-in-the-elevator/";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:88:"http://jasondentler.com/blog/2011/12/nhibernate-read-models-an-elephant-in-the-elevator/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:12:"Jimmy Bogard";s:10:"POST_email";s:22:"jimmy.bogard@gmail.com";s:8:"POST_url";s:33:"http://jimmybogard.lostechies.com";s:12:"POST_comment";s:162:"Thanks for attending last week! It must seem really bizarre to have the creator of AutoMapper basically suggest not using it for Domain Model -> DTO flattening :)";s:20:"POST_comment_post_ID";s:3:"705";s:19:"POST_comment_parent";s:1:"0";s:11:"POST_submit";s:14:"Submit Comment";s:14:"POST_formInput";s:0:"";s:26:"POST_akismet_comment_nonce";s:10:"61bc2601db";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-bc8a77ab-ea08-4ca7-b57f-46d7bd4fed15";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:11:"commonfiles";s:27:"C:Program FilesCommon Files";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG280";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg280.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:241:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools;C:Program Files (x86)Microsoft ASP.NETASP.NET Web Pagesv1.0";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.147";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:9:"progfiles";s:15:"C:Program Files";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31324";s:7:"SUBMASK";s:13:"255.255.255.0";s:9:"systemdir";s:17:"C:Windowssystem32";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG280$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:19:"HTTP_CONTENT_LENGTH";s:3:"376";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.3";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:88:"http://jasondentler.com/blog/2011/12/nhibernate-read-models-an-elephant-in-the-elevator/";s:15:"HTTP_USER_AGENT";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2";s:11:"HTTP_ORIGIN";s:23:"http://jasondentler.com";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"376";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:13:"71.42.225.130";s:11:"REMOTE_HOST";s:13:"71.42.225.130";s:11:"REMOTE_PORT";s:5:"35040";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:26:"/blog/wp-comments-post.php";s:14:"ORIG_PATH_INFO";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1323718334";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3466</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasondentler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.200.21.3</wp:comment_author_IP>
			<wp:comment_date>2011-12-12 20:23:32</wp:comment_date>
			<wp:comment_date_gmt>2011-12-12 20:23:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You should try NHibernate. It does everything. I should know. I wrote the book. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1323721412.5565";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:133:{s:15:"comment_post_ID";s:3:"705";s:14:"comment_author";s:5:"Jason";s:20:"comment_author_email";s:22:"jasondentler@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:82:"You should try NHibernate. It does everything. I should know. I wrote the book. :)";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"1";s:7:"user_ip";s:12:"207.200.21.3";s:10:"user_agent";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2";s:8:"referrer";s:88:"http://jasondentler.com/blog/2011/12/nhibernate-read-models-an-elephant-in-the-elevator/";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:88:"http://jasondentler.com/blog/2011/12/nhibernate-read-models-an-elephant-in-the-elevator/";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:12:"POST_comment";s:82:"You should try NHibernate. It does everything. I should know. I wrote the book. :)";s:20:"POST_comment_post_ID";s:3:"705";s:19:"POST_comment_parent";s:1:"0";s:11:"POST_submit";s:14:"Submit Comment";s:14:"POST_formInput";s:0:"";s:32:"POST__wp_unfiltered_html_comment";s:10:"4519e238aa";s:26:"POST_akismet_comment_nonce";s:10:"8e91f94604";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-0726550b-dc00-41eb-acf2-37cd170736ab";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:11:"commonfiles";s:27:"C:Program FilesCommon Files";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG280";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg280.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:241:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools;C:Program Files (x86)Microsoft ASP.NETASP.NET Web Pagesv1.0";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.147";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:9:"progfiles";s:15:"C:Program Files";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31324";s:7:"SUBMASK";s:13:"255.255.255.0";s:9:"systemdir";s:17:"C:Windowssystem32";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG280$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:8:"HTTP_VIA";s:64:"1.1 wkcorpiron.corp.weekleyhomes.com:80 (IronPort-WSA/7.1.3-014)";s:19:"HTTP_CONTENT_LENGTH";s:3:"236";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.3";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:11:"HTTP_COOKIE";s:0:"";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:88:"http://jasondentler.com/blog/2011/12/nhibernate-read-models-an-elephant-in-the-elevator/";s:15:"HTTP_USER_AGENT";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2";s:11:"HTTP_ORIGIN";s:23:"http://jasondentler.com";s:17:"HTTP_X_IMFORWARDS";s:2:"20";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"236";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:12:"207.200.21.3";s:11:"REMOTE_HOST";s:12:"207.200.21.3";s:11:"REMOTE_PORT";s:5:"61497";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:26:"/blog/wp-comments-post.php";s:14:"ORIG_PATH_INFO";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1323721411";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3591</wp:comment_id>
			<wp:comment_author><![CDATA[Mahendra Mavani]]></wp:comment_author>
			<wp:comment_author_email>mahendra.mavani@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://mahendramavani.com</wp:comment_author_url>
			<wp:comment_author_IP>71.42.225.130</wp:comment_author_IP>
			<wp:comment_date>2011-12-14 19:32:00</wp:comment_date>
			<wp:comment_date_gmt>2011-12-14 19:32:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for good word about bootcamp. 

I share same feeling with Jimmy, when recommending direct ADO call from UI layer. As a matter of fact, when I heard it first time during Udi's training,  my comment was: "Udi is peeling off Jeffrey's Onion"]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1323891120.5057";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:132:{s:15:"comment_post_ID";s:3:"705";s:14:"comment_author";s:15:"Mahendra Mavani";s:20:"comment_author_email";s:25:"mahendra.mavani@gmail.com";s:18:"comment_author_url";s:25:"http://mahendramavani.com";s:15:"comment_content";s:247:"Thanks for good word about bootcamp. 

I share same feeling with Jimmy, when recommending direct ADO call from UI layer. As a matter of fact, when I heard it first time during Udi's training,  my comment was: "Udi is peeling off Jeffrey's Onion"";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:13:"71.42.225.130";s:10:"user_agent";s:105:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.63 Safari/535.7";s:8:"referrer";s:88:"http://jasondentler.com/blog/2011/12/nhibernate-read-models-an-elephant-in-the-elevator/";s:4:"blog";s:28:"http://jasondentler.com/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:88:"http://jasondentler.com/blog/2011/12/nhibernate-read-models-an-elephant-in-the-elevator/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:15:"Mahendra Mavani";s:10:"POST_email";s:25:"mahendra.mavani@gmail.com";s:8:"POST_url";s:25:"http://mahendramavani.com";s:12:"POST_comment";s:247:"Thanks for good word about bootcamp. 

I share same feeling with Jimmy, when recommending direct ADO call from UI layer. As a matter of fact, when I heard it first time during Udi's training,  my comment was: "Udi is peeling off Jeffrey's Onion"";s:20:"POST_comment_post_ID";s:3:"705";s:19:"POST_comment_parent";s:1:"0";s:11:"POST_submit";s:14:"Submit Comment";s:14:"POST_formInput";s:0:"";s:26:"POST_akismet_comment_nonce";s:10:"050d6ad8cc";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:13:"_FCGI_X_PIPE_";s:50:"\.pipeIISFCGI-84f782da-2e93-408e-9f69-90af5396448a";s:5:"PHPRC";s:28:"D:Hosting8214110htmlphp5.ini";s:17:"ADDITIONALSERVERS";s:69:"p3nw5nlmaster01,p3nw5nlmedia01,p3nw5nlmedia02,p3pwarmedia01,p3media02";s:15:"ALLUSERSPROFILE";s:13:"C:ProgramData";s:7:"APPDATA";s:50:"C:Windowssystem32configsystemprofileAppDataRoaming";s:11:"APP_POOL_ID";s:22:"8214110_32_I_solo_v4.0";s:11:"commonfiles";s:27:"C:Program FilesCommon Files";s:18:"CommonProgramFiles";s:33:"C:Program Files (x86)Common Files";s:23:"CommonProgramFiles(x86)";s:33:"C:Program Files (x86)Common Files";s:18:"CommonProgramW6432";s:27:"C:Program FilesCommon Files";s:12:"COMPUTERNAME";s:11:"P3NW8SHG280";s:7:"ComSpec";s:24:"C:Windowssystem32cmd.exe";s:7:"DEFGATE";s:15:"184.168.152.254";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:4:"FQDN";s:42:"p3nw8shg280.shr.prod.phx3.secureserver.net";s:12:"LOCALAPPDATA";s:48:"C:Windowssystem32configsystemprofileAppDataLocal";s:12:"LOCALSQLMSTR";s:9:"%SQLMSTR%";s:12:"MASTERSERVER";s:15:"p3nw5nlmaster01";s:20:"NUMBER_OF_PROCESSORS";s:1:"8";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:241:"C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem;C:WindowsSystem32WindowsPowerShellv1.0;C:Program Files (x86)Windows Imaging;D:Program FilesDellOpenManageomabin;C:GDcomponentstools;C:Program Files (x86)Microsoft ASP.NETASP.NET Web Pagesv1.0";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:10:"PRIMARYDNS";s:13:"72.167.234.71";s:9:"PRIMARYIP";s:15:"184.168.152.147";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 44 Stepping 2, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"2c02";s:9:"progfiles";s:15:"C:Program Files";s:11:"ProgramData";s:13:"C:ProgramData";s:12:"ProgramFiles";s:21:"C:Program Files (x86)";s:17:"ProgramFiles(x86)";s:21:"C:Program Files (x86)";s:12:"ProgramW6432";s:15:"C:Program Files";s:12:"PSModulePath";s:45:"C:Windowssystem32WindowsPowerShellv1.0Modules";s:6:"PUBLIC";s:13:"C:UsersPublic";s:12:"SECONDARYDNS";s:13:"72.167.234.72";s:6:"SMDBID";s:5:"31324";s:7:"SUBMASK";s:13:"255.255.255.0";s:9:"systemdir";s:17:"C:Windowssystem32";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:9:"C:Windows";s:4:"TEMP";s:9:"d:temptmp";s:3:"TMP";s:9:"d:temptmp";s:7:"UATDATA";s:63:"C:WindowsSysWOW64CCMUATDataD9F8C395-CAB8-491d-B8AC-179A1FE1BE77";s:10:"USERDOMAIN";s:4:"PHX3";s:8:"USERNAME";s:12:"P3NW8SHG280$";s:11:"USERPROFILE";s:36:"C:Windowssystem32configsystemprofile";s:6:"windir";s:9:"C:Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:19:"HTTP_CONTENT_LENGTH";s:3:"475";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.3";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:9:"HTTP_HOST";s:16:"jasondentler.com";s:12:"HTTP_REFERER";s:88:"http://jasondentler.com/blog/2011/12/nhibernate-read-models-an-elephant-in-the-elevator/";s:15:"HTTP_USER_AGENT";s:105:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.63 Safari/535.7";s:11:"HTTP_ORIGIN";s:23:"http://jasondentler.com";s:13:"DOCUMENT_ROOT";s:20:"D:Hosting8214110html";s:13:"INSTANCE_NAME";s:16:"JASONDENTLER.COM";s:15:"SCRIPT_FILENAME";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:20:"IIS_UrlRewriteModule";s:1:"1";s:12:"APPL_MD_PATH";s:22:"/LM/W3SVC/8214110/ROOT";s:18:"APPL_PHYSICAL_PATH";s:20:"D:Hosting8214110html";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"475";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:7:"8214110";s:18:"INSTANCE_META_PATH";s:17:"/LM/W3SVC/8214110";s:10:"LOCAL_ADDR";s:12:"184.168.34.1";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:44:"D:Hosting8214110htmlblogwp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:13:"71.42.225.130";s:11:"REMOTE_HOST";s:13:"71.42.225.130";s:11:"REMOTE_PORT";s:5:"63888";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:11:"SERVER_NAME";s:16:"jasondentler.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:26:"/blog/wp-comments-post.php";s:14:"ORIG_PATH_INFO";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1323891119";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1323898149.8164";s:7:"message";s:44:"Jason changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"Jason";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
</channel>
</rss>
